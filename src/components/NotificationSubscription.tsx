"use client";

import { useState } from 'react';
import { useSimpleAuth } from '@/components/SimpleAuthProvider';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Badge } from '@/components/ui/badge';
import { Checkbox } from '@/components/ui/checkbox';
import {
  Bell,
  Mail,
  Trophy,
  MapPin,
  Users,
  CheckCircle,
  AlertTriangle,
  Settings
} from 'lucide-react';

interface NotificationSettings {
  newCompetitions: boolean;
  registrationReminders: boolean;
  competitionUpdates: boolean;
  results: boolean;
  emailFrequency: 'immediate' | 'daily' | 'weekly';
}

export function NotificationSubscription() {
  const { user } = useSimpleAuth();
  const [isSubscribed, setIsSubscribed] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [message, setMessage] = useState('');
  const [messageType, setMessageType] = useState<'success' | 'error'>('success');

  const [settings, setSettings] = useState<NotificationSettings>({
    newCompetitions: true,
    registrationReminders: true,
    competitionUpdates: false,
    results: false,
    emailFrequency: 'immediate'
  });

  const handleSubscribe = async () => {
    if (!user?.email) {
      setMessage('–£–≤—ñ–π–¥—ñ—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è');
      setMessageType('error');
      return;
    }

    setIsLoading(true);
    setMessage('');

    try {
      const response = await fetch('/api/notifications/subscribe', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          email: user.email,
          settings: settings
        }),
      });

      const result = await response.json();

      if (response.ok) {
        setIsSubscribed(true);
        setMessage('‚úÖ –í–∏ —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è!');
        setMessageType('success');
      } else {
        setMessage(result.error || '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—ñ–¥–ø–∏—Å—Ü—ñ');
        setMessageType('error');
      }
    } catch (error) {
      setMessage('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—ñ–¥–ø–∏—Å—Ü—ñ –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è');
      setMessageType('error');
    } finally {
      setIsLoading(false);
    }
  };

  const handleUnsubscribe = async () => {
    setIsLoading(true);
    setMessage('');

    try {
      const response = await fetch('/api/notifications/unsubscribe', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          email: user?.email
        }),
      });

      const result = await response.json();

      if (response.ok) {
        setIsSubscribed(false);
        setMessage('–í–∏ –≤—ñ–¥–ø–∏—Å–∞–ª–∏—Å—å –≤—ñ–¥ —Å–ø–æ–≤—ñ—â–µ–Ω—å');
        setMessageType('success');
      } else {
        setMessage(result.error || '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø–∏—Å—Ü—ñ');
        setMessageType('error');
      }
    } catch (error) {
      setMessage('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø–∏—Å—Ü—ñ –≤—ñ–¥ —Å–ø–æ–≤—ñ—â–µ–Ω—å');
      setMessageType('error');
    } finally {
      setIsLoading(false);
    }
  };

  if (!user?.email) {
    return (
      <Card className="border-dashed border-2 border-blue-200">
        <CardContent className="text-center py-8">
          <Bell className="h-12 w-12 mx-auto text-blue-600 mb-4" />
          <h3 className="text-lg font-semibold mb-2">–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∑–º–∞–≥–∞–Ω–Ω—è</h3>
          <p className="text-gray-600 mb-4">
            –£–≤—ñ–π–¥—ñ—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É, —â–æ–± –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤—ñ –∑–º–∞–≥–∞–Ω–Ω—è
          </p>
          <Button variant="outline">
            –£–≤—ñ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É
          </Button>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center">
          <Bell className="h-5 w-5 mr-2 text-blue-600" />
          Email-—Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
          {isSubscribed && (
            <Badge className="ml-2 bg-green-500">
              –ê–∫—Ç–∏–≤–Ω—ñ
            </Badge>
          )}
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-6">
        {message && (
          <Alert className={messageType === 'success' ? 'bg-green-50 border-green-200' : 'bg-red-50 border-red-200'}>
            {messageType === 'success' ? (
              <CheckCircle className="h-4 w-4 text-green-600" />
            ) : (
              <AlertTriangle className="h-4 w-4 text-red-600" />
            )}
            <AlertDescription className={messageType === 'success' ? 'text-green-800' : 'text-red-800'}>
              {message}
            </AlertDescription>
          </Alert>
        )}

        <div className="space-y-4">
          <h4 className="font-semibold text-gray-900">–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å</h4>

          <div className="space-y-3">
            <div className="flex items-center space-x-2">
              <Checkbox
                id="newCompetitions"
                checked={settings.newCompetitions}
                onCheckedChange={(checked) => setSettings(prev => ({ ...prev, newCompetitions: !!checked }))}
              />
              <Label htmlFor="newCompetitions" className="flex items-center cursor-pointer">
                <Trophy className="h-4 w-4 mr-2 text-blue-600" />
                –ù–æ–≤—ñ –∑–º–∞–≥–∞–Ω–Ω—è
              </Label>
            </div>

            <div className="flex items-center space-x-2">
              <Checkbox
                id="registrationReminders"
                checked={settings.registrationReminders}
                onCheckedChange={(checked) => setSettings(prev => ({ ...prev, registrationReminders: !!checked }))}
              />
              <Label htmlFor="registrationReminders" className="flex items-center cursor-pointer">
                <Users className="h-4 w-4 mr-2 text-green-600" />
                –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é
              </Label>
            </div>

            <div className="flex items-center space-x-2">
              <Checkbox
                id="competitionUpdates"
                checked={settings.competitionUpdates}
                onCheckedChange={(checked) => setSettings(prev => ({ ...prev, competitionUpdates: !!checked }))}
              />
              <Label htmlFor="competitionUpdates" className="flex items-center cursor-pointer">
                <Settings className="h-4 w-4 mr-2 text-purple-600" />
                –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–º–∞–≥–∞–Ω—å
              </Label>
            </div>

            <div className="flex items-center space-x-2">
              <Checkbox
                id="results"
                checked={settings.results}
                onCheckedChange={(checked) => setSettings(prev => ({ ...prev, results: !!checked }))}
              />
              <Label htmlFor="results" className="flex items-center cursor-pointer">
                <Trophy className="h-4 w-4 mr-2 text-yellow-600" />
                –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–º–∞–≥–∞–Ω—å
              </Label>
            </div>
          </div>

          <div className="space-y-2">
            <Label>–ß–∞—Å—Ç–æ—Ç–∞ —Å–ø–æ–≤—ñ—â–µ–Ω—å</Label>
            <div className="flex space-x-2">
              {[
                { value: 'immediate', label: '–ú–∏—Ç—Ç—î–≤–æ' },
                { value: 'daily', label: '–©–æ–¥–Ω—è' },
                { value: 'weekly', label: '–©–æ—Ç–∏–∂–Ω—è' }
              ].map((option) => (
                <Button
                  key={option.value}
                  variant={settings.emailFrequency === option.value ? 'default' : 'outline'}
                  size="sm"
                  onClick={() => setSettings(prev => ({ ...prev, emailFrequency: option.value as any }))}
                >
                  {option.label}
                </Button>
              ))}
            </div>
          </div>
        </div>

        <div className="border-t pt-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-2">
              <Mail className="h-4 w-4 text-gray-600" />
              <span className="text-sm text-gray-600">{user.email}</span>
            </div>

            {isSubscribed ? (
              <Button
                variant="outline"
                onClick={handleUnsubscribe}
                disabled={isLoading}
                className="text-red-600 border-red-600 hover:bg-red-50"
              >
                –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å
              </Button>
            ) : (
              <Button
                onClick={handleSubscribe}
                disabled={isLoading}
                className="bg-blue-600 hover:bg-blue-700"
              >
                {isLoading ? '–ü—ñ–¥–ø–∏—Å–∫–∞...' : '–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å'}
              </Button>
            )}
          </div>
        </div>

        <div className="bg-blue-50 p-4 rounded-lg">
          <p className="text-sm text-blue-800">
            üí° <strong>–ü—ñ–¥–∫–∞–∑–∫–∞:</strong> –í–∏ –±—É–¥–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ –ø—Ä–æ —Ç—ñ —Ç–∏–ø–∏ –ø–æ–¥—ñ–π,
            —è–∫—ñ –≤–∏ –æ–±—Ä–∞–ª–∏ –≤–∏—â–µ. –í–∏ –º–æ–∂–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤ –±—É–¥—å-—è–∫–∏–π —á–∞—Å.
          </p>
        </div>
      </CardContent>
    </Card>
  );
}
