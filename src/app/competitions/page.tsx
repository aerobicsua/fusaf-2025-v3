"use client";

import { useState, useEffect } from 'react';
import { useSession } from 'next-auth/react';
import { Header } from '@/components/Header';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { PreliminaryRegistration } from '@/components/PreliminaryRegistration';
import { IndividualRegistration } from '@/components/IndividualRegistration';
import {
  Calendar,
  MapPin,
  Clock,
  Users,
  DollarSign,
  Trophy,
  UserPlus,
  FileText,
  Plus,
  Filter,
  AlertCircle
} from 'lucide-react';

interface Competition {
  id: string;
  title: string;
  description: string;
  date: string;
  time: string;
  location: string;
  address: string;
  registration_fee: number;
  entry_fee: number;
  max_participants: number;
  registration_deadline: string;
  status: string;
  club: {
    name: string;
    city: string;
  };
  preliminary_registrations: Array<{ count: number }>;
  individual_registrations: Array<{ count: number }>;
}

// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ–π–Ω—ñ –¥–∞–Ω—ñ –∑–º–∞–≥–∞–Ω—å
const demoCompetitions: Competition[] = [
  {
    id: 'comp-1',
    title: '–ö—É–±–æ–∫ –£–∫—Ä–∞—ó–Ω–∏ –∑—ñ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ—ó –∞–µ—Ä–æ–±—ñ–∫–∏ 2025',
    description: '–û—Ñ—ñ—Ü—ñ–π–Ω—ñ –∑–º–∞–≥–∞–Ω–Ω—è —Ñ–µ–¥–µ—Ä–∞—Ü—ñ—ó –£–∫—Ä–∞—ó–Ω–∏ –∑—ñ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ—ó –∞–µ—Ä–æ–±—ñ–∫–∏ —Ç–∞ —Ñ—ñ—Ç–Ω–µ—Å—É. –ó–º–∞–≥–∞–Ω–Ω—è –ø—Ä–æ–≤–æ–¥—è—Ç—å—Å—è –∑–≥—ñ–¥–Ω–æ –∑ –º—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏ FIG.',
    date: '2025-04-15',
    time: '10:00',
    location: '–ü–∞–ª–∞—Ü —Å–ø–æ—Ä—Ç—É "–£–∫—Ä–∞—ó–Ω–∞"',
    address: '–≤—É–ª. –í–µ–ª–∏–∫–∞ –í–∞—Å–∏–ª—å–∫—ñ–≤—Å—å–∫–∞, 55, –ö–∏—ó–≤, 03150',
    registration_fee: 300,
    entry_fee: 200,
    max_participants: 200,
    registration_deadline: '2025-04-01',
    status: 'registration_open',
    club: {
      name: '–°–ö "–ì—Ä–∞—Ü—ñ—è"',
      city: '–ö–∏—ó–≤'
    },
    preliminary_registrations: [{ count: 5 }],
    individual_registrations: [{ count: 12 }]
  },
  {
    id: 'comp-2',
    title: '–ß–µ–º–ø—ñ–æ–Ω–∞—Ç –õ—å–≤—ñ–≤—Å—å–∫–æ—ó –æ–±–ª–∞—Å—Ç—ñ',
    description: '–†–µ–≥—ñ–æ–Ω–∞–ª—å–Ω–∏–π —á–µ–º–ø—ñ–æ–Ω–∞—Ç –∑ —Ä—ñ–∑–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π —Ç–∞ –≤—ñ–∫–æ–≤–∏—Ö –≥—Ä—É–ø.',
    date: '2025-03-20',
    time: '09:30',
    location: '–°–ø–æ—Ä—Ç–∫–æ–º–ø–ª–µ–∫—Å "–ê—Ä–µ–Ω–∞ –õ—å–≤—ñ–≤"',
    address: '–≤—É–ª. –°—Ç—Ä–∏–π—Å—å–∫–∞, 199, –õ—å–≤—ñ–≤',
    registration_fee: 250,
    entry_fee: 150,
    max_participants: 150,
    registration_deadline: '2025-03-10',
    status: 'registration_open',
    club: {
      name: '–ê–µ—Ä–æ–±—ñ–∫–∞ –õ—å–≤—ñ–≤',
      city: '–õ—å–≤—ñ–≤'
    },
    preliminary_registrations: [{ count: 3 }],
    individual_registrations: [{ count: 8 }]
  },
  {
    id: 'comp-3',
    title: '–ü–µ—Ä—à—ñ—Å—Ç—å –î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–æ—ó –æ–±–ª–∞—Å—Ç—ñ',
    description: '–í—ñ–¥–∫—Ä–∏—Ç–∞ –ø–µ—Ä—à—ñ—Å—Ç—å –¥–ª—è –≤—Å—ñ—Ö –≤—ñ–∫–æ–≤–∏—Ö –≥—Ä—É–ø —Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π.',
    date: '2025-05-10',
    time: '11:00',
    location: '–ü–ö "–ú–µ—Ç–µ–æ—Ä"',
    address: '–ø—Ä. –ì–∞–≥–∞—Ä—ñ–Ω–∞, 99, –î–Ω—ñ–ø—Ä–æ',
    registration_fee: 200,
    entry_fee: 100,
    max_participants: 120,
    registration_deadline: '2025-04-25',
    status: 'published',
    club: {
      name: '–§—ñ—Ç–Ω–µ—Å-–î–∏–Ω–∞–º—ñ–∫–∞',
      city: '–î–Ω—ñ–ø—Ä–æ'
    },
    preliminary_registrations: [{ count: 2 }],
    individual_registrations: [{ count: 4 }]
  }
];

export default function CompetitionsPage() {
  const { data: session } = useSession();
  const [competitions, setCompetitions] = useState<Competition[]>([]);
  const [loading, setLoading] = useState(true);
  const [filter, setFilter] = useState('all');
  const [selectedCompetition, setSelectedCompetition] = useState<Competition | null>(null);
  const [registrationMode, setRegistrationMode] = useState<'preliminary' | 'individual' | null>(null);

  useEffect(() => {
    loadCompetitions();
  }, [filter]);

  const loadCompetitions = async () => {
    try {
      setLoading(true);

      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ–π–Ω—ñ –¥–∞–Ω—ñ
      let filteredCompetitions = [...demoCompetitions];

      if (filter !== 'all') {
        filteredCompetitions = filteredCompetitions.filter(comp => comp.status === filter);
      }

      setCompetitions(filteredCompetitions);
      console.log(`‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${filteredCompetitions.length} –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ–π–Ω–∏—Ö –∑–º–∞–≥–∞–Ω—å`);

    } catch (error) {
      console.error('Error loading competitions:', error);
      // –ó–∞–≤–∂–¥–∏ –ø–æ–∫–∞–∑—É—î–º–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ–π–Ω—ñ –¥–∞–Ω—ñ –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
      setCompetitions(demoCompetitions);
    } finally {
      setLoading(false);
    }
  };

  const getStatusBadge = (status: string) => {
    const statusConfig = {
      draft: { label: '–ß–µ—Ä–Ω–µ—Ç–∫–∞', color: 'bg-gray-500' },
      published: { label: '–û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ', color: 'bg-blue-500' },
      registration_open: { label: '–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤—ñ–¥–∫—Ä–∏—Ç–∞', color: 'bg-green-500' },
      registration_closed: { label: '–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–∫—Ä–∏—Ç–∞', color: 'bg-yellow-500' },
      in_progress: { label: '–ü—Ä–æ—Ö–æ–¥–∏—Ç—å', color: 'bg-purple-500' },
      completed: { label: '–ó–∞–≤–µ—Ä—à–µ–Ω–æ', color: 'bg-gray-600' },
      cancelled: { label: '–°–∫–∞—Å–æ–≤–∞–Ω–æ', color: 'bg-red-500' }
    };

    const config = statusConfig[status as keyof typeof statusConfig] || statusConfig.draft;
    return (
      <Badge className={`${config.color} text-white`}>
        {config.label}
      </Badge>
    );
  };

  const isRegistrationAvailable = (competition: Competition) => {
    return competition.status === 'registration_open' &&
           new Date() < new Date(competition.registration_deadline);
  };

  const canUserRegister = (competition: Competition) => {
    // –ë—É–¥—å-—è–∫–∏–π –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–æ–∂–µ –ø–æ–¥–∞–≤–∞—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é
    return session && isRegistrationAvailable(competition);
  };

  const canUserCreateCompetition = () => {
    // –¢—ñ–ª—å–∫–∏ –≤–ª–∞—Å–Ω–∏–∫–∏ –∫–ª—É–±—ñ–≤ —Ç–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –º–æ–∂—É—Ç—å —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –∑–º–∞–≥–∞–Ω–Ω—è
    return session && ['club_owner', 'admin'].includes(session.user?.role || '');
  };

  const getRegistrationStats = (competition: Competition) => {
    const preliminaryCount = competition.preliminary_registrations?.[0]?.count || 0;
    const individualCount = competition.individual_registrations?.[0]?.count || 0;
    return { preliminaryCount, individualCount };
  };

  const handleRegistrationSuccess = (registration: any) => {
    alert(`‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞!\n\n–ù–æ–º–µ—Ä —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: ${registration.registration_number || registration.id}`);
    setRegistrationMode(null);
    setSelectedCompetition(null);
    loadCompetitions(); // –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ –∑–º–∞–≥–∞–Ω—å
  };

  const handleRegistrationCancel = () => {
    setRegistrationMode(null);
    setSelectedCompetition(null);
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50">
        <Header />
        <div className="container mx-auto px-4 py-8">
          <div className="flex items-center justify-center h-64">
            <div className="text-center">
              <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
              <p className="text-gray-600">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º–∞–≥–∞–Ω—å...</p>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <Header />

      <div className="container mx-auto px-4 py-8">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞ —Ñ—ñ–ª—å—Ç—Ä–∏ */}
        <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-8">
          <div>
            <h1 className="text-3xl font-bold text-gray-900 mb-2">
              üèÜ –ö–∞–ª–µ–Ω–¥–∞—Ä –∑–º–∞–≥–∞–Ω—å –§–£–°–ê–§
            </h1>
            <p className="text-gray-600">
              –û—Ñ—ñ—Ü—ñ–π–Ω—ñ –∑–º–∞–≥–∞–Ω–Ω—è –∑ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ—ó –∞–µ—Ä–æ–±—ñ–∫–∏ —Ç–∞ —Ñ—ñ—Ç–Ω–µ—Å—É –≤ –£–∫—Ä–∞—ó–Ω—ñ
            </p>
            <div className="mt-2">
              <Badge variant="outline" className="bg-green-50 text-green-700 border-green-200">
                üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ–π–Ω–∏–π —Ä–µ–∂–∏–º - –°–∏—Å—Ç–µ–º–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –≥–æ—Ç–æ–≤–∞!
              </Badge>
            </div>
          </div>

          <div className="flex items-center space-x-4 mt-4 md:mt-0">
            {/* –§—ñ–ª—å—Ç—Ä–∏ */}
            <div className="flex items-center space-x-2">
              <Filter className="h-4 w-4 text-gray-500" />
              <select
                value={filter}
                onChange={(e) => setFilter(e.target.value)}
                className="border rounded-md px-3 py-2 text-sm"
              >
                <option value="all">–í—Å—ñ –∑–º–∞–≥–∞–Ω–Ω—è</option>
                <option value="registration_open">–í—ñ–¥–∫—Ä–∏—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è</option>
                <option value="published">–û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω—ñ</option>
                <option value="in_progress">–ü—Ä–æ—Ö–æ–¥—è—Ç—å</option>
                <option value="completed">–ó–∞–≤–µ—Ä—à–µ–Ω—ñ</option>
              </select>
            </div>

            {/* –ö–Ω–æ–ø–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–º–∞–≥–∞–Ω–Ω—è */}
            {canUserCreateCompetition() && (
              <Button className="bg-blue-600 hover:bg-blue-700">
                <Plus className="h-4 w-4 mr-2" />
                –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–º–∞–≥–∞–Ω–Ω—è
              </Button>
            )}
          </div>
        </div>

        {/* –°–ø–∏—Å–æ–∫ –∑–º–∞–≥–∞–Ω—å */}
        {competitions.length === 0 ? (
          <Card className="text-center py-12">
            <CardContent>
              <Trophy className="h-16 w-16 mx-auto text-gray-400 mb-4" />
              <h3 className="text-lg font-semibold mb-2">–ó–º–∞–≥–∞–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</h3>
              <p className="text-gray-600 mb-4">
                –ù–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç –Ω–µ–º–∞—î –∑–º–∞–≥–∞–Ω—å –∑–∞ –æ–±—Ä–∞–Ω–∏–º–∏ –∫—Ä–∏—Ç–µ—Ä—ñ—è–º–∏
              </p>
              {canUserCreateCompetition() && (
                <Button className="bg-blue-600 hover:bg-blue-700">
                  <Plus className="h-4 w-4 mr-2" />
                  –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–µ—Ä—à–µ –∑–º–∞–≥–∞–Ω–Ω—è
                </Button>
              )}
            </CardContent>
          </Card>
        ) : (
          <div className="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6">
            {competitions.map((competition) => {
              const { preliminaryCount, individualCount } = getRegistrationStats(competition);
              const isAvailable = isRegistrationAvailable(competition);
              const userCanRegister = canUserRegister(competition);

              return (
                <Card key={competition.id} className="hover:shadow-lg transition-shadow">
                  <CardHeader>
                    <div className="flex justify-between items-start mb-2">
                      <CardTitle className="text-lg leading-tight">
                        {competition.title}
                      </CardTitle>
                      {getStatusBadge(competition.status)}
                    </div>
                    <p className="text-sm text-gray-600 line-clamp-2">
                      {competition.description}
                    </p>
                  </CardHeader>

                  <CardContent className="space-y-4">
                    {/* –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è */}
                    <div className="space-y-2">
                      <div className="flex items-center text-sm text-gray-600">
                        <Calendar className="h-4 w-4 mr-2" />
                        {new Date(competition.date).toLocaleDateString('uk-UA')} –æ {competition.time}
                      </div>
                      <div className="flex items-center text-sm text-gray-600">
                        <MapPin className="h-4 w-4 mr-2" />
                        {competition.location}, {competition.club?.city}
                      </div>
                      <div className="flex items-center text-sm text-gray-600">
                        <Clock className="h-4 w-4 mr-2" />
                        –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –¥–æ: {new Date(competition.registration_deadline).toLocaleDateString('uk-UA')}
                      </div>
                    </div>

                    {/* –§—ñ–Ω–∞–Ω—Å–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è */}
                    <div className="bg-gray-50 p-3 rounded-lg">
                      <div className="flex items-center justify-between text-sm">
                        <span className="text-gray-600">–†–µ—î—Å—Ç—Ä–∞—Ü—ñ–π–Ω–∏–π –≤–Ω–µ—Å–æ–∫:</span>
                        <span className="font-semibold">{competition.registration_fee} –≥—Ä–Ω</span>
                      </div>
                      {competition.entry_fee > 0 && (
                        <div className="flex items-center justify-between text-sm">
                          <span className="text-gray-600">–í—Å—Ç—É–ø–Ω–∏–π –≤–Ω–µ—Å–æ–∫:</span>
                          <span className="font-semibold">{competition.entry_fee} –≥—Ä–Ω</span>
                        </div>
                      )}
                    </div>

                    {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ–π */}
                    <div className="grid grid-cols-2 gap-4 text-center">
                      <div className="bg-blue-50 p-2 rounded">
                        <div className="text-lg font-bold text-blue-600">{preliminaryCount}</div>
                        <div className="text-xs text-blue-600">–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ</div>
                      </div>
                      <div className="bg-green-50 p-2 rounded">
                        <div className="text-lg font-bold text-green-600">{individualCount}</div>
                        <div className="text-xs text-green-600">–Ü–º–µ–Ω–Ω—ñ</div>
                      </div>
                    </div>

                    {/* –ö–Ω–æ–ø–∫–∏ –¥—ñ–π */}
                    <div className="space-y-2">
                      {!isAvailable && (
                        <div className="flex items-center text-sm text-amber-600 bg-amber-50 p-2 rounded">
                          <AlertCircle className="h-4 w-4 mr-2" />
                          –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–∫—Ä–∏—Ç–∞ –∞–±–æ –∑–º–∞–≥–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ
                        </div>
                      )}

                      {userCanRegister && (
                        <div className="grid grid-cols-2 gap-2">
                          <Dialog>
                            <DialogTrigger asChild>
                              <Button
                                size="sm"
                                variant="outline"
                                onClick={() => {
                                  setSelectedCompetition(competition);
                                  setRegistrationMode('preliminary');
                                }}
                              >
                                <FileText className="h-4 w-4 mr-1" />
                                –ü–æ–ø–µ—Ä–µ–¥–Ω—è
                              </Button>
                            </DialogTrigger>
                          </Dialog>

                          <Dialog>
                            <DialogTrigger asChild>
                              <Button
                                size="sm"
                                onClick={() => {
                                  setSelectedCompetition(competition);
                                  setRegistrationMode('individual');
                                }}
                              >
                                <UserPlus className="h-4 w-4 mr-1" />
                                –Ü–º–µ–Ω–Ω–∞
                              </Button>
                            </DialogTrigger>
                          </Dialog>
                        </div>
                      )}

                      {!session && isAvailable && (
                        <div className="text-center">
                          <p className="text-sm text-gray-600 mb-2">
                            –£–≤—ñ–π–¥—ñ—Ç—å –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –Ω–∞ –∑–º–∞–≥–∞–Ω–Ω—è
                          </p>
                          <Button size="sm" variant="outline">
                            –£–≤—ñ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É
                          </Button>
                        </div>
                      )}

                      <Button
                        size="sm"
                        variant="ghost"
                        className="w-full"
                      >
                        –î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              );
            })}
          </div>
        )}

        {/* –î—ñ–∞–ª–æ–≥–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó */}
        {selectedCompetition && registrationMode === 'preliminary' && (
          <Dialog open={true} onOpenChange={() => handleRegistrationCancel()}>
            <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
              <DialogHeader>
                <DialogTitle>–ü–æ–ø–µ—Ä–µ–¥–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è</DialogTitle>
                <DialogDescription>
                  –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≥–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —É—á–∞—Å–Ω–∏–∫—ñ–≤ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏
                </DialogDescription>
              </DialogHeader>
              <PreliminaryRegistration
                competitionId={selectedCompetition.id}
                competitionTitle={selectedCompetition.title}
                registrationFee={selectedCompetition.registration_fee}
                entryFee={selectedCompetition.entry_fee}
                onSuccess={handleRegistrationSuccess}
                onCancel={handleRegistrationCancel}
              />
            </DialogContent>
          </Dialog>
        )}

        {selectedCompetition && registrationMode === 'individual' && (
          <Dialog open={true} onOpenChange={() => handleRegistrationCancel()}>
            <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
              <DialogHeader>
                <DialogTitle>–Ü–º–µ–Ω–Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è</DialogTitle>
                <DialogDescription>
                  –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—á–∞—Å–Ω–∏–∫–∞ –Ω–∞ –∑–º–∞–≥–∞–Ω–Ω—è
                </DialogDescription>
              </DialogHeader>
              <IndividualRegistration
                competitionId={selectedCompetition.id}
                competitionTitle={selectedCompetition.title}
                competitionDate={selectedCompetition.date}
                registrationFee={selectedCompetition.registration_fee}
                entryFee={selectedCompetition.entry_fee}
                onSuccess={handleRegistrationSuccess}
                onCancel={handleRegistrationCancel}
              />
            </DialogContent>
          </Dialog>
        )}
      </div>
    </div>
  );
}
