import { NextRequest, NextResponse } from 'next/server';
import { executeQuery } from '@/lib/mysql';

export async function POST(request: NextRequest) {
  try {
    const { email, profileData } = await request.json();

    if (!email || !profileData) {
      return NextResponse.json({
        success: false,
        error: 'Email —Ç–∞ –¥–∞–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ'
      }, { status: 400 });
    }

    console.log(`üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –¥–ª—è: ${email}`);
    console.log(`üñºÔ∏è –ê–≤–∞—Ç–∞—Ä: ${profileData.avatar ? '–ø—Ä–∏—Å—É—Ç–Ω—ñ–π (–¥–æ–≤–∂–∏–Ω–∞: ' + profileData.avatar.length + ')' : '–≤—ñ–¥—Å—É—Ç–Ω—ñ–π'}`);

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∞–≤–∞—Ç–∞—Ä–∞
    if (profileData.avatar && profileData.avatar.length > 16777215) { // 16MB limit for MEDIUMTEXT
      console.warn('‚ö†Ô∏è –ê–≤–∞—Ç–∞—Ä –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π, –æ–±—Ä—ñ–∑–∞—î–º–æ...');
      profileData.avatar = profileData.avatar.substring(0, 16777215);
    }

    // –û–Ω–æ–≤–ª—é—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const updates = {
      first_name: profileData.firstName || '',
      last_name: profileData.lastName || '',
      middle_name: profileData.middleName || '',
      date_of_birth: profileData.dateOfBirth || null,
      gender: profileData.gender || null,
      phone: profileData.phone || '',
      region: profileData.region || '',
      city: profileData.city || '',
      address: profileData.address || '',
      zip_code: profileData.zipCode || '',
      bio: profileData.bio || '',
      website: profileData.website || '',
      club: profileData.club || '',
      coach: profileData.coach || '',
      sport_category: profileData.sportCategory || '',
      experience: profileData.experience || '',
      specialization: profileData.specialization || '',
      achievements: profileData.achievements || '',
      is_public_profile: profileData.isPublicProfile || false,
      show_email: profileData.showEmail || false,
      show_phone: profileData.showPhone || false,
      email_notifications: profileData.emailNotifications !== false,
      avatar: profileData.avatar || null,
      social_media: JSON.stringify(profileData.socialMedia || {}),
      documents: JSON.stringify({
        files: profileData.documents || [],
        competitions: profileData.competitions || []
      })
    };

    console.log(`üìÖ –î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è:`);
    console.log(`üìÖ   - –û—Ç—Ä–∏–º–∞–Ω–æ: "${profileData.dateOfBirth}" (—Ç–∏–ø: ${typeof profileData.dateOfBirth})`);
    console.log(`üìÖ   - –û–±—Ä–æ–±–ª–µ–Ω–æ: ${updates.date_of_birth} (—Ç–∏–ø: ${typeof updates.date_of_birth})`);
    console.log(`üë®‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è:`);
    console.log(`üë®‚Äçüè´   - –û—Ç—Ä–∏–º–∞–Ω–æ: "${profileData.coach}" (—Ç–∏–ø: ${typeof profileData.coach})`);
    console.log(`üë®‚Äçüè´   - –û–±—Ä–æ–±–ª–µ–Ω–æ: ${updates.coach} (—Ç–∏–ø: ${typeof updates.coach})`);

    // –ë—É–¥—É—î–º–æ –¥–∏–Ω–∞–º—ñ—á–Ω–∏–π –∑–∞–ø–∏—Ç –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    const updateFields = [];
    const values = [];

    Object.entries(updates).forEach(([key, value]) => {
      // –ó–∞–≤–∂–¥–∏ –≤–∫–ª—é—á–∞—î–º–æ –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –≤–æ–Ω–∞ null
      if (key === 'date_of_birth' || (value !== null && value !== undefined)) {
        updateFields.push(`${key} = ?`);
        values.push(value);
      }
    });

    // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤–Ω–µ —ñ–º'—è
    const fullName = `${profileData.lastName || ''} ${profileData.firstName || ''} ${profileData.middleName || ''}`.trim();
    if (fullName) {
      updateFields.push('name = ?');
      values.push(fullName);
    }

    // –î–æ–¥–∞—î–º–æ email –¥–ª—è WHERE
    values.push(email);

    // –í–∏–∫–æ–Ω—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    await executeQuery(`
      UPDATE users
      SET ${updateFields.join(', ')}, updated_at = NOW()
      WHERE email = ?
    `, values);

    console.log(`‚úÖ –ü—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${email} –æ–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ`);

    return NextResponse.json({
      success: true,
      message: '–ü—Ä–æ—Ñ—ñ–ª—å –æ–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ'
    });

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é:', error);
    return NextResponse.json({
      success: false,
      error: '–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é',
      details: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'
    }, { status: 500 });
  }
}
