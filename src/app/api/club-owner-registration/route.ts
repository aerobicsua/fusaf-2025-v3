import { NextRequest, NextResponse } from 'next/server';
import { ClubRequestsStorage } from '@/lib/club-requests-storage';
import { executeQuery } from '@/lib/mysql';
import { EmailService } from '@/lib/email';
import bcrypt from 'bcryptjs';

// –¢–∏–º—á–∞—Å–æ–≤–µ —Å—Ö–æ–≤–∏—â–µ –¥–ª—è —Ñ–∞–π–ª—ñ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ cloud storage)
const uploadedFiles = new Map<string, { name: string, size: number, type: string, data: string }>();

export async function POST(request: NextRequest) {
  try {
    console.log('üè¢ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–µ—Ä—ñ–≤–Ω–∏–∫–∞ –∫–ª—É–±—É/–ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—É —Ä–æ–∑–ø–æ—á–∞—Ç–∞');

    // –ë–µ–∑–ø–µ—á–Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è FormData
    let formData;
    try {
      formData = await request.formData();
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É FormData:', error);
      return NextResponse.json(
        { success: false, error: '–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ñ–æ—Ä–º–∏' },
        { status: 400 }
      );
    }

    // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –ø–æ–ª—è –∑ —Ñ–æ—Ä–º–∏
    const rawPassword = formData.get('password');
    console.log('üîë –ü–∞—Ä–æ–ª—å –∑ FormData:', rawPassword ? `‚úì –æ—Ç—Ä–∏–º–∞–Ω–æ (–¥–æ–≤–∂–∏–Ω–∞: ${rawPassword.toString().length})` : '‚úó –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–æ');

    const clubOwnerData = {
      // –û—Å–æ–±–∏—Å—Ç—ñ –¥–∞–Ω—ñ
      firstName: formData.get('firstName') as string,
      lastName: formData.get('lastName') as string,
      middleName: formData.get('middleName') as string || '',
      position: formData.get('position') as string,
      email: formData.get('email') as string,
      phone: formData.get('phone') as string,
      password: rawPassword as string,
      region: formData.get('region') as string,
      city: formData.get('city') as string,

      // –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–ª—É–±/–ø—ñ–¥—Ä–æ–∑–¥—ñ–ª
      clubName: formData.get('clubName') as string,
      clubType: formData.get('clubType') as string,
      zipCode: formData.get('zipCode') as string,
      clubRegion: formData.get('clubRegion') as string,
      clubCity: formData.get('clubCity') as string,
      clubAddress: formData.get('clubAddress') as string,
      clubDescription: formData.get('clubDescription') as string || '',
      experience: formData.get('experience') as string || '',
      achievements: formData.get('achievements') as string || '', // –ù–æ–≤–µ –ø–æ–ª–µ –¥–ª—è –¥–æ—Å—è–≥–Ω–µ–Ω—å
      legalStatus: formData.get('legalStatus') as string,
      website: formData.get('website') as string || '',
    };

    console.log('üìã –û—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ –∑ —Ñ–æ—Ä–º–∏:', JSON.stringify(clubOwnerData, null, 2));

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
    const requiredFields = [
      'firstName', 'lastName', 'middleName', 'position', 'email', 'phone', 'password', 'region', 'city',
      'clubName', 'clubType', 'zipCode', 'clubRegion', 'clubCity', 'clubAddress', 'legalStatus'
    ];

    console.log('üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤...');
    const missingFields = requiredFields.filter(field => {
      const value = clubOwnerData[field as keyof typeof clubOwnerData];
      const isMissing = !value || value.toString().trim() === '';
      if (isMissing) {
        console.log(`‚ùå –í—ñ–¥—Å—É—Ç–Ω—î –ø–æ–ª–µ: ${field} = "${value}"`);
      }
      return isMissing;
    });

    if (missingFields.length > 0) {
      console.log('‚ùå –í–∞–ª—ñ–¥–∞—Ü—ñ—è –Ω–µ –ø—Ä–æ–π—à–ª–∞. –í—ñ–¥—Å—É—Ç–Ω—ñ –ø–æ–ª—è:', missingFields);
      return NextResponse.json(
        { success: false, error: `–û–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è –Ω–µ –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ: ${missingFields.join(', ')}` },
        {
          status: 400,
          headers: { 'Content-Type': 'application/json' }
        }
      );
    }

    console.log('‚úÖ –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ');

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(clubOwnerData.email)) {
      return NextResponse.json(
        { success: false, error: '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç email –∞–¥—Ä–µ—Å–∏' },
        {
          status: 400,
          headers: { 'Content-Type': 'application/json' }
        }
      );
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É —Ç–µ–ª–µ—Ñ–æ–Ω—É
    const phoneRegex = /^\+380\d{9}$/;
    if (!phoneRegex.test(clubOwnerData.phone)) {
      return NextResponse.json(
        { success: false, error: '–¢–µ–ª–µ—Ñ–æ–Ω –º–∞—î –±—É—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç—ñ +380XXXXXXXXX' },
        {
          status: 400,
          headers: { 'Content-Type': 'application/json' }
        }
      );
    }

    // –û–±—Ä–æ–±–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –ø—Ä–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é
    const registrationDocuments = formData.get('registrationDocuments') as File;
    let documentsFileId = null;

    if (!registrationDocuments) {
      return NextResponse.json(
        { success: false, error: '–î–æ–∫—É–º–µ–Ω—Ç–∏ –ø—Ä–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é —é—Ä–æ—Å–æ–±–∏/–§–û–ü —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º–∏' },
        {
          status: 400,
          headers: { 'Content-Type': 'application/json' }
        }
      );
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∏–ø—É —Ç–∞ —Ä–æ–∑–º—ñ—Ä—É —Ñ–∞–π–ª—É
    const allowedTypes = ['application/pdf', 'image/jpeg', 'image/jpg', 'image/png'];
    if (!allowedTypes.includes(registrationDocuments.type)) {
      return NextResponse.json(
        { success: false, error: '–î–æ–∫—É–º–µ–Ω—Ç–∏ –º–æ–∂—É—Ç—å –±—É—Ç–∏ —Ç—ñ–ª—å–∫–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ PDF, JPG –∞–±–æ PNG' },
        {
          status: 400,
          headers: { 'Content-Type': 'application/json' }
        }
      );
    }

    if (registrationDocuments.size > 2 * 1024 * 1024) { // 2MB
      return NextResponse.json(
        { success: false, error: '–†–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É –Ω–µ –º–æ–∂–µ –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ 2MB' },
        {
          status: 400,
          headers: { 'Content-Type': 'application/json' }
        }
      );
    }

    // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É (—Å–∏–º—É–ª—è—Ü—ñ—è)
    documentsFileId = `docs-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
    const buffer = Buffer.from(await registrationDocuments.arrayBuffer());
    const base64Data = buffer.toString('base64');

    uploadedFiles.set(documentsFileId, {
      name: registrationDocuments.name,
      size: registrationDocuments.size,
      type: registrationDocuments.type,
      data: base64Data
    });

    console.log(`üìÅ –î–æ–∫—É–º–µ–Ω—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: ${registrationDocuments.name}`);

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–≤–∂–∏–Ω–∏ –ø–∞—Ä–æ–ª—è
    if (clubOwnerData.password.length < 6) {
      return NextResponse.json(
        { success: false, error: '–ü–∞—Ä–æ–ª—å –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 6 —Å–∏–º–≤–æ–ª—ñ–≤' },
        { status: 400, headers: { 'Content-Type': 'application/json' } }
      );
    }

    const fullName = `${clubOwnerData.lastName} ${clubOwnerData.firstName}` +
                    (clubOwnerData.middleName ? ` ${clubOwnerData.middleName}` : '');

    try {
      // –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ MySQL –∑ –ø–∞—Ä–æ–ª–µ–º –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      const hashedPassword = await bcrypt.hash(clubOwnerData.password, 10);
      console.log('üîë –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–∞—Ä–æ–ª—å –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–¥–æ–≤–∂–∏–Ω–∞:', clubOwnerData.password.length, ')');
      console.log('üîí –•–µ—à –ø–∞—Ä–æ–ª—è –¥–ª—è –ë–î —Å—Ç–≤–æ—Ä–µ–Ω–æ');
      const userId = `user-${Date.now()}`;

      await executeQuery(`
        INSERT INTO users (
          id, email, password_hash, name, first_name, last_name, middle_name,
          roles, phone, region, city, status, created_at
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, NOW())
      `, [
        userId,
        clubOwnerData.email.toLowerCase(),
        hashedPassword,
        fullName,
        clubOwnerData.firstName,
        clubOwnerData.lastName,
        clubOwnerData.middleName,
        JSON.stringify(['club_owner']),
        clubOwnerData.phone,
        clubOwnerData.region,
        clubOwnerData.city,
        'pending'
      ]);

      const newUser = {
        success: true,
        user: {
          id: userId,
          email: clubOwnerData.email,
          name: fullName
        }
      };
      console.log('‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –≤ MySQL:', newUser.user.email);

      // –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å –∫–µ—Ä—ñ–≤–Ω–∏–∫–∞ –∫–ª—É–±—É/–ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—É
      const clubOwnerRecord = {
        id: `club-owner-${Date.now()}`,
        userId: newUser.success ? newUser.user?.id || "temp-id" : "error",

        // –û—Å–æ–±–∏—Å—Ç—ñ –¥–∞–Ω—ñ
        firstName: clubOwnerData.firstName,
        lastName: clubOwnerData.lastName,
        middleName: clubOwnerData.middleName,
        fullName: fullName,
        position: clubOwnerData.position,
        email: clubOwnerData.email,
        phone: clubOwnerData.phone,
        region: clubOwnerData.region,
        city: clubOwnerData.city,

        // –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–ª—É–±/–ø—ñ–¥—Ä–æ–∑–¥—ñ–ª
        clubName: clubOwnerData.clubName,
        clubType: clubOwnerData.clubType,
        clubTypeText: clubOwnerData.clubType === 'club' ? '–ö–ª—É–±' : '–ü—ñ–¥—Ä–æ–∑–¥—ñ–ª',

        // –ü–æ–≤–Ω–∞ –∞–¥—Ä–µ—Å–∞ –∫–ª—É–±—É/–ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—É
        zipCode: clubOwnerData.zipCode,
        clubRegion: clubOwnerData.clubRegion,
        clubCity: clubOwnerData.clubCity,
        clubAddress: clubOwnerData.clubAddress,
        fullClubAddress: `${clubOwnerData.zipCode}, ${clubOwnerData.clubRegion}, ${clubOwnerData.clubCity}, ${clubOwnerData.clubAddress}`,

        clubDescription: clubOwnerData.clubDescription,
        experience: clubOwnerData.experience,
        achievements: clubOwnerData.achievements, // –î–æ—Å—è–≥–Ω–µ–Ω–Ω—è –∫–ª—É–±—É
        legalStatus: clubOwnerData.legalStatus,
        website: clubOwnerData.website,

        // –î–æ–∫—É–º–µ–Ω—Ç–∏
        registrationDocumentsFileId: documentsFileId,
        registrationDocumentsUrl: `/api/files/${documentsFileId}`,

        // –ú–µ—Ç–∞–¥–∞–Ω—ñ
        role: 'club_owner',
        registrationDate: new Date().toISOString(),
        status: 'pending_approval',
        password: clubOwnerData.password,
        isApproved: false,
        approvalDate: null,
        rejectionReason: null,

        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
      };

      // –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞—è–≤–∫—É –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ, —è–∫–∏–π –æ—á—ñ–∫—É—î –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å
      const clubRequest = {
        id: `request-${Date.now()}`,
        user: {
          id: newUser.success ? newUser.user?.id || "temp-id" : "error",
          name: fullName,
          email: clubOwnerData.email,
          phone: clubOwnerData.phone,
          registeredAt: new Date().toISOString()
        },
        club: {
          name: clubOwnerData.clubName,
          type: clubOwnerData.clubType as 'club' | 'subdivision',
          address: clubOwnerData.clubAddress,
          city: clubOwnerData.clubCity,
          region: clubOwnerData.clubRegion,
          zipCode: clubOwnerData.zipCode,
          description: clubOwnerData.clubDescription,
          experience: clubOwnerData.experience,
          legalStatus: clubOwnerData.legalStatus,
          website: clubOwnerData.website
        },
        status: 'pending' as const,
        submittedAt: new Date().toISOString(),
        documents: [
          {
            name: registrationDocuments.name,
            url: `/api/files/${documentsFileId}`
          }
        ]
      };

      // –†–ï–ê–õ–¨–ù–û –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞—è–≤–∫—É –≤ —Å–∏—Å—Ç–µ–º—ñ
      console.log('üíæ –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞—è–≤–∫—É –≤ —Å–∏—Å—Ç–µ–º—ñ –∑–∞—è–≤–æ–∫...');

      // –î–æ–¥–∞—î–º–æ –∑–∞—è–≤–∫—É –¥–æ MySQL
      await ClubRequestsStorage.add(clubRequest);

      // –î–û–î–ê–¢–ö–û–í–û: –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞—è–≤–∫—É –¥–ª—è demo-–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó
      // (–°–∏–º—É–ª—é—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ localStorage –∑ —Å–µ—Ä–≤–µ—Ä–Ω–æ—ó —Å—Ç–æ—Ä–æ–Ω–∏)
      console.log('üíæ –î–æ–¥–∞—Ç–∫–æ–≤–æ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞—è–≤–∫—É –¥–ª—è –¥–µ–º–æ...');

      try {
        // –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∑–∞—è–≤–∫—É –¥–æ API clubs/requests –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
        const saveResponse = await fetch(new URL('/api/clubs/requests', request.url), {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(clubRequest)
        });

        if (saveResponse.ok) {
          console.log('‚úÖ –ó–∞—è–≤–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∞ –≤ API clubs/requests');
        } else {
          console.log('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ API, –∞–ª–µ –∑–∞—è–≤–∫–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Å—Ö–æ–≤–∏—â—ñ');
        }
      } catch (apiError) {
        console.log('‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –∞–ª–µ –∑–∞—è–≤–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ:', apiError);
      }

      console.log('‚úÖ –ó–∞—è–≤–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞ —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∞, ID:', clubRequest.id);

      console.log('‚úÖ –ö–µ—Ä—ñ–≤–Ω–∏–∫ –∫–ª—É–±—É/–ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—É –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π:', fullName);
      console.log('‚úÖ –ó–∞—è–≤–∫–∞ –¥–æ–¥–∞–Ω–∞ –≤ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è —Ä–æ–∑–≥–ª—è–¥—É');

      // –†–ï–ê–õ–¨–ù–ï –ù–ê–î–°–ò–õ–ê–ù–ù–Ø EMAIL –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
      console.log('üìß –ù–∞–¥—Å–∏–ª–∞—î–º–æ email –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É...');
      try {
        const userEmailResult = await EmailService.sendEmail({
          to: clubOwnerData.email,
          type: 'club_registration',
          data: {
            name: fullName,
            email: clubOwnerData.email,
            clubName: clubOwnerData.clubName,
            clubType: clubOwnerData.clubType,
            registrationDate: new Date().toISOString()
          }
        });

        if (userEmailResult.success) {
          console.log('‚úÖ Email –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
        } else {
          console.log('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è email –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É:', userEmailResult.error);
        }
      } catch (emailError) {
        console.log('‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è email –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É:', emailError);
      }

      // –†–ï–ê–õ–¨–ù–ï –ù–ê–î–°–ò–õ–ê–ù–ù–Ø EMAIL –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
      console.log('üìß –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É...');
      try {
        const adminEmailResult = await EmailService.sendEmail({
          to: 'aerobicsua@gmail.com', // –æ—Å–Ω–æ–≤–Ω–∏–π email –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
          type: 'admin_notification',
          data: {
            clubOwnerName: fullName,
            clubName: clubOwnerData.clubName,
            clubType: clubOwnerData.clubType,
            email: clubOwnerData.email,
            phone: clubOwnerData.phone,
            registrationDate: new Date().toISOString()
          }
        });

        if (adminEmailResult.success) {
          console.log('‚úÖ Email –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
        } else {
          console.log('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è email –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É:', adminEmailResult.error);
        }
      } catch (emailError) {
        console.log('‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è email –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É:', emailError);
      }

      return NextResponse.json({
        success: true,
        message: `–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∫–µ—Ä—ñ–≤–Ω–∏–∫–∞ ${clubOwnerRecord.clubTypeText === '–ö–ª—É–±' ? '–∫–ª—É–±—É' : '–ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—É'} —É—Å–ø—ñ—à–Ω–æ –ø–æ–¥–∞–Ω–∞!`,
        data: {
          clubOwnerId: clubOwnerRecord.id,
          fullName: fullName,
          email: clubOwnerData.email,
          clubName: clubOwnerData.clubName,
          clubType: clubOwnerRecord.clubTypeText,
          status: 'pending_approval',
          password: clubOwnerData.password,
          message: '–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ email –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π —Ç–∞ –æ—á—ñ–∫—É–π—Ç–µ –Ω–∞ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.'
        }
      }, {
        headers: { 'Content-Type': 'application/json' }
      });

    } catch (authError: any) {
      // –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π —Ñ–∞–π–ª –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
      if (documentsFileId) {
        uploadedFiles.delete(documentsFileId);
      }

      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', authError);

      if (authError.message && authError.message.includes('–≤–∂–µ —ñ—Å–Ω—É—î')) {
        return NextResponse.json(
          {
            success: false,
            error: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–æ—é email –∞–¥—Ä–µ—Å–æ—é –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π'
          },
          {
            status: 409,
            headers: { 'Content-Type': 'application/json' }
          }
        );
      }

      return NextResponse.json(
        {
          success: false,
          error: '–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ' + (authError.message || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞')
        },
        {
          status: 500,
          headers: { 'Content-Type': 'application/json' }
        }
      );
    }

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –∫–µ—Ä—ñ–≤–Ω–∏–∫–∞ –∫–ª—É–±—É/–ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—É:', error);

    // –ó–∞–≤–∂–¥–∏ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    return NextResponse.json(
      {
        success: false,
        error: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        details: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'
      },
      {
        status: 500,
        headers: {
          'Content-Type': 'application/json'
        }
      }
    );
  }
}

// API –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤
export async function GET(request: NextRequest) {
  const url = new URL(request.url);
  const fileId = url.searchParams.get('fileId');

  if (!fileId) {
    return NextResponse.json({ error: 'File ID required' }, { status: 400 });
  }

  const file = uploadedFiles.get(fileId);
  if (!file) {
    return NextResponse.json({ error: 'File not found' }, { status: 404 });
  }

  const buffer = Buffer.from(file.data, 'base64');

  return new NextResponse(buffer, {
    headers: {
      'Content-Type': file.type,
      'Content-Length': file.size.toString(),
      'Content-Disposition': `inline; filename="${file.name}"`
    }
  });
}
