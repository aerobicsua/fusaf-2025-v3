import { NextResponse } from 'next/server';
import { getApiSession } from '@/lib/auth';
// authOptions removed
import { AthletesStorage, type MediaItem } from '@/lib/athletes-storage';

// POST - –¥–æ–¥–∞—Ç–∏ —Ñ–æ—Ç–æ/–º–µ–¥—ñ–∞ –¥–æ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞
export async function POST(
  request: Request,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const session = await getApiSession(request);
    const resolvedParams = await params;
    const athleteId = resolvedParams.id;

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó (–∞–¥–º—ñ–Ω –∞–±–æ –≤–ª–∞—Å–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å)
    if (!session) {
      return NextResponse.json(
        { error: '–ù–µ–æ–±—Ö—ñ–¥–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è' },
        { status: 401 }
      );
    }

    const athlete = AthletesStorage.findById(athleteId);
    if (!athlete) {
      return NextResponse.json(
        { error: '–°–ø–æ—Ä—Ç—Å–º–µ–Ω–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' },
        { status: 404 }
      );
    }

    const isAdmin = session.user?.roles?.includes('admin');
    const isOwnProfile = session.user?.email === athlete.email;

    if (!isAdmin && !isOwnProfile) {
      return NextResponse.json(
        { error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é' },
        { status: 403 }
      );
    }

    const body = await request.json();
    const { type, url, title, description, isProfileImage, competitionId, tags } = body;

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è
    if (!type || !url) {
      return NextResponse.json(
        { error: '–û–±–æ–≤\'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è: type, url' },
        { status: 400 }
      );
    }

    if (!['photo', 'video'].includes(type)) {
      return NextResponse.json(
        { error: '–¢–∏–ø –º–µ–¥—ñ–∞ –º–∞—î –±—É—Ç–∏ photo –∞–±–æ video' },
        { status: 400 }
      );
    }

    // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –º–µ–¥—ñ–∞ –æ–±'—î–∫—Ç
    const mediaItem: MediaItem = {
      id: `media-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
      type,
      url,
      title: title || '',
      description: description || '',
      uploadDate: new Date().toISOString(),
      isProfileImage: isProfileImage || false,
      competitionId: competitionId || undefined,
      tags: tags || []
    };

    // –Ø–∫—â–æ —Ü–µ –Ω–æ–≤–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ—ñ–ª—é, —Å–∫–∏–¥–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î
    if (isProfileImage) {
      const existingMedia = athlete.media || [];
      existingMedia.forEach(media => {
        if (media.isProfileImage) {
          media.isProfileImage = false;
        }
      });
    }

    const success = AthletesStorage.addMedia(athleteId, mediaItem);

    if (!success) {
      return NextResponse.json(
        { error: '–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –º–µ–¥—ñ–∞' },
        { status: 500 }
      );
    }

    console.log('üì∏ –î–æ–¥–∞–Ω–æ –º–µ–¥—ñ–∞:', {
      athleteId,
      mediaId: mediaItem.id,
      type: mediaItem.type,
      isProfileImage: mediaItem.isProfileImage
    });

    return NextResponse.json({
      message: '–ú–µ–¥—ñ–∞ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ',
      media: mediaItem
    }, { status: 201 });

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ POST /api/athletes/[id]/photos:', error);
    return NextResponse.json(
      { error: '–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –º–µ–¥—ñ–∞' },
      { status: 500 }
    );
  }
}

// GET - –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –º–µ–¥—ñ–∞ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞
export async function GET(
  request: Request,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const resolvedParams = await params;
    const athleteId = resolvedParams.id;
    const url = new URL(request.url);
    const type = url.searchParams.get('type'); // photo –∞–±–æ video
    const competitionId = url.searchParams.get('competitionId');

    const athlete = AthletesStorage.findById(athleteId);
    if (!athlete) {
      return NextResponse.json(
        { error: '–°–ø–æ—Ä—Ç—Å–º–µ–Ω–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' },
        { status: 404 }
      );
    }

    let media = athlete.media || [];

    // –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –ø–æ —Ç–∏–ø—É
    if (type && ['photo', 'video'].includes(type)) {
      media = media.filter(item => item.type === type);
    }

    // –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –ø–æ –∑–º–∞–≥–∞–Ω–Ω—é
    if (competitionId) {
      media = media.filter(item => item.competitionId === competitionId);
    }

    // –°–æ—Ä—Ç—É—î–º–æ –ø–æ –¥–∞—Ç—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (–Ω–æ–≤—ñ —Å–ø–æ—á–∞—Ç–∫—É)
    media.sort((a, b) => new Date(b.uploadDate).getTime() - new Date(a.uploadDate).getTime());

    return NextResponse.json({
      athleteId,
      media,
      total: media.length,
      profileImage: media.find(item => item.isProfileImage),
      stats: {
        photos: media.filter(item => item.type === 'photo').length,
        videos: media.filter(item => item.type === 'video').length,
        withCompetition: media.filter(item => item.competitionId).length
      }
    });

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ GET /api/athletes/[id]/photos:', error);
    return NextResponse.json(
      { error: '–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–µ–¥—ñ–∞' },
      { status: 500 }
    );
  }
}

// DELETE - –≤–∏–¥–∞–ª–∏—Ç–∏ –º–µ–¥—ñ–∞
export async function DELETE(
  request: Request,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const session = await getApiSession(request);
    const resolvedParams = await params;
    const athleteId = resolvedParams.id;
    const url = new URL(request.url);
    const mediaId = url.searchParams.get('mediaId');

    if (!session) {
      return NextResponse.json(
        { error: '–ù–µ–æ–±—Ö—ñ–¥–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è' },
        { status: 401 }
      );
    }

    if (!mediaId) {
      return NextResponse.json(
        { error: '–ù–µ –≤–∫–∞–∑–∞–Ω–æ ID –º–µ–¥—ñ–∞' },
        { status: 400 }
      );
    }

    const athlete = AthletesStorage.findById(athleteId);
    if (!athlete) {
      return NextResponse.json(
        { error: '–°–ø–æ—Ä—Ç—Å–º–µ–Ω–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' },
        { status: 404 }
      );
    }

    const isAdmin = session.user?.roles?.includes('admin');
    const isOwnProfile = session.user?.email === athlete.email;

    if (!isAdmin && !isOwnProfile) {
      return NextResponse.json(
        { error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é' },
        { status: 403 }
      );
    }

    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ç–∞ –≤–∏–¥–∞–ª—è—î–º–æ –º–µ–¥—ñ–∞
    const mediaIndex = athlete.media.findIndex(item => item.id === mediaId);
    if (mediaIndex === -1) {
      return NextResponse.json(
        { error: '–ú–µ–¥—ñ–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' },
        { status: 404 }
      );
    }

    const removedMedia = athlete.media.splice(mediaIndex, 1)[0];

    // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞
    AthletesStorage.update(athleteId, { media: athlete.media });

    console.log('üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ –º–µ–¥—ñ–∞:', {
      athleteId,
      mediaId,
      type: removedMedia.type
    });

    return NextResponse.json({
      message: '–ú–µ–¥—ñ–∞ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ',
      removedMedia
    });

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ DELETE /api/athletes/[id]/photos:', error);
    return NextResponse.json(
      { error: '–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –º–µ–¥—ñ–∞' },
      { status: 500 }
    );
  }
}
