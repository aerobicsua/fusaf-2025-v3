import { NextRequest, NextResponse } from 'next/server';
import { createPool } from '@/lib/mysql';
import { readFileSync } from 'fs';
import { join } from 'path';

export async function GET() {
  try {
    console.log('üîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MySQL...');

    const pool = createPool();

    // –¢–µ—Å—Ç—É—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
    const connection = await pool.getConnection();
    console.log('‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MySQL —É—Å–ø—ñ—à–Ω–µ');

    // –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –±–∞–∑—É
    const [dbInfo] = await connection.execute('SELECT DATABASE() as current_db, VERSION() as version');
    console.log('üìä –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–∞–∑—É:', dbInfo);

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ—Å–Ω—É—é—á—ñ —Ç–∞–±–ª–∏—Ü—ñ
    const [tables] = await connection.execute('SHOW TABLES');
    console.log('üìã –Ü—Å–Ω—É—é—á—ñ —Ç–∞–±–ª–∏—Ü—ñ:', tables);

    connection.release();

    return NextResponse.json({
      success: true,
      message: '–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MySQL —É—Å–ø—ñ—à–Ω–µ',
      database: dbInfo,
      tables: tables,
      connection: {
        host: process.env.DB_HOST,
        database: process.env.DB_NAME,
        user: process.env.DB_USER
      }
    });

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MySQL:', error);
    return NextResponse.json({
      success: false,
      error: '–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MySQL',
      details: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞',
      connection: {
        host: process.env.DB_HOST,
        database: process.env.DB_NAME,
        user: process.env.DB_USER
      }
    }, { status: 500 });
  }
}

export async function POST(request: NextRequest) {
  try {
    const { action } = await request.json();

    if (action === 'create_tables') {
      return await createTables();
    }

    if (action === 'reset_database') {
      return await resetDatabase();
    }

    return NextResponse.json({
      success: false,
      error: '–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è'
    }, { status: 400 });

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –¥—ñ—ó:', error);
    return NextResponse.json({
      success: false,
      error: '–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –¥—ñ—ó',
      details: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'
    }, { status: 500 });
  }
}

async function createTables() {
  try {
    console.log('üöÄ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å MySQL...');

    const pool = createPool();
    const connection = await pool.getConnection();

    // –ß–∏—Ç–∞—î–º–æ SQL —Å—Ö–µ–º—É
    const schemaPath = join(process.cwd(), 'database', 'mysql-schema.sql');
    const schema = readFileSync(schemaPath, 'utf-8');

    // –†–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ –æ–∫—Ä–µ–º—ñ –∑–∞–ø–∏—Ç–∏
    const statements = schema
      .split(';')
      .map(stmt => stmt.trim())
      .filter(stmt => stmt.length > 0 && !stmt.startsWith('--'));

    console.log(`üìù –í–∏–∫–æ–Ω–∞–Ω–Ω—è ${statements.length} SQL –∑–∞–ø–∏—Ç—ñ–≤...`);

    const results = [];
    for (const statement of statements) {
      try {
        if (statement.includes('CREATE TABLE') || statement.includes('INSERT')) {
          await connection.execute(statement);
          const tableName = statement.match(/CREATE TABLE.*?(\w+)\s*\(/)?.[1] ||
                           statement.match(/INSERT.*?INTO\s+(\w+)/)?.[1] || 'unknown';
          results.push(`‚úÖ ${tableName}`);
          console.log(`‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ: ${tableName}`);
        }
      } catch (error) {
        console.warn(`‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –∑–∞–ø–∏—Ç (–º–æ–∂–ª–∏–≤–æ –≤–∂–µ —ñ—Å–Ω—É—î):`, error);
        results.push(`‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ (–º–æ–∂–ª–∏–≤–æ —ñ—Å–Ω—É—î)`);
      }
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ
    const [tables] = await connection.execute('SHOW TABLES');
    console.log('üìã –°—Ç–≤–æ—Ä–µ–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ:', tables);

    connection.release();

    return NextResponse.json({
      success: true,
      message: '–¢–∞–±–ª–∏—Ü—ñ MySQL —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω—ñ',
      results: results,
      tables: tables
    });

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å:', error);
    return NextResponse.json({
      success: false,
      error: '–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å',
      details: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'
    }, { status: 500 });
  }
}

async function resetDatabase() {
  try {
    console.log('üîÑ –°–∫–∏–¥–∞–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...');

    const pool = createPool();
    const connection = await pool.getConnection();

    // –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü—å
    const [tables] = await connection.execute('SHOW TABLES') as any[];

    if (tables.length > 0) {
      // –í—ñ–¥–∫–ª—é—á–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É foreign keys
      await connection.execute('SET FOREIGN_KEY_CHECKS = 0');

      // –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ —Ç–∞–±–ª–∏—Ü—ñ
      for (const table of tables) {
        const tableName = Object.values(table)[0];
        await connection.execute(`DROP TABLE IF EXISTS ${tableName}`);
        console.log(`üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ —Ç–∞–±–ª–∏—Ü—é: ${tableName}`);
      }

      // –í–∫–ª—é—á–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É foreign keys
      await connection.execute('SET FOREIGN_KEY_CHECKS = 1');
    }

    connection.release();

    return NextResponse.json({
      success: true,
      message: `–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —Å–∫–∏–Ω—É—Ç–∞. –í–∏–¥–∞–ª–µ–Ω–æ ${tables.length} —Ç–∞–±–ª–∏—Ü—å`,
      deletedTables: tables.length
    });

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∫–∏–¥–∞–Ω–Ω—è –±–∞–∑–∏:', error);
    return NextResponse.json({
      success: false,
      error: '–ü–æ–º–∏–ª–∫–∞ —Å–∫–∏–¥–∞–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö',
      details: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'
    }, { status: 500 });
  }
}
