import { NextRequest, NextResponse } from 'next/server';
import { executeQuery, testConnection } from '@/lib/mysql';

export async function POST(request: NextRequest) {
  try {
    console.log('üîß –ü–æ—á–∞—Ç–æ–∫ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è MySQL –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...');

    // –°–ø–æ—á–∞—Ç–∫—É —Ç–µ—Å—Ç—É—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è
    const isConnected = await testConnection();
    if (!isConnected) {
      return NextResponse.json({
        success: false,
        error: '–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ MySQL'
      }, { status: 500 });
    }

    // SQL –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å
    const sqlCommands = [
      // –¢–∞–±–ª–∏—Ü—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
      `CREATE TABLE IF NOT EXISTS users (
        id VARCHAR(36) PRIMARY KEY,
        email VARCHAR(255) UNIQUE NOT NULL,
        password_hash VARCHAR(255) NOT NULL,
        name VARCHAR(255) NOT NULL,
        roles JSON NOT NULL,

        first_name VARCHAR(100),
        last_name VARCHAR(100),
        middle_name VARCHAR(100),
        date_of_birth DATE,
        gender ENUM('male', 'female'),
        phone VARCHAR(20),

        country VARCHAR(100) DEFAULT '–£–∫—Ä–∞—ó–Ω–∞',
        region VARCHAR(100),
        city VARCHAR(100),
        address VARCHAR(255),
        zip_code VARCHAR(10),

        club VARCHAR(255),
        coach VARCHAR(255),
        sport_category VARCHAR(100),
        experience TEXT,
        specialization VARCHAR(255),
        license VARCHAR(100),
        license_level VARCHAR(50),

        bio TEXT,
        website VARCHAR(255),
        social_media JSON,
        achievements TEXT,
        interests JSON,
        languages JSON,

        is_public_profile BOOLEAN DEFAULT FALSE,
        show_email BOOLEAN DEFAULT FALSE,
        show_phone BOOLEAN DEFAULT FALSE,
        email_notifications BOOLEAN DEFAULT TRUE,

        avatar TEXT,
        documents JSON,

        email_verified BOOLEAN DEFAULT FALSE,
        membership_paid BOOLEAN DEFAULT FALSE,
        membership_expiry_date DATE,
        status ENUM('active', 'inactive', 'suspended', 'pending') DEFAULT 'pending',

        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        last_login TIMESTAMP NULL,

        INDEX idx_email (email),
        INDEX idx_status (status),
        INDEX idx_region (region),
        INDEX idx_club (club)
      )`,

      // –¢–∞–±–ª–∏—Ü—è –∫–ª—É–±—ñ–≤
      `CREATE TABLE IF NOT EXISTS clubs (
        id VARCHAR(36) PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        full_name VARCHAR(500),
        description TEXT,

        address VARCHAR(500),
        city VARCHAR(100),
        region VARCHAR(100),
        country VARCHAR(100) DEFAULT '–£–∫—Ä–∞—ó–Ω–∞',

        phone VARCHAR(20),
        email VARCHAR(255),
        website VARCHAR(255),

        legal_status VARCHAR(100),
        registration_number VARCHAR(100),
        founding_date DATE,

        members_count INT DEFAULT 0,
        coaches_count INT DEFAULT 0,
        achievements_count INT DEFAULT 0,

        owner_id VARCHAR(36),

        status ENUM('active', 'inactive', 'pending') DEFAULT 'pending',
        membership_paid BOOLEAN DEFAULT FALSE,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

        INDEX idx_region (region),
        INDEX idx_status (status),
        INDEX idx_owner (owner_id)
      )`,

      // –¢–∞–±–ª–∏—Ü—è –∑–º–∞–≥–∞–Ω—å
      `CREATE TABLE IF NOT EXISTS competitions (
        id VARCHAR(36) PRIMARY KEY,
        title VARCHAR(255) NOT NULL,
        description TEXT,

        date DATE NOT NULL,
        time TIME,
        registration_deadline DATE,

        location VARCHAR(255) NOT NULL,
        address VARCHAR(500),
        city VARCHAR(100),
        region VARCHAR(100),

        organizing_club VARCHAR(255),
        organizer_id VARCHAR(36),

        contact_person JSON,
        program_fees JSON,
        payment_details JSON,
        max_participants_by_program JSON,
        categories JSON,
        rules TEXT,
        equipment_requirements TEXT,

        accommodation JSON,
        meals JSON,
        transportation JSON,

        medical_requirements TEXT,
        insurance_required BOOLEAN DEFAULT TRUE,

        notes TEXT,
        website VARCHAR(255),

        status ENUM('draft', 'published', 'registration_open', 'registration_closed', 'in_progress', 'completed', 'cancelled') DEFAULT 'draft',

        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

        INDEX idx_date (date),
        INDEX idx_status (status),
        INDEX idx_region (region),
        INDEX idx_organizer (organizer_id)
      )`,

      // –¢–∞–±–ª–∏—Ü—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ–π
      `CREATE TABLE IF NOT EXISTS registrations (
        id VARCHAR(36) PRIMARY KEY,
        competition_id VARCHAR(36) NOT NULL,
        participant_id VARCHAR(36),

        registration_type ENUM('preliminary', 'individual') NOT NULL,

        program VARCHAR(100),
        category VARCHAR(100),
        participants_data JSON,

        club_name VARCHAR(255),
        coach_name VARCHAR(255),
        coach_phone VARCHAR(20),

        registration_fee DECIMAL(10,2) DEFAULT 0,
        entry_fee DECIMAL(10,2) DEFAULT 0,
        total_fee DECIMAL(10,2) DEFAULT 0,
        payment_status ENUM('pending', 'paid', 'cancelled') DEFAULT 'pending',
        payment_date TIMESTAMP NULL,

        notes TEXT,

        status ENUM('pending', 'confirmed', 'cancelled') DEFAULT 'pending',

        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

        INDEX idx_competition (competition_id),
        INDEX idx_participant (participant_id),
        INDEX idx_status (status),
        INDEX idx_payment_status (payment_status)
      )`,

      // –¢–∞–±–ª–∏—Ü—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
      `CREATE TABLE IF NOT EXISTS competition_results (
        id VARCHAR(36) PRIMARY KEY,
        competition_id VARCHAR(36) NOT NULL,
        participant_id VARCHAR(36),
        registration_id VARCHAR(36),

        program VARCHAR(100) NOT NULL,
        category VARCHAR(100) NOT NULL,

        rank_position INT,
        total_score DECIMAL(6,3),
        technical_score DECIMAL(6,3),
        artistic_score DECIMAL(6,3),
        execution_score DECIMAL(6,3),
        difficulty_score DECIMAL(6,3),

        routine_description TEXT,
        judges_scores JSON,
        deductions JSON,

        medal ENUM('gold', 'silver', 'bronze') NULL,
        award VARCHAR(255),

        performance_date DATE,
        notes TEXT,

        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

        INDEX idx_competition (competition_id),
        INDEX idx_participant (participant_id),
        INDEX idx_program_category (program, category),
        INDEX idx_rank (rank_position)
      )`,

      // –ü–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ - –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä
      `INSERT IGNORE INTO users (
        id, email, password_hash, name, roles,
        first_name, last_name, middle_name,
        country, region, city,
        status, email_verified, membership_paid,
        created_at
      ) VALUES (
        '1',
        'andfedos@gmail.com',
        '$2a$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi',
        '–§–µ–¥–æ—Å–µ–Ω–∫–æ –ê–Ω–¥—Ä—ñ–π',
        '["admin", "user"]',
        '–ê–Ω–¥—Ä—ñ–π', '–§–µ–¥–æ—Å–µ–Ω–∫–æ', '–í–∞—Å–∏–ª—å–æ–≤–∏—á',
        '–£–∫—Ä–∞—ó–Ω–∞', '–º. –ö–∏—ó–≤', '–ö–∏—ó–≤',
        'active', TRUE, TRUE,
        NOW()
      )`,

      // –ü–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ - –¥–µ–º–æ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω
      `INSERT IGNORE INTO users (
        id, email, password_hash, name, roles,
        first_name, last_name, middle_name,
        date_of_birth, gender,
        country, region, city,
        sport_category, experience,
        status, email_verified, membership_paid,
        created_at
      ) VALUES (
        '2',
        'afedos@ukr.net',
        '$2a$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi',
        '–§–µ–¥–æ—Å–µ–Ω–∫–æ –ú–∞—Ä—ñ—è',
        '["athlete", "user"]',
        '–ú–∞—Ä—ñ—è', '–§–µ–¥–æ—Å–µ–Ω–∫–æ', '–ê–Ω–¥—Ä—ñ—ó–≤–Ω–∞',
        '2011-10-19', 'female',
        '–£–∫—Ä–∞—ó–Ω–∞', '–º. –ö–∏—ó–≤', '–ö–∏—ó–≤',
        '—é–Ω–∏–π —Å–ø–æ—Ä—Ç—Å–º–µ–Ω', '2 —Ä–æ–∫–∏',
        'active', TRUE, TRUE,
        NOW()
      )`
    ];

    console.log(`üìä –í–∏–∫–æ–Ω—É—î–º–æ ${sqlCommands.length} SQL –∫–æ–º–∞–Ω–¥`);

    const results = [];
    let successCount = 0;
    let errorCount = 0;

    // –í–∏–∫–æ–Ω—É—î–º–æ –∫–æ–∂–Ω—É SQL –∫–æ–º–∞–Ω–¥—É
    for (let i = 0; i < sqlCommands.length; i++) {
      const command = sqlCommands[i];

      try {
        console.log(`‚ö° –í–∏–∫–æ–Ω—É—î–º–æ –∫–æ–º–∞–Ω–¥—É ${i + 1}/${sqlCommands.length}`);

        await executeQuery(command);

        results.push({
          command: i + 1,
          status: 'success',
          description: i < 5 ? `–¢–∞–±–ª–∏—Ü—è ${i + 1}` : `–ü–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ ${i - 4}`
        });

        successCount++;

      } catch (error) {
        console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—ñ ${i + 1}:`, error);

        results.push({
          command: i + 1,
          status: 'error',
          description: i < 5 ? `–¢–∞–±–ª–∏—Ü—è ${i + 1}` : `–ü–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ ${i - 4}`,
          error: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'
        });

        errorCount++;
      }
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ
    const tables = await executeQuery(`
      SELECT TABLE_NAME as name, TABLE_ROWS as rows
      FROM information_schema.TABLES
      WHERE TABLE_SCHEMA = ?
      ORDER BY TABLE_NAME
    `, [process.env.MYSQL_DATABASE]);

    console.log('‚úÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è MySQL –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log(`üìä –£—Å–ø—ñ—à–Ω–æ: ${successCount}, –ü–æ–º–∏–ª–æ–∫: ${errorCount}`);
    console.log(`üóÇÔ∏è –°—Ç–≤–æ—Ä–µ–Ω–æ —Ç–∞–±–ª–∏—Ü—å: ${tables.length}`);

    return NextResponse.json({
      success: true,
      message: '‚úÖ MySQL –±–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!',
      statistics: {
        totalCommands: sqlCommands.length,
        successCount,
        errorCount,
        tablesCreated: tables.length
      },
      tables: tables,
      results: results,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è MySQL:', error);

    return NextResponse.json({
      success: false,
      error: '–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è MySQL',
      details: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞',
      timestamp: new Date().toISOString()
    }, { status: 500 });
  }
}

export async function GET(request: NextRequest) {
  try {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ—Å–Ω—É—é—á—ñ —Ç–∞–±–ª–∏—Ü—ñ
    const tables = await executeQuery(`
      SELECT
        TABLE_NAME as name,
        TABLE_ROWS as rows,
        CREATE_TIME as created,
        UPDATE_TIME as updated
      FROM information_schema.TABLES
      WHERE TABLE_SCHEMA = ?
      ORDER BY TABLE_NAME
    `, [process.env.MYSQL_DATABASE]);

    return NextResponse.json({
      success: true,
      database: process.env.MYSQL_DATABASE,
      tablesCount: tables.length,
      tables: tables,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—å:', error);

    return NextResponse.json({
      success: false,
      error: '–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—å',
      details: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'
    }, { status: 500 });
  }
}
