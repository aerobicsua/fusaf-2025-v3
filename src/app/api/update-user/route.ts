import { NextRequest, NextResponse } from 'next/server';
import { executeQuery } from '@/lib/mysql';

export async function POST(request: NextRequest) {
  try {
    const { email, updates } = await request.json();

    if (!email || !updates) {
      return NextResponse.json({
        success: false,
        error: 'Email —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ'
      }, { status: 400 });
    }

    console.log(`üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${email}`);
    console.log(`üìù –û–Ω–æ–≤–ª–µ–Ω–Ω—è:`, updates);

    // –ë—É–¥—É—î–º–æ –¥–∏–Ω–∞–º—ñ—á–Ω–∏–π –∑–∞–ø–∏—Ç
    const updateFields = [];
    const values = [];

    if (updates.date_of_birth !== undefined) {
      updateFields.push('date_of_birth = ?');
      values.push(updates.date_of_birth);
    }

    if (updates.gender !== undefined) {
      updateFields.push('gender = ?');
      values.push(updates.gender);
    }

    if (updates.first_name !== undefined) {
      updateFields.push('first_name = ?');
      values.push(updates.first_name);
    }

    if (updates.last_name !== undefined) {
      updateFields.push('last_name = ?');
      values.push(updates.last_name);
    }

    if (updates.middle_name !== undefined) {
      updateFields.push('middle_name = ?');
      values.push(updates.middle_name);
    }

    if (updateFields.length === 0) {
      return NextResponse.json({
        success: false,
        error: '–ù–µ–º–∞—î –ø–æ–ª—ñ–≤ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è'
      }, { status: 400 });
    }

    // –î–æ–¥–∞—î–º–æ email –¥–ª—è WHERE
    values.push(email);

    // –í–∏–∫–æ–Ω—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    await executeQuery(`
      UPDATE users
      SET ${updateFields.join(', ')}, updated_at = NOW()
      WHERE email = ?
    `, values);

    console.log(`‚úÖ –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${email} –æ–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ`);

    return NextResponse.json({
      success: true,
      message: '–î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ–Ω–æ–≤–ª–µ–Ω–æ',
      updatedFields: Object.keys(updates)
    });

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', error);
    return NextResponse.json({
      success: false,
      error: '–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞',
      details: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'
    }, { status: 500 });
  }
}
