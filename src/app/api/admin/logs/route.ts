import { NextRequest, NextResponse } from 'next/server';
import { executeQuery } from '@/lib/mysql';
import { v4 as uuidv4 } from 'uuid';

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async function checkAdminPermissions(request: NextRequest) {
  // TODO: –í —Ä–µ–∞–ª—å–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—ñ —Ç—É—Ç –±—É–ª–∞ –± –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ JWT —Ç–æ–∫–µ–Ω–∞
  return true;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥—ñ–π –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
export async function logAdminAction(
  adminId: string,
  adminEmail: string,
  action: string,
  targetType: string,
  targetId: string,
  details: any = {},
  ipAddress?: string,
  userAgent?: string
) {
  try {
    const logId = uuidv4();

    await executeQuery(`
      INSERT INTO admin_logs (
        id, admin_id, admin_email, action, target_type, target_id,
        details, ip_address, user_agent, created_at
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, NOW())
    `, [
      logId,
      adminId,
      adminEmail,
      action,
      targetType,
      targetId,
      JSON.stringify(details),
      ipAddress || 'unknown',
      userAgent || 'unknown'
    ]);

    console.log(`üìù Admin action logged: ${action} by ${adminEmail}`);
    return true;
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥—ñ—ó –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error);
    return false;
  }
}

// GET - –æ—Ç—Ä–∏–º–∞—Ç–∏ –ª–æ–≥–∏ –¥—ñ–π –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤
export async function GET(request: NextRequest) {
  try {
    if (!(await checkAdminPermissions(request))) {
      return NextResponse.json({
        success: false,
        error: '–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ. –ü–æ—Ç—Ä—ñ–±–Ω—ñ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.'
      }, { status: 403 });
    }

    const url = new URL(request.url);

    // –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
    const adminEmail = url.searchParams.get('admin_email');
    const action = url.searchParams.get('action');
    const targetType = url.searchParams.get('target_type');
    const dateFrom = url.searchParams.get('date_from');
    const dateTo = url.searchParams.get('date_to');
    const page = parseInt(url.searchParams.get('page') || '1');
    const limit = parseInt(url.searchParams.get('limit') || '100');
    const offset = (page - 1) * limit;

    console.log('üìù Admin GET /api/admin/logs –∑ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏:', {
      adminEmail, action, targetType, dateFrom, dateTo, page, limit
    });

    // –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä–∏–º–æ —Ç–∞–±–ª–∏—Ü—é, —è–∫—â–æ –≤–æ–Ω–∞ –Ω–µ —ñ—Å–Ω—É—î
    await executeQuery(`
      CREATE TABLE IF NOT EXISTS admin_logs (
        id VARCHAR(36) PRIMARY KEY,
        admin_id VARCHAR(36) NOT NULL,
        admin_email VARCHAR(255) NOT NULL,
        action VARCHAR(100) NOT NULL,
        target_type VARCHAR(50) NOT NULL,
        target_id VARCHAR(36),
        details JSON,
        ip_address VARCHAR(45),
        user_agent TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

        INDEX idx_admin_email (admin_email),
        INDEX idx_action (action),
        INDEX idx_target_type (target_type),
        INDEX idx_created_at (created_at)
      )
    `);

    // –ë–∞–∑–æ–≤–∏–π –∑–∞–ø–∏—Ç –¥–ª—è –ª–æ–≥—ñ–≤
    let query = `
      SELECT
        id, admin_id, admin_email, action, target_type, target_id,
        details, ip_address, user_agent, created_at
      FROM admin_logs
      WHERE 1=1
    `;

    let countQuery = `SELECT COUNT(*) as total FROM admin_logs WHERE 1=1`;
    const queryParams: any[] = [];
    const countParams: any[] = [];

    // –î–æ–¥–∞—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∏
    if (adminEmail) {
      query += ` AND admin_email LIKE ?`;
      countQuery += ` AND admin_email LIKE ?`;
      queryParams.push(`%${adminEmail}%`);
      countParams.push(`%${adminEmail}%`);
    }

    if (action) {
      query += ` AND action = ?`;
      countQuery += ` AND action = ?`;
      queryParams.push(action);
      countParams.push(action);
    }

    if (targetType) {
      query += ` AND target_type = ?`;
      countQuery += ` AND target_type = ?`;
      queryParams.push(targetType);
      countParams.push(targetType);
    }

    if (dateFrom) {
      query += ` AND DATE(created_at) >= ?`;
      countQuery += ` AND DATE(created_at) >= ?`;
      queryParams.push(dateFrom);
      countParams.push(dateFrom);
    }

    if (dateTo) {
      query += ` AND DATE(created_at) <= ?`;
      countQuery += ` AND DATE(created_at) <= ?`;
      queryParams.push(dateTo);
      countParams.push(dateTo);
    }

    // –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—è
    query += ` ORDER BY created_at DESC LIMIT ? OFFSET ?`;
    queryParams.push(limit, offset);

    console.log('üìä –í–∏–∫–æ–Ω—É—î–º–æ MySQL –∑–∞–ø–∏—Ç –¥–ª—è –ª–æ–≥—ñ–≤');

    // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç–∏
    const [logs, countResult] = await Promise.all([
      executeQuery<any>(query, queryParams),
      executeQuery<any>(countQuery, countParams)
    ]);

    const total = countResult[0]?.total || 0;

    console.log(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ ${logs.length} –ª–æ–≥—ñ–≤ –∑ ${total} –∑–∞–≥–∞–ª–æ–º`);

    // –û–±—Ä–æ–±–ª—è—î–º–æ –¥–∞–Ω—ñ –ª–æ–≥—ñ–≤
    const processedLogs = logs.map(log => {
      let details = {};
      try {
        details = typeof log.details === 'string' ? JSON.parse(log.details) : log.details || {};
      } catch (e) {
        details = {};
      }

      return {
        id: log.id,
        adminId: log.admin_id,
        adminEmail: log.admin_email,
        action: log.action,
        targetType: log.target_type,
        targetId: log.target_id,
        details: details,
        ipAddress: log.ip_address,
        userAgent: log.user_agent,
        createdAt: log.created_at
      };
    });

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–æ–≥—ñ–≤
    const stats = await executeQuery<any>(`
      SELECT
        COUNT(*) as total,
        COUNT(DISTINCT admin_email) as unique_admins,
        COUNT(CASE WHEN action LIKE '%CREATE%' THEN 1 END) as creates,
        COUNT(CASE WHEN action LIKE '%UPDATE%' THEN 1 END) as updates,
        COUNT(CASE WHEN action LIKE '%DELETE%' THEN 1 END) as deletes,
        COUNT(CASE WHEN DATE(created_at) = CURDATE() THEN 1 END) as today
      FROM admin_logs
    `);

    const actionStats = await executeQuery<any>(`
      SELECT action, COUNT(*) as count
      FROM admin_logs
      GROUP BY action
      ORDER BY count DESC
      LIMIT 10
    `);

    const adminStats = await executeQuery<any>(`
      SELECT admin_email, COUNT(*) as count
      FROM admin_logs
      GROUP BY admin_email
      ORDER BY count DESC
      LIMIT 10
    `);

    return NextResponse.json({
      success: true,
      logs: processedLogs,
      pagination: {
        page,
        limit,
        total,
        totalPages: Math.ceil(total / limit)
      },
      statistics: {
        ...stats[0],
        byAction: actionStats.reduce((acc: any, item) => {
          acc[item.action] = item.count;
          return acc;
        }, {}),
        byAdmin: adminStats.reduce((acc: any, item) => {
          acc[item.admin_email] = item.count;
          return acc;
        }, {})
      },
      filters: { adminEmail, action, targetType, dateFrom, dateTo }
    });

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ Admin GET /api/admin/logs:', error);

    return NextResponse.json({
      success: false,
      error: '–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ª–æ–≥—ñ–≤',
      details: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'
    }, { status: 500 });
  }
}

// POST - –∑–∞–ø–∏—Å–∞—Ç–∏ –ª–æ–≥ –¥—ñ—ó –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
export async function POST(request: NextRequest) {
  try {
    if (!(await checkAdminPermissions(request))) {
      return NextResponse.json({
        success: false,
        error: '–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ'
      }, { status: 403 });
    }

    const {
      adminId,
      adminEmail,
      action,
      targetType,
      targetId,
      details = {}
    } = await request.json();

    console.log('üìù Admin POST /api/admin/logs - –∑–∞–ø–∏—Å –ª–æ–≥—É:', action);

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
    if (!adminId || !adminEmail || !action || !targetType) {
      return NextResponse.json({
        success: false,
        error: 'adminId, adminEmail, action —Ç–∞ targetType –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ'
      }, { status: 400 });
    }

    // –û—Ç—Ä–∏–º—É—î–º–æ IP —Ç–∞ User-Agent –∑ –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤
    const ipAddress = request.headers.get('x-forwarded-for') ||
                     request.headers.get('x-real-ip') ||
                     'unknown';
    const userAgent = request.headers.get('user-agent') || 'unknown';

    // –ó–∞–ø–∏—Å—É—î–º–æ –ª–æ–≥
    const success = await logAdminAction(
      adminId,
      adminEmail,
      action,
      targetType,
      targetId,
      details,
      ipAddress,
      userAgent
    );

    if (success) {
      return NextResponse.json({
        success: true,
        message: '–õ–æ–≥ —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ'
      });
    } else {
      return NextResponse.json({
        success: false,
        error: '–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É –ª–æ–≥—É'
      }, { status: 500 });
    }

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ Admin POST /api/admin/logs:', error);

    return NextResponse.json({
      success: false,
      error: '–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É –ª–æ–≥—É',
      details: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'
    }, { status: 500 });
  }
}

// DELETE - –æ—á–∏—Å—Ç–∏—Ç–∏ —Å—Ç–∞—Ä—ñ –ª–æ–≥–∏ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
export async function DELETE(request: NextRequest) {
  try {
    if (!(await checkAdminPermissions(request))) {
      return NextResponse.json({
        success: false,
        error: '–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ'
      }, { status: 403 });
    }

    const { days = 90 } = await request.json();

    console.log(`üóëÔ∏è Admin DELETE /api/admin/logs - –æ—á–∏—Å—Ç–∫–∞ –ª–æ–≥—ñ–≤ —Å—Ç–∞—Ä—à–µ ${days} –¥–Ω—ñ–≤`);

    // –í–∏–¥–∞–ª—è—î–º–æ –ª–æ–≥–∏ —Å—Ç–∞—Ä—à–µ –≤–∫–∞–∑–∞–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –¥–Ω—ñ–≤
    const result = await executeQuery(`
      DELETE FROM admin_logs
      WHERE created_at < DATE_SUB(NOW(), INTERVAL ? DAY)
    `, [days]);

    console.log('‚úÖ –°—Ç–∞—Ä—ñ –ª–æ–≥–∏ –æ—á–∏—â–µ–Ω–æ');

    return NextResponse.json({
      success: true,
      message: `–õ–æ–≥–∏ —Å—Ç–∞—Ä—à–µ ${days} –¥–Ω—ñ–≤ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ`,
      deletedCount: (result as any).affectedRows || 0
    });

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥—ñ–≤:', error);

    return NextResponse.json({
      success: false,
      error: '–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥—ñ–≤',
      details: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'
    }, { status: 500 });
  }
}
