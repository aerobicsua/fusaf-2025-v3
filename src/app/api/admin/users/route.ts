import { NextRequest, NextResponse } from 'next/server';
import { executeQuery } from '@/lib/mysql';

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async function checkAdminPermissions(request: NextRequest) {
  // TODO: –í —Ä–µ–∞–ª—å–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—ñ —Ç—É—Ç –±—É–ª–∞ –± –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ JWT —Ç–æ–∫–µ–Ω–∞
  // –ü–æ–∫–∏ —â–æ —Ä–æ–±–∏–º–æ –∑–∞–≥–ª—É—à–∫—É, –≤ production –¥–æ–¥–∞—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —Ç–æ–∫–µ–Ω–∞
  return true;
}

// GET - –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
export async function GET(request: NextRequest) {
  try {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø—É
    if (!(await checkAdminPermissions(request))) {
      return NextResponse.json({
        success: false,
        error: '–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ. –ü–æ—Ç—Ä—ñ–±–Ω—ñ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.'
      }, { status: 403 });
    }

    const url = new URL(request.url);

    // –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
    const status = url.searchParams.get('status');
    const role = url.searchParams.get('role');
    const region = url.searchParams.get('region');
    const search = url.searchParams.get('search');
    const page = parseInt(url.searchParams.get('page') || '1');
    const limit = parseInt(url.searchParams.get('limit') || '50');
    const offset = (page - 1) * limit;

    console.log('üë®‚Äçüíº Admin GET /api/admin/users –∑ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏:', {
      status, role, region, search, page, limit
    });

    // –ë–∞–∑–æ–≤–∏–π –∑–∞–ø–∏—Ç
    let query = `
      SELECT
        id, email, name,
        first_name, last_name, middle_name,
        date_of_birth, gender, phone,
        country, region, city, address, zip_code,
        club, coach, sport_category, experience,
        roles, status, email_verified, membership_paid,
        created_at, updated_at, last_login
      FROM users
      WHERE 1=1
    `;

    let countQuery = `SELECT COUNT(*) as total FROM users WHERE 1=1`;
    const queryParams: any[] = [];
    const countParams: any[] = [];

    // –î–æ–¥–∞—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∏
    if (status) {
      query += ` AND status = ?`;
      countQuery += ` AND status = ?`;
      queryParams.push(status);
      countParams.push(status);
    }

    if (role) {
      query += ` AND JSON_CONTAINS(roles, ?)`;
      countQuery += ` AND JSON_CONTAINS(roles, ?)`;
      queryParams.push(`"${role}"`);
      countParams.push(`"${role}"`);
    }

    if (region) {
      query += ` AND region LIKE ?`;
      countQuery += ` AND region LIKE ?`;
      queryParams.push(`%${region}%`);
      countParams.push(`%${region}%`);
    }

    if (search) {
      query += ` AND (name LIKE ? OR email LIKE ? OR first_name LIKE ? OR last_name LIKE ?)`;
      countQuery += ` AND (name LIKE ? OR email LIKE ? OR first_name LIKE ? OR last_name LIKE ?)`;
      const searchPattern = `%${search}%`;
      queryParams.push(searchPattern, searchPattern, searchPattern, searchPattern);
      countParams.push(searchPattern, searchPattern, searchPattern, searchPattern);
    }

    // –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—è
    query += ` ORDER BY created_at DESC LIMIT ? OFFSET ?`;
    queryParams.push(limit, offset);

    console.log('üìä –í–∏–∫–æ–Ω—É—î–º–æ MySQL –∑–∞–ø–∏—Ç:', query);

    // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç–∏
    const [users, countResult] = await Promise.all([
      executeQuery<any>(query, queryParams),
      executeQuery<any>(countQuery, countParams)
    ]);

    const total = countResult[0]?.total || 0;

    console.log(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ ${users.length} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ ${total} –∑–∞–≥–∞–ª–æ–º`);

    // –û–±—Ä–æ–±–ª—è—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    const processedUsers = users.map(user => {
      // –ü–∞—Ä—Å–∏–º–æ —Ä–æ–ª—ñ
      let roles = [];
      try {
        if (typeof user.roles === 'string') {
          roles = JSON.parse(user.roles);
        } else if (Array.isArray(user.roles)) {
          roles = user.roles;
        }
      } catch (e) {
        roles = ['user'];
      }

      return {
        id: user.id,
        email: user.email,
        name: user.name,
        firstName: user.first_name || '',
        lastName: user.last_name || '',
        middleName: user.middle_name || '',
        dateOfBirth: user.date_of_birth,
        gender: user.gender,
        phone: user.phone,

        country: user.country,
        region: user.region,
        city: user.city,
        address: user.address,
        zipCode: user.zip_code,

        club: user.club,
        coach: user.coach,
        sportCategory: user.sport_category,
        experience: user.experience,

        roles: roles,
        status: user.status,
        emailVerified: user.email_verified,
        membershipPaid: user.membership_paid,

        createdAt: user.created_at,
        updatedAt: user.updated_at,
        lastLogin: user.last_login
      };
    });

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const stats = await executeQuery<any>(`
      SELECT
        COUNT(*) as total,
        COUNT(CASE WHEN status = 'active' THEN 1 END) as active,
        COUNT(CASE WHEN status = 'pending' THEN 1 END) as pending,
        COUNT(CASE WHEN status = 'suspended' THEN 1 END) as suspended,
        COUNT(CASE WHEN JSON_CONTAINS(roles, '"athlete"') THEN 1 END) as athletes,
        COUNT(CASE WHEN JSON_CONTAINS(roles, '"admin"') THEN 1 END) as admins,
        COUNT(CASE WHEN JSON_CONTAINS(roles, '"coach_judge"') THEN 1 END) as coaches
      FROM users
    `);

    return NextResponse.json({
      success: true,
      users: processedUsers,
      pagination: {
        page,
        limit,
        total,
        totalPages: Math.ceil(total / limit)
      },
      statistics: stats[0] || {},
      filters: { status, role, region, search },
      debug: {
        storageType: 'MYSQL_ADMIN',
        timestamp: new Date().toISOString()
      }
    });

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ Admin GET /api/admin/users:', error);

    return NextResponse.json({
      success: false,
      error: '–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤',
      details: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'
    }, { status: 500 });
  }
}

// PUT - –æ–Ω–æ–≤–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
export async function PUT(request: NextRequest) {
  try {
    if (!(await checkAdminPermissions(request))) {
      return NextResponse.json({
        success: false,
        error: '–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ'
      }, { status: 403 });
    }

    const { userId, updates } = await request.json();

    if (!userId) {
      return NextResponse.json({
        success: false,
        error: 'ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π'
      }, { status: 400 });
    }

    console.log('üë®‚Äçüíº Admin PUT /api/admin/users –¥–ª—è:', userId);

    // –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω—å
    const updateFields = [];
    const updateValues = [];

    // –î–æ–∑–≤–æ–ª–µ–Ω—ñ –ø–æ–ª—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    const allowedFields = [
      'name', 'first_name', 'last_name', 'middle_name',
      'date_of_birth', 'gender', 'phone',
      'country', 'region', 'city', 'address', 'zip_code',
      'club', 'coach', 'sport_category', 'experience',
      'status', 'email_verified', 'membership_paid'
    ];

    for (const field of allowedFields) {
      if (updates[field] !== undefined) {
        updateFields.push(`${field} = ?`);
        updateValues.push(updates[field]);
      }
    }

    // –†–æ–ª—ñ (JSON –ø–æ–ª–µ)
    if (updates.roles !== undefined) {
      updateFields.push('roles = ?');
      updateValues.push(JSON.stringify(updates.roles));
    }

    if (updateFields.length === 0) {
      return NextResponse.json({
        success: false,
        error: '–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è'
      }, { status: 400 });
    }

    // –î–æ–¥–∞—î–º–æ updated_at
    updateFields.push('updated_at = NOW()');
    updateValues.push(userId);

    const updateQuery = `
      UPDATE users
      SET ${updateFields.join(', ')}
      WHERE id = ?
    `;

    await executeQuery(updateQuery, updateValues);

    console.log('‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ–Ω–æ–≤–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º');

    return NextResponse.json({
      success: true,
      message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ'
    });

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ Admin PUT /api/admin/users:', error);

    return NextResponse.json({
      success: false,
      error: '–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞',
      details: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'
    }, { status: 500 });
  }
}

// DELETE - –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
export async function DELETE(request: NextRequest) {
  try {
    if (!(await checkAdminPermissions(request))) {
      return NextResponse.json({
        success: false,
        error: '–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ'
      }, { status: 403 });
    }

    const { userId } = await request.json();

    if (!userId) {
      return NextResponse.json({
        success: false,
        error: 'ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π'
      }, { status: 400 });
    }

    console.log('üë®‚Äçüíº Admin DELETE /api/admin/users –¥–ª—è:', userId);

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
    const users = await executeQuery<any>(`
      SELECT id, email, roles FROM users WHERE id = ?
    `, [userId]);

    if (users.length === 0) {
      return NextResponse.json({
        success: false,
        error: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
      }, { status: 404 });
    }

    const user = users[0];

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –Ω–µ –æ—Å—Ç–∞–Ω–Ω—ñ–π –∞–¥–º—ñ–Ω
    let roles = [];
    try {
      roles = JSON.parse(user.roles);
    } catch (e) {
      roles = [];
    }

    if (roles.includes('admin')) {
      const adminCount = await executeQuery<any>(`
        SELECT COUNT(*) as count
        FROM users
        WHERE JSON_CONTAINS(roles, '"admin"') AND status = 'active'
      `);

      if (adminCount[0]?.count <= 1) {
        return NextResponse.json({
          success: false,
          error: '–ù–µ–º–æ–∂–ª–∏–≤–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞'
        }, { status: 400 });
      }
    }

    // –í–∏–¥–∞–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–∫–∞—Å–∫–∞–¥–Ω–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ–π)
    await executeQuery(`DELETE FROM users WHERE id = ?`, [userId]);

    console.log('‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤–∏–¥–∞–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:', user.email);

    return NextResponse.json({
      success: true,
      message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ'
    });

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ Admin DELETE /api/admin/users:', error);

    return NextResponse.json({
      success: false,
      error: '–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞',
      details: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'
    }, { status: 500 });
  }
}
