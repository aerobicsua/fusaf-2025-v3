import { NextRequest, NextResponse } from 'next/server';
import { executeQuery } from '@/lib/mysql';
import { v4 as uuidv4 } from 'uuid';

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async function checkAdminPermissions(request: NextRequest) {
  // TODO: –í —Ä–µ–∞–ª—å–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—ñ —Ç—É—Ç –±—É–ª–∞ –± –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ JWT —Ç–æ–∫–µ–Ω–∞
  return true;
}

// –®–∞–±–ª–æ–Ω–∏ email –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
const emailTemplates = {
  userStatusChange: {
    subject: '–ó–º—ñ–Ω–∞ —Å—Ç–∞—Ç—É—Å—É –≤–∞—à–æ–≥–æ –∞–∫–∞—É–Ω—Ç—É –≤ –§–£–°–ê–§',
    html: `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; text-align: center;">
          <h1>–§–µ–¥–µ—Ä–∞—Ü—ñ—è –£–∫—Ä–∞—ó–Ω–∏ –∑—ñ –°–ø–æ—Ä—Ç–∏–≤–Ω–æ—ó –ê–µ—Ä–æ–±—ñ–∫–∏ —ñ –§—ñ—Ç–Ω–µ—Å—É</h1>
        </div>
        <div style="padding: 20px;">
          <h2>–í—ñ—Ç–∞—î–º–æ, {{userName}}!</h2>
          <p>–Ü–Ω—Ñ–æ—Ä–º—É—î–º–æ –≤–∞—Å –ø—Ä–æ –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É –≤–∞—à–æ–≥–æ –∞–∫–∞—É–Ω—Ç—É:</p>
          <div style="background: #f8f9fa; padding: 15px; border-radius: 5px; margin: 20px 0;">
            <strong>–ù–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å:</strong> {{newStatus}}<br>
            <strong>–î–∞—Ç–∞ –∑–º—ñ–Ω–∏:</strong> {{changeDate}}
          </div>
          {{#if reason}}
          <p><strong>–ü—Ä–∏—á–∏–Ω–∞:</strong> {{reason}}</p>
          {{/if}}
          <p>–Ø–∫—â–æ —É –≤–∞—Å —î –ø–∏—Ç–∞–Ω–Ω—è, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó –§–£–°–ê–§.</p>
        </div>
        <div style="background: #f8f9fa; padding: 15px; text-align: center; color: #666;">
          <p>¬© 2025 –§–£–°–ê–§. –í—Å—ñ –ø—Ä–∞–≤–∞ –∑–∞—Ö–∏—â–µ–Ω—ñ.</p>
        </div>
      </div>
    `
  },

  newCompetition: {
    subject: '–ù–æ–≤–µ –∑–º–∞–≥–∞–Ω–Ω—è –≤ –§–£–°–ê–§: {{competitionTitle}}',
    html: `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; text-align: center;">
          <h1>üèÜ –ù–æ–≤–µ –∑–º–∞–≥–∞–Ω–Ω—è –§–£–°–ê–§</h1>
        </div>
        <div style="padding: 20px;">
          <h2>{{competitionTitle}}</h2>
          <p>{{competitionDescription}}</p>

          <div style="background: #f8f9fa; padding: 15px; border-radius: 5px; margin: 20px 0;">
            <h3>–î–µ—Ç–∞–ª—ñ –∑–º–∞–≥–∞–Ω–Ω—è:</h3>
            <p><strong>üìÖ –î–∞—Ç–∞:</strong> {{competitionDate}}</p>
            <p><strong>üìç –ú—ñ—Å—Ü–µ:</strong> {{competitionLocation}}</p>
            <p><strong>‚è∞ –ß–∞—Å:</strong> {{competitionTime}}</p>
            <p><strong>üìã –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –¥–æ:</strong> {{registrationDeadline}}</p>
          </div>

          {{#if categories}}
          <div style="margin: 20px 0;">
            <strong>–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó:</strong><br>
            {{#each categories}}
            <span style="background: #e3f2fd; padding: 5px 10px; border-radius: 15px; margin: 5px; display: inline-block;">{{this}}</span>
            {{/each}}
          </div>
          {{/if}}

          <div style="text-align: center; margin: 30px 0;">
            <a href="{{registrationUrl}}" style="background: #4CAF50; color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; display: inline-block;">
              –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è –Ω–∞ –∑–º–∞–≥–∞–Ω–Ω—è
            </a>
          </div>

          <p><small>–ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è –¥–æ –∫—ñ–Ω—Ü–µ–≤–æ–≥–æ —Ç–µ—Ä–º—ñ–Ω—É!</small></p>
        </div>
        <div style="background: #f8f9fa; padding: 15px; text-align: center; color: #666;">
          <p>¬© 2025 –§–£–°–ê–§. –í—Å—ñ –ø—Ä–∞–≤–∞ –∑–∞—Ö–∏—â–µ–Ω—ñ.</p>
        </div>
      </div>
    `
  },

  competitionStatusChange: {
    subject: '–ó–º—ñ–Ω–∞ —Å—Ç–∞—Ç—É—Å—É –∑–º–∞–≥–∞–Ω–Ω—è: {{competitionTitle}}',
    html: `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; text-align: center;">
          <h1>–û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–º–∞–≥–∞–Ω–Ω—è –§–£–°–ê–§</h1>
        </div>
        <div style="padding: 20px;">
          <h2>{{competitionTitle}}</h2>
          <p>–Ü–Ω—Ñ–æ—Ä–º—É—î–º–æ –ø—Ä–æ –∑–º—ñ–Ω–∏ —É –∑–º–∞–≥–∞–Ω–Ω—ñ:</p>

          <div style="background: #f8f9fa; padding: 15px; border-radius: 5px; margin: 20px 0;">
            <strong>–ù–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å:</strong> {{newStatus}}<br>
            <strong>–î–∞—Ç–∞ –∑–º—ñ–Ω–∏:</strong> {{changeDate}}
          </div>

          {{#if statusMessage}}
          <p>{{statusMessage}}</p>
          {{/if}}

          {{#if actionRequired}}
          <div style="background: #fff3cd; border: 1px solid #ffeaa7; padding: 15px; border-radius: 5px; margin: 20px 0;">
            <strong>‚ö†Ô∏è –ü–æ—Ç—Ä—ñ–±–Ω–∞ –¥—ñ—è:</strong> {{actionRequired}}
          </div>
          {{/if}}
        </div>
        <div style="background: #f8f9fa; padding: 15px; text-align: center; color: #666;">
          <p>¬© 2025 –§–£–°A–§. –í—Å—ñ –ø—Ä–∞–≤–∞ –∑–∞—Ö–∏—â–µ–Ω—ñ.</p>
        </div>
      </div>
    `
  },

  welcomeNewUser: {
    subject: '–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –§–£–°–ê–§!',
    html: `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; text-align: center;">
          <h1>üéâ –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –§–£–°–ê–§!</h1>
        </div>
        <div style="padding: 20px;">
          <h2>–í—ñ—Ç–∞—î–º–æ, {{userName}}!</h2>
          <p>–î—è–∫—É—î–º–æ –∑–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –≤ –§–µ–¥–µ—Ä–∞—Ü—ñ—ó –£–∫—Ä–∞—ó–Ω–∏ –∑—ñ –°–ø–æ—Ä—Ç–∏–≤–Ω–æ—ó –ê–µ—Ä–æ–±—ñ–∫–∏ —ñ –§—ñ—Ç–Ω–µ—Å—É!</p>

          <div style="background: #f8f9fa; padding: 15px; border-radius: 5px; margin: 20px 0;">
            <h3>–í–∞—à—ñ –¥–∞–Ω—ñ –¥–ª—è –≤—Ö–æ–¥—É:</h3>
            <p><strong>Email:</strong> {{userEmail}}</p>
            <p><strong>–¢–∏–º—á–∞—Å–æ–≤–∏–π –ø–∞—Ä–æ–ª—å:</strong> {{temporaryPassword}}</p>
          </div>

          <div style="background: #fff3cd; border: 1px solid #ffeaa7; padding: 15px; border-radius: 5px; margin: 20px 0;">
            <strong>‚ö†Ô∏è –í–∞–∂–ª–∏–≤–æ:</strong> –ó–º—ñ–Ω—ñ—Ç—å —Ç–∏–º—á–∞—Å–æ–≤–∏–π –ø–∞—Ä–æ–ª—å –ø—ñ—Å–ª—è –ø–µ—Ä—à–æ–≥–æ –≤—Ö–æ–¥—É –≤ —Å–∏—Å—Ç–µ–º—É.
          </div>

          <div style="text-align: center; margin: 30px 0;">
            <a href="{{loginUrl}}" style="background: #4CAF50; color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; display: inline-block;">
              –£–≤—ñ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É
            </a>
          </div>

          <h3>–ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:</h3>
          <ul>
            <li>–ó–∞–ø–æ–≤–Ω—ñ—Ç—å –¥–æ–¥–∞—Ç–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –≤ –ø—Ä–æ—Ñ—ñ–ª—ñ</li>
            <li>–û–ø–ª–∞—Ç—ñ—Ç—å —á–ª–µ–Ω—Å—å–∫–∏–π –≤–Ω–µ—Å–æ–∫</li>
            <li>–î–æ—á–µ–∫–∞–π—Ç–µ—Å—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –∞–∫–∞—É–Ω—Ç—É</li>
            <li>–†–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—è –Ω–∞ –∑–º–∞–≥–∞–Ω–Ω—è</li>
          </ul>
        </div>
        <div style="background: #f8f9fa; padding: 15px; text-align: center; color: #666;">
          <p>¬© 2025 –§–£–°–ê–§. –í—Å—ñ –ø—Ä–∞–≤–∞ –∑–∞—Ö–∏—â–µ–Ω—ñ.</p>
        </div>
      </div>
    `
  },

  passwordReset: {
    subject: '–°–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è –§–£–°–ê–§',
    html: `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; text-align: center;">
          <h1>üîê –°–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è</h1>
        </div>
        <div style="padding: 20px;">
          <h2>–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É</h2>
          <p>–í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –æ—Å–∫—ñ–ª—å–∫–∏ –±—É–≤ –∑–∞–ø–∏—Ç–∞–Ω–∏–π —Å–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è –¥–ª—è –≤–∞—à–æ–≥–æ –∞–∫–∞—É–Ω—Ç—É.</p>

          <div style="background: #f8f9fa; padding: 15px; border-radius: 5px; margin: 20px 0;">
            <p><strong>–ù–æ–≤–∏–π —Ç–∏–º—á–∞—Å–æ–≤–∏–π –ø–∞—Ä–æ–ª—å:</strong> {{newPassword}}</p>
          </div>

          <div style="text-align: center; margin: 30px 0;">
            <a href="{{loginUrl}}" style="background: #4CAF50; color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; display: inline-block;">
              –£–≤—ñ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É
            </a>
          </div>

          <div style="background: #fff3cd; border: 1px solid #ffeaa7; padding: 15px; border-radius: 5px; margin: 20px 0;">
            <strong>‚ö†Ô∏è –ë–µ–∑–ø–µ–∫–∞:</strong> –ó–º—ñ–Ω—ñ—Ç—å –ø–∞—Ä–æ–ª—å –ø—ñ—Å–ª—è –≤—Ö–æ–¥—É –≤ —Å–∏—Å—Ç–µ–º—É.
          </div>

          <p><small>–Ø–∫—â–æ –≤–∏ –Ω–µ –∑–∞–ø–∏—Ç—É–≤–∞–ª–∏ —Å–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è, —ñ–≥–Ω–æ—Ä—É–π—Ç–µ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.</small></p>
        </div>
        <div style="background: #f8f9fa; padding: 15px; text-align: center; color: #666;">
          <p>¬© 2025 –§–£–°–ê–§. –í—Å—ñ –ø—Ä–∞–≤–∞ –∑–∞—Ö–∏—â–µ–Ω—ñ.</p>
        </div>
      </div>
    `
  }
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–º—ñ–Ω–∏ –∑–º—ñ–Ω–Ω–∏—Ö –≤ —à–∞–±–ª–æ–Ω—ñ
function replaceTemplateVariables(template: string, variables: any): string {
  let result = template;

  // –ü—Ä–æ—Å—Ç–∞ –∑–∞–º—ñ–Ω–∞ –∑–º—ñ–Ω–Ω–∏—Ö {{variable}}
  for (const [key, value] of Object.entries(variables)) {
    const regex = new RegExp(`{{${key}}}`, 'g');
    result = result.replace(regex, String(value || ''));
  }

  // –û–±—Ä–æ–±–∫–∞ —É–º–æ–≤–Ω–∏—Ö –±–ª–æ–∫—ñ–≤ {{#if variable}}...{{/if}}
  result = result.replace(/{{#if\s+(\w+)}}(.*?){{\/if}}/gs, (match, varName, content) => {
    return variables[varName] ? content : '';
  });

  // –û–±—Ä–æ–±–∫–∞ —Ü–∏–∫–ª—ñ–≤ {{#each array}}...{{/each}}
  result = result.replace(/{{#each\s+(\w+)}}(.*?){{\/each}}/gs, (match, arrayName, content) => {
    const array = variables[arrayName];
    if (Array.isArray(array)) {
      return array.map(item => content.replace(/{{this}}/g, item)).join('');
    }
    return '';
  });

  return result;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è email (–∑–∞–≥–ª—É—à–∫–∞ - –≤ production –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ä–µ–∞–ª—å–Ω–∏–π email —Å–µ—Ä–≤—ñ—Å)
async function sendEmail(to: string, subject: string, html: string): Promise<boolean> {
  try {
    // TODO: –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ —Ä–µ–∞–ª—å–Ω–∏–º email —Å–µ—Ä–≤—ñ—Å–æ–º (SendGrid, AWS SES, NodeMailer —Ç–æ—â–æ)
    console.log('üìß EMAIL –í–Ü–î–ü–†–ê–í–õ–ï–ù–û:');
    console.log(`–î–æ: ${to}`);
    console.log(`–¢–µ–º–∞: ${subject}`);
    console.log(`HTML –¥–æ–≤–∂–∏–Ω–∞: ${html.length} —Å–∏–º–≤–æ–ª—ñ–≤`);

    // –°–∏–º—É–ª—è—Ü—ñ—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ email (–≤ production –∑–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É –≤—ñ–¥–ø—Ä–∞–≤–∫—É)
    await new Promise(resolve => setTimeout(resolve, 100));

    return true;
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ email:', error);
    return false;
  }
}

// POST - –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
export async function POST(request: NextRequest) {
  try {
    if (!(await checkAdminPermissions(request))) {
      return NextResponse.json({
        success: false,
        error: '–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ'
      }, { status: 403 });
    }

    const {
      type,
      recipients,
      template,
      variables,
      customSubject,
      customMessage
    } = await request.json();

    console.log('üìß Admin POST /api/admin/notifications - –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω—å');

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
    if (!type || !recipients || recipients.length === 0) {
      return NextResponse.json({
        success: false,
        error: '–¢–∏–ø —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è —Ç–∞ –æ—Ç—Ä–∏–º—É–≤–∞—á—ñ –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ'
      }, { status: 400 });
    }

    // –°—Ç–≤–æ—Ä–∏–º–æ —Ç–∞–±–ª–∏—Ü—é –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è email, —è–∫—â–æ –≤–æ–Ω–∞ –Ω–µ —ñ—Å–Ω—É—î
    await executeQuery(`
      CREATE TABLE IF NOT EXISTS email_notifications (
        id VARCHAR(36) PRIMARY KEY,
        type VARCHAR(100) NOT NULL,
        recipient_email VARCHAR(255) NOT NULL,
        subject VARCHAR(500) NOT NULL,
        template_used VARCHAR(100),
        variables JSON,
        status ENUM('pending', 'sent', 'failed') DEFAULT 'pending',
        sent_at TIMESTAMP NULL,
        error_message TEXT,
        admin_id VARCHAR(36),
        admin_email VARCHAR(255),
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

        INDEX idx_type (type),
        INDEX idx_recipient (recipient_email),
        INDEX idx_status (status),
        INDEX idx_sent_at (sent_at)
      )
    `);

    let emailTemplate = null;
    let subject = customSubject || '';
    let htmlContent = customMessage || '';

    // –Ø–∫—â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≥–æ—Ç–æ–≤–∏–π —à–∞–±–ª–æ–Ω
    if (template && emailTemplates[template as keyof typeof emailTemplates]) {
      emailTemplate = emailTemplates[template as keyof typeof emailTemplates];
      subject = customSubject || emailTemplate.subject;
      htmlContent = emailTemplate.html;
    }

    if (!subject || !htmlContent) {
      return NextResponse.json({
        success: false,
        error: '–¢–µ–º–∞ —Ç–∞ –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ'
      }, { status: 400 });
    }

    const results = [];
    let successCount = 0;
    let failureCount = 0;

    // –ù–∞–¥—Å–∏–ª–∞—î–º–æ email –∫–æ–∂–Ω–æ–º—É –æ—Ç—Ä–∏–º—É–≤–∞—á—É
    for (const recipient of recipients) {
      const notificationId = uuidv4();

      try {
        // –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
        const personalizedVariables = {
          ...variables,
          userName: recipient.name || recipient.email,
          userEmail: recipient.email,
          currentDate: new Date().toLocaleDateString('uk-UA'),
          loginUrl: `${process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'}/login`,
          registrationUrl: `${process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'}/competitions`
        };

        const finalSubject = replaceTemplateVariables(subject, personalizedVariables);
        const finalHtml = replaceTemplateVariables(htmlContent, personalizedVariables);

        // –ó–∞–ø–∏—Å—É—î–º–æ –≤ –±–∞–∑—É (pending)
        await executeQuery(`
          INSERT INTO email_notifications (
            id, type, recipient_email, subject, template_used, variables,
            status, admin_id, admin_email, created_at
          ) VALUES (?, ?, ?, ?, ?, ?, 'pending', ?, ?, NOW())
        `, [
          notificationId,
          type,
          recipient.email,
          finalSubject,
          template || 'custom',
          JSON.stringify(personalizedVariables),
          'current_admin_id', // TODO: –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
          'admin@fusaf.org.ua' // TODO: –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        ]);

        // –ù–∞–¥—Å–∏–ª–∞—î–º–æ email
        const emailSent = await sendEmail(recipient.email, finalSubject, finalHtml);

        if (emailSent) {
          // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –Ω–∞ sent
          await executeQuery(`
            UPDATE email_notifications
            SET status = 'sent', sent_at = NOW()
            WHERE id = ?
          `, [notificationId]);

          results.push({
            email: recipient.email,
            status: 'sent',
            notificationId
          });
          successCount++;
        } else {
          throw new Error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ email');
        }

      } catch (error) {
        // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –Ω–∞ failed
        await executeQuery(`
          UPDATE email_notifications
          SET status = 'failed', error_message = ?
          WHERE id = ?
        `, [error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞', notificationId]);

        results.push({
          email: recipient.email,
          status: 'failed',
          error: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞',
          notificationId
        });
        failureCount++;
      }
    }

    console.log(`‚úÖ –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: ${successCount} —É—Å–ø—ñ—à–Ω–æ, ${failureCount} –ø–æ–º–∏–ª–æ–∫`);

    return NextResponse.json({
      success: true,
      message: `–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: ${successCount} —É—Å–ø—ñ—à–Ω–æ, ${failureCount} –ø–æ–º–∏–ª–æ–∫`,
      statistics: {
        total: recipients.length,
        sent: successCount,
        failed: failureCount
      },
      results: results
    });

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ Admin POST /api/admin/notifications:', error);

    return NextResponse.json({
      success: false,
      error: '–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω—å',
      details: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'
    }, { status: 500 });
  }
}

// GET - –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é —Å–ø–æ–≤—ñ—â–µ–Ω—å
export async function GET(request: NextRequest) {
  try {
    if (!(await checkAdminPermissions(request))) {
      return NextResponse.json({
        success: false,
        error: '–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ'
      }, { status: 403 });
    }

    const url = new URL(request.url);
    const type = url.searchParams.get('type');
    const status = url.searchParams.get('status');
    const recipient = url.searchParams.get('recipient');
    const page = parseInt(url.searchParams.get('page') || '1');
    const limit = parseInt(url.searchParams.get('limit') || '50');
    const offset = (page - 1) * limit;

    // –°—Ç–≤–æ—Ä–∏–º–æ —Ç–∞–±–ª–∏—Ü—é, —è–∫—â–æ –≤–æ–Ω–∞ –Ω–µ —ñ—Å–Ω—É—î
    await executeQuery(`
      CREATE TABLE IF NOT EXISTS email_notifications (
        id VARCHAR(36) PRIMARY KEY,
        type VARCHAR(100) NOT NULL,
        recipient_email VARCHAR(255) NOT NULL,
        subject VARCHAR(500) NOT NULL,
        template_used VARCHAR(100),
        variables JSON,
        status ENUM('pending', 'sent', 'failed') DEFAULT 'pending',
        sent_at TIMESTAMP NULL,
        error_message TEXT,
        admin_id VARCHAR(36),
        admin_email VARCHAR(255),
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

        INDEX idx_type (type),
        INDEX idx_recipient (recipient_email),
        INDEX idx_status (status),
        INDEX idx_sent_at (sent_at)
      )
    `);

    let query = `
      SELECT
        id, type, recipient_email, subject, template_used, status,
        sent_at, error_message, admin_email, created_at
      FROM email_notifications
      WHERE 1=1
    `;

    let countQuery = `SELECT COUNT(*) as total FROM email_notifications WHERE 1=1`;
    const queryParams: any[] = [];
    const countParams: any[] = [];

    // –î–æ–¥–∞—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∏
    if (type) {
      query += ` AND type = ?`;
      countQuery += ` AND type = ?`;
      queryParams.push(type);
      countParams.push(type);
    }

    if (status) {
      query += ` AND status = ?`;
      countQuery += ` AND status = ?`;
      queryParams.push(status);
      countParams.push(status);
    }

    if (recipient) {
      query += ` AND recipient_email LIKE ?`;
      countQuery += ` AND recipient_email LIKE ?`;
      queryParams.push(`%${recipient}%`);
      countParams.push(`%${recipient}%`);
    }

    // –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—è
    query += ` ORDER BY created_at DESC LIMIT ? OFFSET ?`;
    queryParams.push(limit, offset);

    // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç–∏
    const [notifications, countResult] = await Promise.all([
      executeQuery<any>(query, queryParams),
      executeQuery<any>(countQuery, countParams)
    ]);

    const total = countResult[0]?.total || 0;

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const stats = await executeQuery<any>(`
      SELECT
        COUNT(*) as total,
        COUNT(CASE WHEN status = 'sent' THEN 1 END) as sent,
        COUNT(CASE WHEN status = 'failed' THEN 1 END) as failed,
        COUNT(CASE WHEN status = 'pending' THEN 1 END) as pending,
        COUNT(CASE WHEN DATE(created_at) = CURDATE() THEN 1 END) as today
      FROM email_notifications
    `);

    return NextResponse.json({
      success: true,
      notifications: notifications,
      pagination: {
        page,
        limit,
        total,
        totalPages: Math.ceil(total / limit)
      },
      statistics: stats[0] || {},
      templates: Object.keys(emailTemplates),
      filters: { type, status, recipient }
    });

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ Admin GET /api/admin/notifications:', error);

    return NextResponse.json({
      success: false,
      error: '–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å',
      details: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'
    }, { status: 500 });
  }
}

// –ï–∫—Å–ø–æ—Ä—Ç —à–∞–±–ª–æ–Ω—ñ–≤ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ —ñ–Ω—à–∏—Ö —á–∞—Å—Ç–∏–Ω–∞—Ö –¥–æ–¥–∞—Ç–∫—É
export { emailTemplates, replaceTemplateVariables, sendEmail };
