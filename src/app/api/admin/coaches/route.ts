import { NextRequest, NextResponse } from 'next/server';
import { executeQuery } from '@/lib/mysql';
import { v4 as uuidv4 } from 'uuid';

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async function checkAdminPermissions(request: NextRequest) {
  // TODO: –í —Ä–µ–∞–ª—å–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—ñ —Ç—É—Ç –±—É–ª–∞ –± –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ JWT —Ç–æ–∫–µ–Ω–∞
  return true;
}

// GET - –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö —Ç—Ä–µ–Ω–µ—Ä—ñ–≤ —Ç–∞ —Å—É–¥–¥—ñ–≤
export async function GET(request: NextRequest) {
  try {
    if (!(await checkAdminPermissions(request))) {
      return NextResponse.json({
        success: false,
        error: '–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ. –ü–æ—Ç—Ä—ñ–±–Ω—ñ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.'
      }, { status: 403 });
    }

    const url = new URL(request.url);

    // –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
    const status = url.searchParams.get('status');
    const qualification = url.searchParams.get('qualification');
    const specialization = url.searchParams.get('specialization');
    const region = url.searchParams.get('region');
    const search = url.searchParams.get('search');
    const license_status = url.searchParams.get('license_status');
    const page = parseInt(url.searchParams.get('page') || '1');
    const limit = parseInt(url.searchParams.get('limit') || '50');
    const offset = (page - 1) * limit;

    console.log('üë®‚Äçüè´ Admin GET /api/admin/coaches –∑ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏:', {
      status, qualification, specialization, region, search, license_status, page, limit
    });

    // –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä–∏–º–æ —Ç–∞–±–ª–∏—Ü—é –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä—ñ–≤/—Å—É–¥–¥—ñ–≤, —è–∫—â–æ –≤–æ–Ω–∞ –Ω–µ —ñ—Å–Ω—É—î
    await executeQuery(`
      CREATE TABLE IF NOT EXISTS coaches (
        id VARCHAR(36) PRIMARY KEY,
        user_id VARCHAR(36),

        # –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
        first_name VARCHAR(255) NOT NULL,
        last_name VARCHAR(255) NOT NULL,
        middle_name VARCHAR(255),
        email VARCHAR(255) UNIQUE NOT NULL,
        phone VARCHAR(50),
        date_of_birth DATE,
        gender ENUM('male', 'female') DEFAULT 'male',

        # –õ–æ–∫–∞—Ü—ñ—è
        country VARCHAR(100) DEFAULT '–£–∫—Ä–∞—ó–Ω–∞',
        region VARCHAR(100),
        city VARCHAR(100),
        address TEXT,

        # –ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
        coach_type ENUM('coach', 'judge', 'both') DEFAULT 'coach',
        qualification_level VARCHAR(100),
        license_number VARCHAR(100),
        license_issued_date DATE,
        license_expiry_date DATE,
        license_status ENUM('active', 'expired', 'suspended', 'revoked') DEFAULT 'active',

        # –ö–≤–∞–ª—ñ—Ñ—ñ–∫–∞—Ü—ñ—ó —Ç–∞ —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
        qualifications JSON,
        specializations JSON,
        experience_years INT DEFAULT 0,

        # –ö–ª—É–± —Ç–∞ —Ä–æ–±–æ—Ç–∞
        primary_club VARCHAR(255),
        employment_status ENUM('full_time', 'part_time', 'volunteer', 'retired') DEFAULT 'full_time',

        # –î–æ–∫—É–º–µ–Ω—Ç–∏
        documents JSON,
        photo_url TEXT,

        # –ö–æ–Ω—Ç–∞–∫—Ç–∏ —Ç–∞ —Å–æ—Ü—ñ–∞–ª—å–Ω—ñ –º–µ—Ä–µ–∂—ñ
        website VARCHAR(255),
        social_media JSON,

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        athletes_trained INT DEFAULT 0,
        competitions_judged INT DEFAULT 0,
        achievements JSON,

        # –°–∏—Å—Ç–µ–º–Ω—ñ –ø–æ–ª—è
        status ENUM('active', 'inactive', 'pending', 'suspended') DEFAULT 'pending',
        email_verified BOOLEAN DEFAULT FALSE,
        profile_verified BOOLEAN DEFAULT FALSE,

        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

        # –Ü–Ω–¥–µ–∫—Å–∏
        INDEX idx_coach_type (coach_type),
        INDEX idx_qualification (qualification_level),
        INDEX idx_license_status (license_status),
        INDEX idx_region (region),
        INDEX idx_status (status),
        INDEX idx_email (email),

        # –ó–≤'—è–∑–æ–∫ –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏
        FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL
      )
    `);

    // –¢–∞–±–ª–∏—Ü—è –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—ñ–≤
    await executeQuery(`
      CREATE TABLE IF NOT EXISTS coach_certificates (
        id VARCHAR(36) PRIMARY KEY,
        coach_id VARCHAR(36) NOT NULL,

        certificate_name VARCHAR(255) NOT NULL,
        issuing_organization VARCHAR(255) NOT NULL,
        certificate_type ENUM('coaching', 'judging', 'first_aid', 'education', 'other') DEFAULT 'coaching',

        issue_date DATE NOT NULL,
        expiry_date DATE,
        certificate_number VARCHAR(100),

        file_url TEXT,
        file_name VARCHAR(255),

        verification_status ENUM('pending', 'verified', 'rejected') DEFAULT 'pending',
        verified_by VARCHAR(36),
        verified_at TIMESTAMP NULL,

        notes TEXT,

        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

        INDEX idx_coach_id (coach_id),
        INDEX idx_certificate_type (certificate_type),
        INDEX idx_expiry_date (expiry_date),
        INDEX idx_verification_status (verification_status),

        FOREIGN KEY (coach_id) REFERENCES coaches(id) ON DELETE CASCADE
      )
    `);

    // –ë–∞–∑–æ–≤–∏–π –∑–∞–ø–∏—Ç –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä—ñ–≤/—Å—É–¥–¥—ñ–≤
    let query = `
      SELECT
        c.id, c.user_id, c.first_name, c.last_name, c.middle_name,
        c.email, c.phone, c.date_of_birth, c.gender,
        c.country, c.region, c.city, c.address,
        c.coach_type, c.qualification_level, c.license_number,
        c.license_issued_date, c.license_expiry_date, c.license_status,
        c.qualifications, c.specializations, c.experience_years,
        c.primary_club, c.employment_status,
        c.documents, c.photo_url, c.website, c.social_media,
        c.athletes_trained, c.competitions_judged, c.achievements,
        c.status, c.email_verified, c.profile_verified,
        c.created_at, c.updated_at,
        u.name as user_name
      FROM coaches c
      LEFT JOIN users u ON c.user_id = u.id
      WHERE 1=1
    `;

    let countQuery = `SELECT COUNT(*) as total FROM coaches c WHERE 1=1`;
    const queryParams: any[] = [];
    const countParams: any[] = [];

    // –î–æ–¥–∞—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∏
    if (status) {
      query += ` AND c.status = ?`;
      countQuery += ` AND c.status = ?`;
      queryParams.push(status);
      countParams.push(status);
    }

    if (qualification) {
      query += ` AND c.qualification_level = ?`;
      countQuery += ` AND c.qualification_level = ?`;
      queryParams.push(qualification);
      countParams.push(qualification);
    }

    if (specialization) {
      query += ` AND JSON_CONTAINS(c.specializations, ?)`;
      countQuery += ` AND JSON_CONTAINS(c.specializations, ?)`;
      queryParams.push(`"${specialization}"`);
      countParams.push(`"${specialization}"`);
    }

    if (region) {
      query += ` AND c.region LIKE ?`;
      countQuery += ` AND c.region LIKE ?`;
      queryParams.push(`%${region}%`);
      countParams.push(`%${region}%`);
    }

    if (license_status) {
      query += ` AND c.license_status = ?`;
      countQuery += ` AND c.license_status = ?`;
      queryParams.push(license_status);
      countParams.push(license_status);
    }

    if (search) {
      query += ` AND (c.first_name LIKE ? OR c.last_name LIKE ? OR c.email LIKE ? OR c.primary_club LIKE ?)`;
      countQuery += ` AND (c.first_name LIKE ? OR c.last_name LIKE ? OR c.email LIKE ? OR c.primary_club LIKE ?)`;
      const searchPattern = `%${search}%`;
      queryParams.push(searchPattern, searchPattern, searchPattern, searchPattern);
      countParams.push(searchPattern, searchPattern, searchPattern, searchPattern);
    }

    // –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—è
    query += ` ORDER BY c.created_at DESC LIMIT ? OFFSET ?`;
    queryParams.push(limit, offset);

    console.log('üìä –í–∏–∫–æ–Ω—É—î–º–æ MySQL –∑–∞–ø–∏—Ç –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä—ñ–≤/—Å—É–¥–¥—ñ–≤');

    // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç–∏
    const [coaches, countResult] = await Promise.all([
      executeQuery<any>(query, queryParams),
      executeQuery<any>(countQuery, countParams)
    ]);

    const total = countResult[0]?.total || 0;

    console.log(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ ${coaches.length} —Ç—Ä–µ–Ω–µ—Ä—ñ–≤/—Å—É–¥–¥—ñ–≤ –∑ ${total} –∑–∞–≥–∞–ª–æ–º`);

    // –û–±—Ä–æ–±–ª—è—î–º–æ –¥–∞–Ω—ñ —Ç—Ä–µ–Ω–µ—Ä—ñ–≤/—Å—É–¥–¥—ñ–≤
    const processedCoaches = [];

    for (const coach of coaches) {
      try {
        // –û—Ç—Ä–∏–º—É—î–º–æ —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞
        const certificates = await executeQuery<any>(`
          SELECT
            id, certificate_name, issuing_organization, certificate_type,
            issue_date, expiry_date, certificate_number, verification_status
          FROM coach_certificates
          WHERE coach_id = ?
          ORDER BY issue_date DESC
        `, [coach.id]);

        // –ü–∞—Ä—Å–∏–º–æ JSON –ø–æ–ª—è –±–µ–∑–ø–µ—á–Ω–æ
        let qualifications: string[] = [];
        let specializations: string[] = [];
        let documents: any[] = [];
        let socialMedia: any = {};
        let achievements: any[] = [];

        try {
          qualifications = typeof coach.qualifications === 'string'
            ? JSON.parse(coach.qualifications)
            : coach.qualifications || [];
        } catch (e) {
          qualifications = [];
        }

        try {
          specializations = typeof coach.specializations === 'string'
            ? JSON.parse(coach.specializations)
            : coach.specializations || [];
        } catch (e) {
          specializations = [];
        }

        try {
          documents = typeof coach.documents === 'string'
            ? JSON.parse(coach.documents)
            : coach.documents || [];
        } catch (e) {
          documents = [];
        }

        try {
          socialMedia = typeof coach.social_media === 'string'
            ? JSON.parse(coach.social_media)
            : coach.social_media || {};
        } catch (e) {
          socialMedia = {};
        }

        try {
          achievements = typeof coach.achievements === 'string'
            ? JSON.parse(coach.achievements)
            : coach.achievements || [];
        } catch (e) {
          achievements = [];
        }

        processedCoaches.push({
          id: coach.id,
          userId: coach.user_id,
          userName: coach.user_name,

          // –û—Å–æ–±–∏—Å—Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
          firstName: coach.first_name,
          lastName: coach.last_name,
          middleName: coach.middle_name,
          fullName: `${coach.last_name} ${coach.first_name} ${coach.middle_name || ''}`.trim(),
          email: coach.email,
          phone: coach.phone,
          dateOfBirth: coach.date_of_birth,
          gender: coach.gender,

          // –õ–æ–∫–∞—Ü—ñ—è
          country: coach.country,
          region: coach.region,
          city: coach.city,
          address: coach.address,

          // –ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
          coachType: coach.coach_type,
          qualificationLevel: coach.qualification_level,
          licenseNumber: coach.license_number,
          licenseIssuedDate: coach.license_issued_date,
          licenseExpiryDate: coach.license_expiry_date,
          licenseStatus: coach.license_status,

          // –ö–≤–∞–ª—ñ—Ñ—ñ–∫–∞—Ü—ñ—ó —Ç–∞ —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
          qualifications: qualifications,
          specializations: specializations,
          experienceYears: coach.experience_years,

          // –†–æ–±–æ—Ç–∞
          primaryClub: coach.primary_club,
          employmentStatus: coach.employment_status,

          // –ú–µ–¥—ñ–∞ —Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∏
          documents: documents,
          photoUrl: coach.photo_url,
          website: coach.website,
          socialMedia: socialMedia,

          // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
          athletesTrained: coach.athletes_trained,
          competitionsJudged: coach.competitions_judged,
          achievements: achievements,

          // –°–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–∏
          certificates: certificates,
          certificatesCount: certificates.length,
          validCertificates: certificates.filter(cert =>
            !cert.expiry_date || new Date(cert.expiry_date) > new Date()
          ).length,

          // –°–∏—Å—Ç–µ–º–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
          status: coach.status,
          emailVerified: coach.email_verified,
          profileVerified: coach.profile_verified,
          createdAt: coach.created_at,
          updatedAt: coach.updated_at
        });

      } catch (error) {
        console.warn('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ç—Ä–µ–Ω–µ—Ä–∞/—Å—É–¥–¥—ñ:', coach.id, error);

        // –î–æ–¥–∞—î–º–æ —Ç—Ä–µ–Ω–µ—Ä–∞ –∑ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
        processedCoaches.push({
          ...coach,
          qualifications: [],
          specializations: [],
          documents: [],
          socialMedia: {},
          achievements: [],
          certificates: [],
          certificatesCount: 0,
          validCertificates: 0
        });
      }
    }

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–Ω–µ—Ä—ñ–≤/—Å—É–¥–¥—ñ–≤
    const stats = await executeQuery<any>(`
      SELECT
        COUNT(*) as total,
        COUNT(CASE WHEN status = 'active' THEN 1 END) as active,
        COUNT(CASE WHEN status = 'pending' THEN 1 END) as pending,
        COUNT(CASE WHEN status = 'suspended' THEN 1 END) as suspended,
        COUNT(CASE WHEN coach_type = 'coach' THEN 1 END) as coaches,
        COUNT(CASE WHEN coach_type = 'judge' THEN 1 END) as judges,
        COUNT(CASE WHEN coach_type = 'both' THEN 1 END) as both,
        COUNT(CASE WHEN license_status = 'active' THEN 1 END) as active_licenses,
        COUNT(CASE WHEN license_status = 'expired' THEN 1 END) as expired_licenses,
        AVG(experience_years) as avg_experience
      FROM coaches
    `);

    const regionStats = await executeQuery<any>(`
      SELECT region, COUNT(*) as count
      FROM coaches
      WHERE region IS NOT NULL AND region != ''
      GROUP BY region
      ORDER BY count DESC
      LIMIT 10
    `);

    const qualificationStats = await executeQuery<any>(`
      SELECT qualification_level, COUNT(*) as count
      FROM coaches
      WHERE qualification_level IS NOT NULL AND qualification_level != ''
      GROUP BY qualification_level
      ORDER BY count DESC
      LIMIT 10
    `);

    return NextResponse.json({
      success: true,
      coaches: processedCoaches,
      pagination: {
        page,
        limit,
        total,
        totalPages: Math.ceil(total / limit)
      },
      statistics: {
        ...stats[0],
        byRegion: regionStats.reduce((acc: any, item) => {
          acc[item.region] = item.count;
          return acc;
        }, {}),
        byQualification: qualificationStats.reduce((acc: any, item) => {
          acc[item.qualification_level] = item.count;
          return acc;
        }, {})
      },
      filters: { status, qualification, specialization, region, search, license_status }
    });

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ Admin GET /api/admin/coaches:', error);

    return NextResponse.json({
      success: false,
      error: '–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç—Ä–µ–Ω–µ—Ä—ñ–≤/—Å—É–¥–¥—ñ–≤',
      details: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'
    }, { status: 500 });
  }
}

// POST - —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞/—Å—É–¥–¥—é
export async function POST(request: NextRequest) {
  try {
    if (!(await checkAdminPermissions(request))) {
      return NextResponse.json({
        success: false,
        error: '–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ'
      }, { status: 403 });
    }

    const coachData = await request.json();

    console.log('üë®‚Äçüè´ Admin POST /api/admin/coaches - —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—Ä–µ–Ω–µ—Ä–∞/—Å—É–¥–¥—ñ');

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
    if (!coachData.firstName || !coachData.lastName || !coachData.email) {
      return NextResponse.json({
        success: false,
        error: '–Ü–º\'—è, –ø—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ email –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ'
      }, { status: 400 });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ—Å—Ç—å email
    const existingCoaches = await executeQuery<any>(`
      SELECT id FROM coaches WHERE email = ?
    `, [coachData.email]);

    if (existingCoaches.length > 0) {
      return NextResponse.json({
        success: false,
        error: '–¢—Ä–µ–Ω–µ—Ä/—Å—É–¥–¥—è –∑ —Ç–∞–∫–∏–º email –≤–∂–µ —ñ—Å–Ω—É—î'
      }, { status: 409 });
    }

    const coachId = uuidv4();

    // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç—Ä–µ–Ω–µ—Ä–∞/—Å—É–¥–¥—é
    await executeQuery(`
      INSERT INTO coaches (
        id, user_id, first_name, last_name, middle_name, email, phone,
        date_of_birth, gender, country, region, city, address,
        coach_type, qualification_level, license_number, license_issued_date,
        license_expiry_date, license_status, qualifications, specializations,
        experience_years, primary_club, employment_status, documents,
        photo_url, website, social_media, athletes_trained, competitions_judged,
        achievements, status, email_verified, profile_verified,
        created_at, updated_at
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, NOW(), NOW())
    `, [
      coachId,
      coachData.userId || null,
      coachData.firstName,
      coachData.lastName,
      coachData.middleName || '',
      coachData.email,
      coachData.phone || '',
      coachData.dateOfBirth || null,
      coachData.gender || 'male',
      coachData.country || '–£–∫—Ä–∞—ó–Ω–∞',
      coachData.region || '',
      coachData.city || '',
      coachData.address || '',
      coachData.coachType || 'coach',
      coachData.qualificationLevel || '',
      coachData.licenseNumber || '',
      coachData.licenseIssuedDate || null,
      coachData.licenseExpiryDate || null,
      coachData.licenseStatus || 'active',
      JSON.stringify(coachData.qualifications || []),
      JSON.stringify(coachData.specializations || []),
      coachData.experienceYears || 0,
      coachData.primaryClub || '',
      coachData.employmentStatus || 'full_time',
      JSON.stringify(coachData.documents || []),
      coachData.photoUrl || '',
      coachData.website || '',
      JSON.stringify(coachData.socialMedia || {}),
      coachData.athletesTrained || 0,
      coachData.competitionsJudged || 0,
      JSON.stringify(coachData.achievements || []),
      coachData.status || 'pending',
      coachData.emailVerified || false,
      coachData.profileVerified || false
    ]);

    console.log('‚úÖ –¢—Ä–µ–Ω–µ—Ä–∞/—Å—É–¥–¥—é —Å—Ç–≤–æ—Ä–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:', coachData.firstName, coachData.lastName);

    return NextResponse.json({
      success: true,
      message: '–¢—Ä–µ–Ω–µ—Ä–∞/—Å—É–¥–¥—é —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ',
      coachId: coachId
    });

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ Admin POST /api/admin/coaches:', error);

    return NextResponse.json({
      success: false,
      error: '–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—Ä–µ–Ω–µ—Ä–∞/—Å—É–¥–¥—ñ',
      details: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'
    }, { status: 500 });
  }
}

// PUT - –æ–Ω–æ–≤–∏—Ç–∏ —Ç—Ä–µ–Ω–µ—Ä–∞/—Å—É–¥–¥—é
export async function PUT(request: NextRequest) {
  try {
    if (!(await checkAdminPermissions(request))) {
      return NextResponse.json({
        success: false,
        error: '–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ'
      }, { status: 403 });
    }

    const { coachId, updates } = await request.json();

    if (!coachId) {
      return NextResponse.json({
        success: false,
        error: 'ID —Ç—Ä–µ–Ω–µ—Ä–∞/—Å—É–¥–¥—ñ –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π'
      }, { status: 400 });
    }

    console.log('üë®‚Äçüè´ Admin PUT /api/admin/coaches –¥–ª—è:', coachId);

    // –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω—å
    const updateFields = [];
    const updateValues = [];

    // –î–æ–∑–≤–æ–ª–µ–Ω—ñ –ø–æ–ª—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    const allowedFields = [
      'user_id', 'first_name', 'last_name', 'middle_name', 'email', 'phone',
      'date_of_birth', 'gender', 'country', 'region', 'city', 'address',
      'coach_type', 'qualification_level', 'license_number', 'license_issued_date',
      'license_expiry_date', 'license_status', 'experience_years', 'primary_club',
      'employment_status', 'photo_url', 'website', 'athletes_trained',
      'competitions_judged', 'status', 'email_verified', 'profile_verified'
    ];

    for (const field of allowedFields) {
      if (updates[field] !== undefined) {
        updateFields.push(`${field} = ?`);
        updateValues.push(updates[field]);
      }
    }

    // JSON –ø–æ–ª—è
    if (updates.qualifications !== undefined) {
      updateFields.push('qualifications = ?');
      updateValues.push(JSON.stringify(updates.qualifications));
    }

    if (updates.specializations !== undefined) {
      updateFields.push('specializations = ?');
      updateValues.push(JSON.stringify(updates.specializations));
    }

    if (updates.documents !== undefined) {
      updateFields.push('documents = ?');
      updateValues.push(JSON.stringify(updates.documents));
    }

    if (updates.socialMedia !== undefined) {
      updateFields.push('social_media = ?');
      updateValues.push(JSON.stringify(updates.socialMedia));
    }

    if (updates.achievements !== undefined) {
      updateFields.push('achievements = ?');
      updateValues.push(JSON.stringify(updates.achievements));
    }

    if (updateFields.length === 0) {
      return NextResponse.json({
        success: false,
        error: '–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è'
      }, { status: 400 });
    }

    // –î–æ–¥–∞—î–º–æ updated_at
    updateFields.push('updated_at = NOW()');
    updateValues.push(coachId);

    const updateQuery = `
      UPDATE coaches
      SET ${updateFields.join(', ')}
      WHERE id = ?
    `;

    await executeQuery(updateQuery, updateValues);

    console.log('‚úÖ –¢—Ä–µ–Ω–µ—Ä–∞/—Å—É–¥–¥—é –æ–Ω–æ–≤–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º');

    return NextResponse.json({
      success: true,
      message: '–¢—Ä–µ–Ω–µ—Ä–∞/—Å—É–¥–¥—é —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ'
    });

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ Admin PUT /api/admin/coaches:', error);

    return NextResponse.json({
      success: false,
      error: '–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç—Ä–µ–Ω–µ—Ä–∞/—Å—É–¥–¥—ñ',
      details: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'
    }, { status: 500 });
  }
}

// DELETE - –≤–∏–¥–∞–ª–∏—Ç–∏ —Ç—Ä–µ–Ω–µ—Ä–∞/—Å—É–¥–¥—é
export async function DELETE(request: NextRequest) {
  try {
    if (!(await checkAdminPermissions(request))) {
      return NextResponse.json({
        success: false,
        error: '–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ'
      }, { status: 403 });
    }

    const { coachId } = await request.json();

    if (!coachId) {
      return NextResponse.json({
        success: false,
        error: 'ID —Ç—Ä–µ–Ω–µ—Ä–∞/—Å—É–¥–¥—ñ –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π'
      }, { status: 400 });
    }

    console.log('üë®‚Äçüè´ Admin DELETE /api/admin/coaches –¥–ª—è:', coachId);

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î —Ç—Ä–µ–Ω–µ—Ä/—Å—É–¥–¥—è
    const coaches = await executeQuery<any>(`
      SELECT id, first_name, last_name FROM coaches WHERE id = ?
    `, [coachId]);

    if (coaches.length === 0) {
      return NextResponse.json({
        success: false,
        error: '–¢—Ä–µ–Ω–µ—Ä–∞/—Å—É–¥–¥—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
      }, { status: 404 });
    }

    const coach = coaches[0];

    // –í–∏–¥–∞–ª—è—î–º–æ —Ç—Ä–µ–Ω–µ—Ä–∞/—Å—É–¥–¥—é (–∫–∞—Å–∫–∞–¥–Ω–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—ñ–≤)
    await executeQuery(`DELETE FROM coaches WHERE id = ?`, [coachId]);

    console.log('‚úÖ –¢—Ä–µ–Ω–µ—Ä–∞/—Å—É–¥–¥—é –≤–∏–¥–∞–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:', coach.first_name, coach.last_name);

    return NextResponse.json({
      success: true,
      message: '–¢—Ä–µ–Ω–µ—Ä–∞/—Å—É–¥–¥—é —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ'
    });

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ Admin DELETE /api/admin/coaches:', error);

    return NextResponse.json({
      success: false,
      error: '–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç—Ä–µ–Ω–µ—Ä–∞/—Å—É–¥–¥—ñ',
      details: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'
    }, { status: 500 });
  }
}
