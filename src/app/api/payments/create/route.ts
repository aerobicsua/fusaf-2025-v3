import { NextRequest, NextResponse } from 'next/server';
import { executeQuery } from '@/lib/mysql';
import { createLiqPayService } from '@/lib/liqpay';
import { v4 as uuidv4 } from 'uuid';

/**
 * @swagger
 * /api/payments/create:
 *   post:
 *     summary: –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–ª–∞—Ç—ñ–∂ —á–µ—Ä–µ–∑ LiqPay
 *     description: –°—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π –ø–ª–∞—Ç—ñ–∂ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –Ω–∞ –∑–º–∞–≥–∞–Ω–Ω—è —á–µ—Ä–µ–∑ LiqPay
 *     tags: [Payments]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - competitionId
 *               - amount
 *               - description
 *             properties:
 *               competitionId:
 *                 type: string
 *                 format: uuid
 *                 description: ID –∑–º–∞–≥–∞–Ω–Ω—è
 *               amount:
 *                 type: number
 *                 minimum: 1
 *                 description: –°—É–º–∞ –ø–ª–∞—Ç–µ–∂—É –≤ –≥—Ä–∏–≤–Ω—è—Ö
 *               description:
 *                 type: string
 *                 description: –û–ø–∏—Å –ø–ª–∞—Ç–µ–∂—É
 *               currency:
 *                 type: string
 *                 enum: [UAH, USD, EUR]
 *                 default: UAH
 *               customerEmail:
 *                 type: string
 *                 format: email
 *                 description: Email –ø–ª–∞—Ç–Ω–∏–∫–∞
 *               customerPhone:
 *                 type: string
 *                 description: –¢–µ–ª–µ—Ñ–æ–Ω –ø–ª–∞—Ç–Ω–∏–∫–∞
 *               registrationData:
 *                 type: object
 *                 description: –î–∞–Ω—ñ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –Ω–∞ –∑–º–∞–≥–∞–Ω–Ω—è
 *     responses:
 *       200:
 *         description: –ü–ª–∞—Ç—ñ–∂ —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 data:
 *                   type: object
 *                   properties:
 *                     paymentId:
 *                       type: string
 *                     orderId:
 *                       type: string
 *                     liqpayData:
 *                       type: string
 *                     liqpaySignature:
 *                       type: string
 *                     paymentUrl:
 *                       type: string
 *                     amount:
 *                       type: number
 *                     currency:
 *                       type: string
 *                 message:
 *                   type: string
 *       400:
 *         $ref: '#/components/responses/400'
 *       401:
 *         $ref: '#/components/responses/401'
 *       500:
 *         $ref: '#/components/responses/500'
 */

export async function POST(request: NextRequest) {
  try {
    console.log('üí≥ POST /api/payments/create - —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É');

    // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ –∑–∞–ø–∏—Ç—É
    const {
      competitionId,
      amount,
      description,
      currency = 'UAH',
      customerEmail,
      customerPhone,
      registrationData
    } = await request.json();

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
    if (!competitionId || !amount || !description) {
      return NextResponse.json({
        success: false,
        error: '–û–±–æ–≤\'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è: competitionId, amount, description'
      }, { status: 400 });
    }

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Å—É–º–∏
    if (typeof amount !== 'number' || amount <= 0) {
      return NextResponse.json({
        success: false,
        error: '–°—É–º–∞ –ø–ª–∞—Ç–µ–∂—É –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º –±—ñ–ª—å—à–µ 0'
      }, { status: 400 });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –∑–º–∞–≥–∞–Ω–Ω—è
    const competitions = await executeQuery<any>(`
      SELECT id, title, registration_fee, status, registration_deadline
      FROM competitions
      WHERE id = ?
    `, [competitionId]);

    if (competitions.length === 0) {
      return NextResponse.json({
        success: false,
        error: '–ó–º–∞–≥–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
      }, { status: 404 });
    }

    const competition = competitions[0];

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å –∑–º–∞–≥–∞–Ω–Ω—è
    if (competition.status !== 'registration_open') {
      return NextResponse.json({
        success: false,
        error: '–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–∞ —Ü–µ –∑–º–∞–≥–∞–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç–∞'
      }, { status: 400 });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–µ–¥–ª–∞–π–Ω —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
    if (competition.registration_deadline && new Date(competition.registration_deadline) < new Date()) {
      return NextResponse.json({
        success: false,
        error: '–¢–µ—Ä–º—ñ–Ω —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –Ω–∞ –∑–º–∞–≥–∞–Ω–Ω—è –º–∏–Ω—É–≤'
      }, { status: 400 });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—É–º—É –≤—ñ–¥–Ω–æ—Å–Ω–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ–π–Ω–æ–≥–æ –∑–±–æ—Ä—É
    if (competition.registration_fee && amount < competition.registration_fee) {
      return NextResponse.json({
        success: false,
        error: `–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞ –ø–ª–∞—Ç–µ–∂—É: ${competition.registration_fee} ‚Ç¥`
      }, { status: 400 });
    }

    // –°—Ç–≤–æ—Ä—é—î–º–æ LiqPay —Å–µ—Ä–≤—ñ—Å
    const liqPayService = createLiqPayService();

    // –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ ID
    const paymentId = uuidv4();
    const orderId = `FUSAF_${Date.now()}_${paymentId.substring(0, 8)}`;

    // –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è LiqPay
    const paymentData = {
      amount: amount,
      currency: currency,
      description: description,
      order_id: orderId,
      result_url: `${process.env.NEXTAUTH_URL}/payments/result?orderId=${orderId}`,
      server_url: `${process.env.NEXTAUTH_URL}/api/payments/callback`,
      language: 'uk',
      customer: customerEmail || '',
      email: customerEmail || '',
      phone: customerPhone || '',
      expired_date: new Date(Date.now() + 30 * 60 * 1000).toISOString(), // 30 —Ö–≤–∏–ª–∏–Ω
      product_category: 'sport',
      product_description: `–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–∞ –∑–º–∞–≥–∞–Ω–Ω—è: ${competition.title}`,
      product_name: competition.title,
      product_url: `${process.env.NEXTAUTH_URL}/competitions/${competitionId}`
    };

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –ø–ª–∞—Ç–µ–∂—É
    const validation = liqPayService.validatePaymentData(paymentData);
    if (!validation.isValid) {
      return NextResponse.json({
        success: false,
        error: '–ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö –ø–ª–∞—Ç–µ–∂—É',
        details: validation.errors
      }, { status: 400 });
    }

    // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–ª–∞—Ç—ñ–∂ –≤ LiqPay
    const liqPayPayment = liqPayService.createPayment(paymentData);

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–ª–∞—Ç—ñ–∂ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    await executeQuery(`
      INSERT INTO payments (
        id, order_id, competition_id, amount, currency, description,
        status, payment_method, customer_email, customer_phone,
        registration_data, liqpay_data, liqpay_signature,
        expires_at, created_at, updated_at
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, NOW(), NOW())
    `, [
      paymentId,
      orderId,
      competitionId,
      amount,
      currency,
      description,
      'pending',
      'liqpay',
      customerEmail || null,
      customerPhone || null,
      JSON.stringify(registrationData || {}),
      liqPayPayment.data,
      liqPayPayment.signature,
      new Date(Date.now() + 30 * 60 * 1000) // 30 —Ö–≤–∏–ª–∏–Ω
    ]);

    console.log('‚úÖ –ü–ª–∞—Ç—ñ–∂ —Å—Ç–≤–æ—Ä–µ–Ω–æ:', orderId, '–Ω–∞ —Å—É–º—É:', amount, currency);

    return NextResponse.json({
      success: true,
      data: {
        paymentId: paymentId,
        orderId: orderId,
        liqpayData: liqPayPayment.data,
        liqpaySignature: liqPayPayment.signature,
        paymentUrl: liqPayPayment.form_url,
        amount: amount,
        currency: currency,
        description: description,
        competitionTitle: competition.title,
        expiresAt: new Date(Date.now() + 30 * 60 * 1000).toISOString()
      },
      message: '–ü–ª–∞—Ç—ñ–∂ —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ'
    });

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É:', error);

    return NextResponse.json({
      success: false,
      error: '–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É',
      details: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'
    }, { status: 500 });
  }
}

// –°—Ç–≤–æ—Ä–∏–º–æ —Ç–∞–±–ª–∏—Ü—é –¥–ª—è –ø–ª–∞—Ç–µ–∂—ñ–≤, —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
async function ensurePaymentsTable() {
  try {
    await executeQuery(`
      CREATE TABLE IF NOT EXISTS payments (
        id VARCHAR(36) PRIMARY KEY,
        order_id VARCHAR(100) UNIQUE NOT NULL,
        competition_id VARCHAR(36),

        # –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–ª–∞—Ç—ñ–∂
        amount DECIMAL(10,2) NOT NULL,
        currency VARCHAR(3) DEFAULT 'UAH',
        description TEXT NOT NULL,
        status ENUM('pending', 'processing', 'success', 'failed', 'expired', 'cancelled') DEFAULT 'pending',
        payment_method VARCHAR(50) DEFAULT 'liqpay',

        # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–ª—ñ—î–Ω—Ç–∞
        customer_email VARCHAR(255),
        customer_phone VARCHAR(50),
        customer_user_id VARCHAR(36),

        # LiqPay —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ –¥–∞–Ω—ñ
        liqpay_payment_id VARCHAR(100),
        liqpay_transaction_id VARCHAR(100),
        liqpay_data TEXT,
        liqpay_signature VARCHAR(255),
        liqpay_status VARCHAR(50),
        liqpay_err_code VARCHAR(10),
        liqpay_err_description TEXT,

        # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ
        registration_data JSON,
        callback_data JSON,

        # –ë–∞–Ω–∫—ñ–≤—Å—å–∫—ñ –¥–∞–Ω—ñ (—è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω—ñ)
        sender_card_mask VARCHAR(20),
        sender_card_bank VARCHAR(100),
        sender_phone VARCHAR(50),

        # –¢–µ—Ä–º—ñ–Ω–∏
        expires_at TIMESTAMP,
        paid_at TIMESTAMP NULL,

        # –°–∏—Å—Ç–µ–º–Ω—ñ –ø–æ–ª—è
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

        # –Ü–Ω–¥–µ–∫—Å–∏
        INDEX idx_order_id (order_id),
        INDEX idx_competition_id (competition_id),
        INDEX idx_status (status),
        INDEX idx_customer_email (customer_email),
        INDEX idx_created_at (created_at),
        INDEX idx_liqpay_payment_id (liqpay_payment_id),

        # –ó–≤'—è–∑–∫–∏
        FOREIGN KEY (competition_id) REFERENCES competitions(id) ON DELETE SET NULL,
        FOREIGN KEY (customer_user_id) REFERENCES users(id) ON DELETE SET NULL
      )
    `);

    console.log('‚úÖ –¢–∞–±–ª–∏—Ü—è payments –≥–æ—Ç–æ–≤–∞');
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ payments:', error);
  }
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Ç–∞–±–ª–∏—Ü—é –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –º–æ–¥—É–ª—è
ensurePaymentsTable();
