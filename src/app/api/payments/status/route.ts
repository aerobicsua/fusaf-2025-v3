import { NextRequest, NextResponse } from 'next/server';
import { executeQuery } from '@/lib/mysql';
import { createLiqPayService } from '@/lib/liqpay';

/**
 * @swagger
 * /api/payments/status:
 *   get:
 *     summary: –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂—É
 *     description: –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂—É –∑–∞ order_id –∞–±–æ payment_id
 *     tags: [Payments]
 *     parameters:
 *       - name: orderId
 *         in: query
 *         description: ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 *         schema:
 *           type: string
 *       - name: paymentId
 *         in: query
 *         description: ID –ø–ª–∞—Ç–µ–∂—É
 *         schema:
 *           type: string
 *       - name: refresh
 *         in: query
 *         description: –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑ LiqPay
 *         schema:
 *           type: boolean
 *           default: false
 *     responses:
 *       200:
 *         description: –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂—É
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 data:
 *                   type: object
 *                   properties:
 *                     paymentId:
 *                       type: string
 *                     orderId:
 *                       type: string
 *                     status:
 *                       type: string
 *                       enum: [pending, processing, success, failed, expired, cancelled]
 *                     liqpayStatus:
 *                       type: string
 *                     amount:
 *                       type: number
 *                     currency:
 *                       type: string
 *                     description:
 *                       type: string
 *                     competitionId:
 *                       type: string
 *                     competitionTitle:
 *                       type: string
 *                     customerEmail:
 *                       type: string
 *                     createdAt:
 *                       type: string
 *                       format: date-time
 *                     paidAt:
 *                       type: string
 *                       format: date-time
 *                     expiresAt:
 *                       type: string
 *                       format: date-time
 *                     isExpired:
 *                       type: boolean
 *                     canRetry:
 *                       type: boolean
 *       400:
 *         $ref: '#/components/responses/400'
 *       404:
 *         description: –ü–ª–∞—Ç—ñ–∂ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
 *       500:
 *         $ref: '#/components/responses/500'
 */

export async function GET(request: NextRequest) {
  try {
    const url = new URL(request.url);
    const orderId = url.searchParams.get('orderId');
    const paymentId = url.searchParams.get('paymentId');
    const refresh = url.searchParams.get('refresh') === 'true';

    console.log('üîç GET /api/payments/status:', { orderId, paymentId, refresh });

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
    if (!orderId && !paymentId) {
      return NextResponse.json({
        success: false,
        error: '–ü–æ—Ç—Ä—ñ–±–µ–Ω orderId –∞–±–æ paymentId'
      }, { status: 400 });
    }

    // –®—É–∫–∞—î–º–æ –ø–ª–∞—Ç—ñ–∂ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    let query = `
      SELECT
        p.id, p.order_id, p.competition_id, p.amount, p.currency, p.description,
        p.status, p.liqpay_status, p.liqpay_payment_id, p.customer_email,
        p.created_at, p.paid_at, p.expires_at, p.liqpay_err_code, p.liqpay_err_description,
        c.title as competition_title
      FROM payments p
      LEFT JOIN competitions c ON p.competition_id = c.id
      WHERE
    `;

    const params: any[] = [];

    if (orderId) {
      query += 'p.order_id = ?';
      params.push(orderId);
    } else {
      query += 'p.id = ?';
      params.push(paymentId);
    }

    const payments = await executeQuery<any>(query, params);

    if (payments.length === 0) {
      return NextResponse.json({
        success: false,
        error: '–ü–ª–∞—Ç—ñ–∂ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
      }, { status: 404 });
    }

    const payment = payments[0];

    // –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑ LiqPay
    if (refresh && payment.order_id && payment.status !== 'success') {
      try {
        console.log('üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∑ LiqPay –¥–ª—è:', payment.order_id);

        const liqPayService = createLiqPayService();
        const liqpayStatus = await liqPayService.checkPaymentStatus(payment.order_id);

        if (liqpayStatus) {
          const newStatus = getPaymentStatus(liqpayStatus.status, liqPayService);

          // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑—ñ
          await executeQuery(`
            UPDATE payments SET
              status = ?,
              liqpay_status = ?,
              liqpay_payment_id = ?,
              liqpay_err_code = ?,
              liqpay_err_description = ?,
              paid_at = ?,
              updated_at = NOW()
            WHERE id = ?
          `, [
            newStatus,
            liqpayStatus.status,
            liqpayStatus.payment_id || null,
            liqpayStatus.err_code || null,
            liqpayStatus.err_description || null,
            liqPayService.isPaymentSuccessful(liqpayStatus.status) ? new Date() : payment.paid_at,
            payment.id
          ]);

          // –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ
          payment.status = newStatus;
          payment.liqpay_status = liqpayStatus.status;
          payment.liqpay_payment_id = liqpayStatus.payment_id;
          payment.liqpay_err_code = liqpayStatus.err_code;
          payment.liqpay_err_description = liqpayStatus.err_description;

          if (liqPayService.isPaymentSuccessful(liqpayStatus.status) && !payment.paid_at) {
            payment.paid_at = new Date();
          }

          console.log('‚úÖ –°—Ç–∞—Ç—É—Å –æ–Ω–æ–≤–ª–µ–Ω–æ:', payment.order_id, '‚Üí', newStatus);
        }
      } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∑ LiqPay:', error);
      }
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–ª–∞—Ç—ñ–∂ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏–π
    const isExpired = payment.expires_at && new Date(payment.expires_at) < new Date();
    const canRetry = ['failed', 'expired', 'cancelled'].includes(payment.status);

    // –§–æ—Ä–º–∞—Ç—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    const responseData = {
      paymentId: payment.id,
      orderId: payment.order_id,
      status: payment.status,
      liqpayStatus: payment.liqpay_status,
      liqpayPaymentId: payment.liqpay_payment_id,
      amount: parseFloat(payment.amount),
      currency: payment.currency,
      description: payment.description,
      competitionId: payment.competition_id,
      competitionTitle: payment.competition_title,
      customerEmail: payment.customer_email,
      createdAt: payment.created_at,
      paidAt: payment.paid_at,
      expiresAt: payment.expires_at,
      isExpired: isExpired,
      canRetry: canRetry,
      statusDescription: getStatusDescription(payment.status),
      errorCode: payment.liqpay_err_code,
      errorDescription: payment.liqpay_err_description
    };

    return NextResponse.json({
      success: true,
      data: responseData,
      message: '–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂—É –æ—Ç—Ä–∏–º–∞–Ω–æ'
    });

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –ø–ª–∞—Ç–µ–∂—É:', error);

    return NextResponse.json({
      success: false,
      error: '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –ø–ª–∞—Ç–µ–∂—É',
      details: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'
    }, { status: 500 });
  }
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç—É—î —Å—Ç–∞—Ç—É—Å LiqPay –≤ —Å—Ç–∞—Ç—É—Å –Ω–∞—à–æ—ó —Å–∏—Å—Ç–µ–º–∏
 */
function getPaymentStatus(liqpayStatus: string, liqPayService: any): string {
  if (liqPayService.isPaymentSuccessful(liqpayStatus)) {
    return 'success';
  } else if (liqPayService.isPaymentFailed(liqpayStatus)) {
    return 'failed';
  } else if (liqPayService.isPaymentPending(liqpayStatus)) {
    return 'processing';
  } else {
    return 'pending';
  }
}

/**
 * –û—Ç—Ä–∏–º–∞—Ç–∏ –æ–ø–∏—Å —Å—Ç–∞—Ç—É—Å—É —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é
 */
function getStatusDescription(status: string): string {
  const descriptions: { [key: string]: string } = {
    'pending': '–û—á—ñ–∫—É—î –æ–ø–ª–∞—Ç–∏',
    'processing': '–û–±—Ä–æ–±–ª—è—î—Ç—å—Å—è',
    'success': '–£—Å–ø—ñ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–æ',
    'failed': '–ü–æ–º–∏–ª–∫–∞ –æ–ø–ª–∞—Ç–∏',
    'expired': '–¢–µ—Ä–º—ñ–Ω —Å–ø–ª–∏–Ω—É–≤',
    'cancelled': '–°–∫–∞—Å–æ–≤–∞–Ω–æ'
  };

  return descriptions[status] || `–ù–µ–≤—ñ–¥–æ–º–∏–π —Å—Ç–∞—Ç—É—Å: ${status}`;
}
