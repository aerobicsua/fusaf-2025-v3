import { NextRequest, NextResponse } from 'next/server';
import { executeQuery } from '@/lib/mysql';
import { createLiqPayService } from '@/lib/liqpay';

/**
 * @swagger
 * /api/payments/callback:
 *   post:
 *     summary: Callback –≤—ñ–¥ LiqPay
 *     description: –û–±—Ä–æ–±–∫–∞ callback –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤—ñ–¥ LiqPay –ø—Ä–æ —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂—É
 *     tags: [Payments]
 *     requestBody:
 *       required: true
 *       content:
 *         application/x-www-form-urlencoded:
 *           schema:
 *             type: object
 *             required:
 *               - data
 *               - signature
 *             properties:
 *               data:
 *                 type: string
 *                 description: Base64 –∑–∞–∫–æ–¥–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ –≤—ñ–¥ LiqPay
 *               signature:
 *                 type: string
 *                 description: –ü—ñ–¥–ø–∏—Å –¥–ª—è –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
 *     responses:
 *       200:
 *         description: Callback –æ–±—Ä–æ–±–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ
 *         content:
 *           text/plain:
 *             schema:
 *               type: string
 *               example: "OK"
 *       400:
 *         description: –ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó callback
 *       500:
 *         description: –í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
 */

export async function POST(request: NextRequest) {
  try {
    console.log('üîÑ POST /api/payments/callback - callback –≤—ñ–¥ LiqPay');

    // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ form-data
    const formData = await request.formData();
    const data = formData.get('data') as string;
    const signature = formData.get('signature') as string;

    if (!data || !signature) {
      console.log('‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ callback');
      return new NextResponse('Missing required parameters', { status: 400 });
    }

    // –°—Ç–≤–æ—Ä—é—î–º–æ LiqPay —Å–µ—Ä–≤—ñ—Å
    const liqPayService = createLiqPayService();

    // –í–µ—Ä–∏—Ñ—ñ–∫—É—î–º–æ –ø—ñ–¥–ø–∏—Å
    const verification = liqPayService.verifyCallback(data, signature);
    if (!verification.isValid || !verification.paymentData) {
      console.log('‚ùå –ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π –ø—ñ–¥–ø–∏—Å callback –≤—ñ–¥ LiqPay');
      return new NextResponse('Invalid signature', { status: 400 });
    }

    const paymentData = verification.paymentData;
    console.log('üì® –û—Ç—Ä–∏–º–∞–Ω–æ callback –≤—ñ–¥ LiqPay:', {
      order_id: paymentData.order_id,
      status: paymentData.status,
      amount: paymentData.amount
    });

    // –®—É–∫–∞—î–º–æ –ø–ª–∞—Ç—ñ–∂ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    const payments = await executeQuery<any>(`
      SELECT id, order_id, competition_id, amount, status, customer_email,
             registration_data, customer_user_id
      FROM payments
      WHERE order_id = ?
    `, [paymentData.order_id]);

    if (payments.length === 0) {
      console.log('‚ùå –ü–ª–∞—Ç—ñ–∂ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ:', paymentData.order_id);
      return new NextResponse('Payment not found', { status: 404 });
    }

    const payment = payments[0];

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–ª–∞—Ç—ñ–∂ –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–∏–π
    if (payment.status === 'success' && liqPayService.isPaymentSuccessful(paymentData.status)) {
      console.log('‚ÑπÔ∏è –ü–ª–∞—Ç—ñ–∂ –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–∏–π:', paymentData.order_id);
      return new NextResponse('OK', { status: 200 });
    }

    // –û–Ω–æ–≤–ª—é—î–º–æ –ø–ª–∞—Ç—ñ–∂ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    const newStatus = getPaymentStatus(paymentData.status, liqPayService);
    await executeQuery(`
      UPDATE payments SET
        status = ?,
        liqpay_payment_id = ?,
        liqpay_transaction_id = ?,
        liqpay_status = ?,
        liqpay_err_code = ?,
        liqpay_err_description = ?,
        callback_data = ?,
        sender_card_mask = ?,
        sender_card_bank = ?,
        sender_phone = ?,
        paid_at = ?,
        updated_at = NOW()
      WHERE order_id = ?
    `, [
      newStatus,
      paymentData.payment_id || null,
      paymentData.transaction_id || null,
      paymentData.status,
      paymentData.err_code || null,
      paymentData.err_description || null,
      JSON.stringify(paymentData),
      paymentData.sender_card_mask2 || null,
      paymentData.sender_card_bank || null,
      paymentData.sender_phone || null,
      liqPayService.isPaymentSuccessful(paymentData.status) ? new Date() : null,
      paymentData.order_id
    ]);

    console.log('‚úÖ –ü–ª–∞—Ç—ñ–∂ –æ–Ω–æ–≤–ª–µ–Ω–æ:', paymentData.order_id, '‚Üí', newStatus);

    // –Ø–∫—â–æ –ø–ª–∞—Ç—ñ–∂ —É—Å–ø—ñ—à–Ω–∏–π - –æ–±—Ä–æ–±–ª—è—î–º–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é
    if (liqPayService.isPaymentSuccessful(paymentData.status)) {
      await processSuccessfulPayment(payment, paymentData);
    }

    // –Ø–∫—â–æ –ø–ª–∞—Ç—ñ–∂ –Ω–µ–≤–¥–∞–ª–∏–π - –ª–æ–≥—É—î–º–æ –ø–æ–º–∏–ª–∫—É
    if (liqPayService.isPaymentFailed(paymentData.status)) {
      console.log('‚ùå –ü–ª–∞—Ç—ñ–∂ –Ω–µ–≤–¥–∞–ª–∏–π:', {
        order_id: paymentData.order_id,
        status: paymentData.status,
        error_code: paymentData.err_code,
        error_description: paymentData.err_description
      });
    }

    // –õ–æ–≥—É—î–º–æ callback –≤ admin logs
    await logPaymentCallback(payment, paymentData, newStatus);

    return new NextResponse('OK', { status: 200 });

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ callback:', error);
    return new NextResponse('Internal server error', { status: 500 });
  }
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç—É—î —Å—Ç–∞—Ç—É—Å LiqPay –≤ —Å—Ç–∞—Ç—É—Å –Ω–∞—à–æ—ó —Å–∏—Å—Ç–µ–º–∏
 */
function getPaymentStatus(liqpayStatus: string, liqPayService: any): string {
  if (liqPayService.isPaymentSuccessful(liqpayStatus)) {
    return 'success';
  } else if (liqPayService.isPaymentFailed(liqpayStatus)) {
    return 'failed';
  } else if (liqPayService.isPaymentPending(liqpayStatus)) {
    return 'processing';
  } else {
    return 'pending';
  }
}

/**
 * –û–±—Ä–æ–±–∫–∞ —É—Å–ø—ñ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂—É
 */
async function processSuccessfulPayment(payment: any, paymentData: any) {
  try {
    console.log('üéâ –û–±—Ä–æ–±–∫–∞ —É—Å–ø—ñ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂—É:', payment.order_id);

    // –ü–∞—Ä—Å–∏–º–æ –¥–∞–Ω—ñ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
    let registrationData = {};
    try {
      registrationData = typeof payment.registration_data === 'string'
        ? JSON.parse(payment.registration_data)
        : payment.registration_data || {};
    } catch (error) {
      console.warn('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É registration_data:', error);
    }

    // –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –Ω–∞ –∑–º–∞–≥–∞–Ω–Ω—è (—è–∫—â–æ —î –¥–∞–Ω—ñ)
    if (payment.competition_id && Object.keys(registrationData).length > 0) {
      const registrationId = require('uuid').v4();

      await executeQuery(`
        INSERT INTO athlete_registrations (
          id, competition_id, athlete_email, category, notes,
          payment_id, registration_status, created_at, updated_at
        ) VALUES (?, ?, ?, ?, ?, ?, ?, NOW(), NOW())
      `, [
        registrationId,
        payment.competition_id,
        payment.customer_email || registrationData.email,
        registrationData.category || 'General',
        `–ü–ª–∞—Ç—ñ–∂ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. Order ID: ${payment.order_id}`,
        payment.id,
        'registered'
      ]);

      console.log('‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é —Å—Ç–≤–æ—Ä–µ–Ω–æ:', registrationId);
    }

    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ email –ø—Ä–æ —É—Å–ø—ñ—à–Ω–∏–π –ø–ª–∞—Ç—ñ–∂
    await sendPaymentSuccessEmail(payment, paymentData);

    // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–º–∞–≥–∞–Ω–Ω—è
    if (payment.competition_id) {
      await updateCompetitionStats(payment.competition_id);
    }

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —É—Å–ø—ñ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂—É:', error);
  }
}

/**
 * –í—ñ–¥–ø—Ä–∞–≤–∫–∞ email –ø—Ä–æ —É—Å–ø—ñ—à–Ω–∏–π –ø–ª–∞—Ç—ñ–∂
 */
async function sendPaymentSuccessEmail(payment: any, paymentData: any) {
  try {
    if (!payment.customer_email) {
      console.log('‚ÑπÔ∏è Email –Ω–µ –≤–∫–∞–∑–∞–Ω–æ –¥–ª—è –ø–ª–∞—Ç–µ–∂—É:', payment.order_id);
      return;
    }

    // –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–º–∞–≥–∞–Ω–Ω—è
    let competitionTitle = '–ó–º–∞–≥–∞–Ω–Ω—è –§–£–°–ê–§';
    if (payment.competition_id) {
      const competitions = await executeQuery<any>(`
        SELECT title FROM competitions WHERE id = ?
      `, [payment.competition_id]);

      if (competitions.length > 0) {
        competitionTitle = competitions[0].title;
      }
    }

    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —á–µ—Ä–µ–∑ API notifications
    await fetch(`${process.env.NEXTAUTH_URL}/api/admin/notifications`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        type: 'payment_success',
        recipients: [{
          email: payment.customer_email,
          name: payment.customer_email
        }],
        template: 'custom',
        customSubject: '–û–ø–ª–∞—Ç–∞ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - –§–£–°–ê–§',
        customMessage: `
–í—ñ—Ç–∞—î–º–æ! –í–∞—à –ø–ª–∞—Ç—ñ–∂ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.

–î–µ—Ç–∞–ª—ñ –ø–ª–∞—Ç–µ–∂—É:
‚Ä¢ –ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${payment.order_id}
‚Ä¢ –°—É–º–∞: ${paymentData.amount} ${paymentData.currency}
‚Ä¢ –ó–º–∞–≥–∞–Ω–Ω—è: ${competitionTitle}
‚Ä¢ –î–∞—Ç–∞: ${new Date().toLocaleDateString('uk-UA')}

–î—è–∫—É—î–º–æ –∑–∞ —É—á–∞—Å—Ç—å —É –∑–º–∞–≥–∞–Ω–Ω—è—Ö –§–£–°–ê–§!

–ó –Ω–∞–π–∫—Ä–∞—â–∏–º–∏ –ø–æ–±–∞–∂–∞–Ω–Ω—è–º–∏,
–ö–æ–º–∞–Ω–¥–∞ –§–£–°–ê–§
        `,
        variables: {
          orderid: payment.order_id,
          amount: paymentData.amount,
          currency: paymentData.currency,
          competitionTitle: competitionTitle
        }
      })
    });

    console.log('üìß Email –ø—Ä–æ —É—Å–ø—ñ—à–Ω–∏–π –ø–ª–∞—Ç—ñ–∂ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ:', payment.customer_email);

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ email –ø—Ä–æ –ø–ª–∞—Ç—ñ–∂:', error);
  }
}

/**
 * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–º–∞–≥–∞–Ω–Ω—è
 */
async function updateCompetitionStats(competitionId: string) {
  try {
    // –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ–ø–ª–∞—á–µ–Ω–∏—Ö —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ–π
    const result = await executeQuery<any>(`
      SELECT COUNT(*) as paid_count
      FROM payments p
      WHERE p.competition_id = ? AND p.status = 'success'
    `);

    const paidCount = result[0]?.paid_count || 0;

    // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–ª–µ current_participants
    await executeQuery(`
      UPDATE competitions
      SET current_participants = ?, updated_at = NOW()
      WHERE id = ?
    `, [paidCount, competitionId]);

    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–º–∞–≥–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ:', competitionId, '‚Üí', paidCount, '—É—á–∞—Å–Ω–∏–∫—ñ–≤');

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–º–∞–≥–∞–Ω–Ω—è:', error);
  }
}

/**
 * –õ–æ–≥—É–≤–∞–Ω–Ω—è callback –≤ admin logs
 */
async function logPaymentCallback(payment: any, paymentData: any, newStatus: string) {
  try {
    await executeQuery(`
      INSERT INTO admin_logs (
        id, admin_id, admin_email, action, target_type, target_id,
        details, ip_address, user_agent, created_at
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, NOW())
    `, [
      require('uuid').v4(),
      'system',
      'system@fusaf.org.ua',
      'PAYMENT_CALLBACK',
      'payment',
      payment.id,
      JSON.stringify({
        order_id: payment.order_id,
        old_status: payment.status,
        new_status: newStatus,
        liqpay_status: paymentData.status,
        amount: paymentData.amount,
        currency: paymentData.currency,
        liqpay_payment_id: paymentData.payment_id
      }),
      'liqpay-server',
      'LiqPay-Callback/1.0'
    ]);

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è callback:', error);
  }
}
