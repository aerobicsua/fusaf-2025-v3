import { NextRequest, NextResponse } from 'next/server';
import { executeQuery } from '@/lib/mysql';

export async function POST(request: NextRequest) {
  try {
    console.log('üîÑ –ú—ñ–≥—Ä–∞—Ü—ñ—è –∫–ª—É–±—ñ–≤ –∑ localStorage –≤ MySQL...');

    const { clubs } = await request.json();

    if (!clubs || !Array.isArray(clubs)) {
      return NextResponse.json({
        success: false,
        error: '–°–ø–∏—Å–æ–∫ –∫–ª—É–±—ñ–≤ –Ω–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–±–æ –Ω–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç'
      }, { status: 400 });
    }

    console.log(`üìä –û—Ç—Ä–∏–º–∞–Ω–æ ${clubs.length} –∫–ª—É–±—ñ–≤ –¥–ª—è –º—ñ–≥—Ä–∞—Ü—ñ—ó`);

    let migratedCount = 0;
    let skippedCount = 0;
    let errorCount = 0;

    for (const club of clubs) {
      try {
        console.log(`üè¢ –û–±—Ä–æ–±–∫–∞ –∫–ª—É–±—É: ${club.name}`);

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–ª—É–± –≤–∂–µ —ñ—Å–Ω—É—î –≤ MySQL
        const existingClubs = await executeQuery(`
          SELECT id FROM clubs WHERE name = ? LIMIT 1
        `, [club.name]);

        if (existingClubs.length > 0) {
          console.log(`‚è≠Ô∏è –ö–ª—É–± "${club.name}" –≤–∂–µ —ñ—Å–Ω—É—î –≤ MySQL, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ`);
          skippedCount++;
          continue;
        }

        // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤–ª–∞—Å–Ω–∏–∫–∞ –∫–ª—É–±—É –∑–∞ email
        let ownerId = null;
        if (club.owner?.email) {
          const ownerUsers = await executeQuery(`
            SELECT id FROM users WHERE email = ? LIMIT 1
          `, [club.owner.email]);

          if (ownerUsers.length > 0) {
            ownerId = ownerUsers[0].id;
          }
        }

        // –Ø–∫—â–æ –≤–ª–∞—Å–Ω–∏–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Å—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–æ–≥–æ
        if (!ownerId) {
          console.log(`üë§ –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–æ–≥–æ –≤–ª–∞—Å–Ω–∏–∫–∞ –¥–ª—è –∫–ª—É–±—É "${club.name}"`);
          ownerId = `user-migrated-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;

          await executeQuery(`
            INSERT INTO users (
              id, email, password_hash, name, roles, status, created_at
            ) VALUES (?, ?, ?, ?, ?, ?, NOW())
          `, [
            ownerId,
            club.owner?.email || `owner-${club.id}@migrated.fusaf`,
            '$2b$10$dummy.hash.for.migrated.user', // Dummy hash
            club.owner?.name || '–ú—ñ–≥—Ä–æ–≤–∞–Ω–∏–π –≤–ª–∞—Å–Ω–∏–∫',
            JSON.stringify(['club_owner']),
            'active'
          ]);
        }

        // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª—É–± –≤ MySQL
        const clubId = club.id || `club-migrated-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;

        await executeQuery(`
          INSERT INTO clubs (
            id, name, type, address, city, region, zip_code,
            description, legal_status, website, owner_id,
            status, approved_at, created_at
          ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, NOW())
        `, [
          clubId,
          club.name || '–ú—ñ–≥—Ä–æ–≤–∞–Ω–∏–π –∫–ª—É–±',
          club.type || 'club',
          club.address || '',
          club.city || '',
          club.region || '',
          club.zipCode || '',
          club.description || '',
          club.legalStatus || '',
          club.website || null,
          ownerId,
          'active',
          club.approvedAt || new Date().toISOString()
        ]);

        console.log(`‚úÖ –ö–ª—É–± "${club.name}" —É—Å–ø—ñ—à–Ω–æ –º—ñ–≥—Ä–æ–≤–∞–Ω–æ –∑ ID: ${clubId}`);
        migratedCount++;

      } catch (clubError) {
        console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –º—ñ–≥—Ä–∞—Ü—ñ—ó –∫–ª—É–±—É "${club.name}":`, clubError);
        errorCount++;
      }
    }

    // –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–ª—É–±—ñ–≤ –ø—ñ—Å–ª—è –º—ñ–≥—Ä–∞—Ü—ñ—ó
    const countResult = await executeQuery(`
      SELECT COUNT(*) as total FROM clubs WHERE status = 'active'
    `);
    const totalClubs = countResult[0]?.total || 0;

    console.log(`üéâ –ú—ñ–≥—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:`);
    console.log(`‚úÖ –ú—ñ–≥—Ä–æ–≤–∞–Ω–æ: ${migratedCount} –∫–ª—É–±—ñ–≤`);
    console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedCount} –∫–ª—É–±—ñ–≤`);
    console.log(`‚ùå –ü–æ–º–∏–ª–æ–∫: ${errorCount} –∫–ª—É–±—ñ–≤`);
    console.log(`üìä –ó–∞–≥–∞–ª–æ–º –∫–ª—É–±—ñ–≤ –≤ MySQL: ${totalClubs}`);

    return NextResponse.json({
      success: true,
      message: '–ú—ñ–≥—Ä–∞—Ü—ñ—è –∫–ª—É–±—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
      results: {
        migrated: migratedCount,
        skipped: skippedCount,
        errors: errorCount,
        totalClubsInDatabase: totalClubs
      }
    });

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –º—ñ–≥—Ä–∞—Ü—ñ—ó:', error);
    return NextResponse.json({
      success: false,
      error: '–ü–æ–º–∏–ª–∫–∞ –º—ñ–≥—Ä–∞—Ü—ñ—ó –∫–ª—É–±—ñ–≤',
      details: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'
    }, { status: 500 });
  }
}

// GET –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π –∑ –º—ñ–≥—Ä–∞—Ü—ñ—ó
export async function GET() {
  return NextResponse.json({
    description: 'API –¥–ª—è –º—ñ–≥—Ä–∞—Ü—ñ—ó –∫–ª—É–±—ñ–≤ –∑ localStorage –≤ MySQL',
    usage: 'POST –∑ –º–∞—Å–∏–≤–æ–º –∫–ª—É–±—ñ–≤ —É —Ñ–æ—Ä–º–∞—Ç—ñ { clubs: [...] }',
    example: {
      method: 'POST',
      body: {
        clubs: [
          {
            id: 'club-123',
            name: '–ù–∞–∑–≤–∞ –∫–ª—É–±—É',
            type: 'club',
            address: '–ê–¥—Ä–µ—Å–∞',
            city: '–ú—ñ—Å—Ç–æ',
            region: '–û–±–ª–∞—Å—Ç—å',
            zipCode: '12345',
            description: '–û–ø–∏—Å',
            legalStatus: '–¢–û–í',
            website: 'https://site.com',
            owner: {
              name: '–Ü–º\'—è –≤–ª–∞—Å–Ω–∏–∫–∞',
              email: 'email@example.com',
              phone: '+380501234567'
            },
            approvedAt: '2025-01-24T...',
            status: 'active'
          }
        ]
      }
    }
  });
}
