import { NextRequest, NextResponse } from 'next/server';
import { getApiSession } from '@/lib/auth';
// authOptions removed
import { z } from 'zod';

// Zod —Å—Ö–µ–º–∏ –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –ø—Ä–æ—Ñ—ñ–ª—é –≤–ª–∞—Å–Ω–∏–∫–∞ –∫–ª—É–±—É
const clubOwnerProfileSchema = z.object({
  firstName: z.string().min(1, "–Ü–º'—è –æ–±–æ–≤'—è–∑–∫–æ–≤–µ").max(50, "–Ü–º'—è –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–µ"),
  lastName: z.string().min(1, "–ü—Ä—ñ–∑–≤–∏—â–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–µ").max(50, "–ü—Ä—ñ–∑–≤–∏—â–µ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–µ"),
  middleName: z.string().max(50, "–ü–æ –±–∞—Ç—å–∫–æ–≤—ñ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–µ").optional(),
  position: z.string().min(1, "–ü–æ—Å–∞–¥–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–∞").max(100, "–ù–∞–∑–≤–∞ –ø–æ—Å–∞–¥–∏ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∞"),
  email: z.string().email("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç email"),
  phone: z.string().min(1, "–¢–µ–ª–µ—Ñ–æ–Ω –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π").regex(/^\+380\d{9}$/, "–¢–µ–ª–µ—Ñ–æ–Ω –º–∞—î –±—É—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç—ñ +380XXXXXXXXX"),
  region: z.string().min(1, "–û–±–ª–∞—Å—Ç—å –æ–±–æ–≤'—è–∑–∫–æ–≤–∞"),
  city: z.string().min(1, "–ú—ñ—Å—Ç–æ –æ–±–æ–≤'—è–∑–∫–æ–≤–µ").max(100, "–ù–∞–∑–≤–∞ –º—ñ—Å—Ç–∞ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∞"),
  address: z.string().min(1, "–ê–¥—Ä–µ—Å–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–∞").max(200, "–ê–¥—Ä–µ—Å–∞ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∞"),

  // –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–ª—É–±
  clubName: z.string().min(1, "–ù–∞–∑–≤–∞ –∫–ª—É–±—É –æ–±–æ–≤'—è–∑–∫–æ–≤–∞").max(200, "–ù–∞–∑–≤–∞ –∫–ª—É–±—É –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∞"),
  clubAddress: z.string().min(1, "–ê–¥—Ä–µ—Å–∞ –∫–ª—É–±—É –æ–±–æ–≤'—è–∑–∫–æ–≤–∞").max(300, "–ê–¥—Ä–µ—Å–∞ –∫–ª—É–±—É –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∞"),
  clubDescription: z.string().max(1000, "–û–ø–∏—Å –∫–ª—É–±—É –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π").optional(),
  clubHistory: z.string().max(2000, "–Ü—Å—Ç–æ—Ä—ñ—è –∫–ª—É–±—É –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∞").optional(),
  legalStatus: z.string().min(1, "–ü—Ä–∞–≤–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π"),
  registrationNumber: z.string().max(50, "–ù–æ–º–µ—Ä —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π").optional(),
  foundingDate: z.string().optional(),
  website: z.string().url("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤–µ–±-—Å–∞–π—Ç—É").optional().or(z.literal("")),

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–±—á–∏—Å–ª—é–≤–∞–Ω—ñ –ø–æ–ª—è
  fullName: z.string().optional(),
  yearsActive: z.number().optional()
});

const updateClubOwnerProfileSchema = z.object({
  clubOwnerId: z.string().min(1, "ID –≤–ª–∞—Å–Ω–∏–∫–∞ –∫–ª—É–±—É –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π"),
  updates: clubOwnerProfileSchema.partial()
});

// –ü–æ–∫—Ä–∞—â–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ email –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –≤–ª–∞—Å–Ω–∏–∫–∞ –∫–ª—É–±—É
async function sendClubOwnerProfileUpdateNotification(profile: any, updatedFields: string[]) {
  const emailData = {
    to: profile.email,
    subject: '–ü—Ä–æ—Ñ—ñ–ª—å –≤–ª–∞—Å–Ω–∏–∫–∞ –∫–ª—É–±—É –§–£–°–ê–§ –æ–Ω–æ–≤–ª–µ–Ω–æ',
    html: `
      <h2>–í—ñ—Ç–∞—î–º–æ, ${profile.fullName}!</h2>

      <p>–í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å –≤–ª–∞—Å–Ω–∏–∫–∞ –∫–ª—É–±—É "${profile.clubName}" –≤ –§–£–°–ê–§ –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ.</p>

      <div style="background: #f8f9fa; padding: 15px; border-radius: 8px; margin: 20px 0;">
        <h3>üìù –û–Ω–æ–≤–ª–µ–Ω—ñ –ø–æ–ª—è:</h3>
        <ul>
          ${updatedFields.map(field => `<li><strong>${field}</strong></li>`).join('')}
        </ul>
        <p><strong>–î–∞—Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:</strong> ${new Date().toLocaleString('uk-UA')}</p>
      </div>

      <div style="background: #e3f2fd; padding: 15px; border-radius: 8px; margin: 20px 0;">
        <h3>üè¢ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–ª—É–±:</h3>
        <ul>
          <li><strong>–ù–∞–∑–≤–∞:</strong> ${profile.clubName}</li>
          <li><strong>–ê–¥—Ä–µ—Å–∞:</strong> ${profile.clubAddress}</li>
          <li><strong>–°—Ç–∞—Ç—É—Å:</strong> ${profile.legalStatus}</li>
          ${profile.website ? `<li><strong>–í–µ–±-—Å–∞–π—Ç:</strong> <a href="${profile.website}">${profile.website}</a></li>` : ''}
        </ul>
      </div>

      <p>üîí <strong>–ë–µ–∑–ø–µ–∫–∞:</strong> –Ø–∫—â–æ —Ü—ñ –∑–º—ñ–Ω–∏ –∑—Ä–æ–±–∏–ª–∏ –Ω–µ –≤–∏, –Ω–µ–≥–∞–π–Ω–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ —Å–ª—É–∂–±–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.</p>

      <p>–í–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–≤—ñ–π –æ–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å –∫–ª—É–±—É –≤ –ø–∞–Ω–µ–ª—ñ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è.</p>

      <p>–ó –ø–æ–≤–∞–≥–æ—é,<br>–ö–æ–º–∞–Ω–¥–∞ –§–£–°–ê–§</p>

      <hr>
      <p style="color: #666; font-size: 12px;">
        –§–µ–¥–µ—Ä–∞—Ü—ñ—è –£–∫—Ä–∞—ó–Ω–∏ –∑—ñ –°–ø–æ—Ä—Ç–∏–≤–Ω–æ—ó –ê–µ—Ä–æ–±—ñ–∫–∏ —ñ –§—ñ—Ç–Ω–µ—Å—É<br>
        Email: info@fusaf.org.ua | –¢–µ–ª–µ—Ñ–æ–Ω: +38 (050) 123-45-67
      </p>
    `
  };

  // –í —Ä–µ–∞–ª—å–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—ñ —Ç—É—Ç –±—É–¥–µ Resend –∞–±–æ SendGrid
  console.log(`üìß EMAIL –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø –ü–†–û –û–ù–û–í–õ–ï–ù–ù–Ø –ü–†–û–§–Ü–õ–Æ –ö–õ–£–ë–£:`);
  console.log(`‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ`);
  console.log(`–î–æ: ${emailData.to}`);
  console.log(`–¢–µ–º–∞: ${emailData.subject}`);
  console.log(`–ö–ª—É–±: ${profile.clubName}`);
  console.log(`–û–Ω–æ–≤–ª–µ–Ω—ñ –ø–æ–ª—è: ${updatedFields.join(', ')}`);
  console.log(`–ß–∞—Å –≤—ñ–¥–ø—Ä–∞–≤–∫–∏: ${new Date().toISOString()}`);
  console.log(`‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ`);

  // TODO: –ü—ñ–¥–∫–ª—é—á–∏—Ç–∏ —Ä–µ–∞–ª—å–Ω–∏–π email —Å–µ—Ä–≤—ñ—Å
  // await emailService.send(emailData);
}

// –¢–∏–º—á–∞—Å–æ–≤–µ —Å—Ö–æ–≤–∏—â–µ –ø—Ä–æ—Ñ—ñ–ª—ñ–≤ –≤–ª–∞—Å–Ω–∏–∫—ñ–≤ –∫–ª—É–±—ñ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—ñ - –±–∞–∑–∞ –¥–∞–Ω–∏—Ö)
const clubOwnerProfiles = new Map<string, any>();

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
if (clubOwnerProfiles.size === 0) {
  clubOwnerProfiles.set('club-owner-1705234567890', {
    id: "club-owner-1705234567890",
    userId: "1",
    firstName: "–û–ª–µ–Ω–∞",
    lastName: "–ü–µ—Ç—Ä–µ–Ω–∫–æ",
    middleName: "–Ü–≤–∞–Ω—ñ–≤–Ω–∞",
    fullName: "–ü–µ—Ç—Ä–µ–Ω–∫–æ –û–ª–µ–Ω–∞ –Ü–≤–∞–Ω—ñ–≤–Ω–∞",
    position: "–î–∏—Ä–µ–∫—Ç–æ—Ä –∫–ª—É–±—É",
    email: "elena.petrenko@example.com",
    phone: "+380671234567",
    region: "–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
    city: "–ö–∏—ó–≤",
    address: "–≤—É–ª. –°–ø–æ—Ä—Ç–∏–≤–Ω–∞, 15, –æ—Ñ. 201",

    clubName: "–°–ö –ö–∏—ó–≤ –ê–µ—Ä–æ–±—ñ–∫",
    clubAddress: "–≤—É–ª. –°–ø–æ—Ä—Ç–∏–≤–Ω–∞, 15, –ö–∏—ó–≤",
    clubDescription: "–ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π –∫–ª—É–± —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ—ó –∞–µ—Ä–æ–±—ñ–∫–∏ –∑ 15-—Ä—ñ—á–Ω–æ—é —ñ—Å—Ç–æ—Ä—ñ—î—é",
    clubHistory: "–ó–∞—Å–Ω–æ–≤–∞–Ω–∏–π —É 2009 —Ä–æ—Ü—ñ, –∫–ª—É–± –ø—ñ–¥–≥–æ—Ç—É–≤–∞–≤ –ø–æ–Ω–∞–¥ 200 —Å–ø–æ—Ä—Ç—Å–º–µ–Ω—ñ–≤",
    legalStatus: "–¢–û–í",
    registrationNumber: "12345678",
    foundingDate: "2009-03-15",
    website: "https://kyiv-aerobic.com.ua",

    membersCount: 45,
    coachesCount: 8,
    achievementsCount: 23,
    yearsActive: 15,

    photoUrl: null,
    documents: {
      registration: null,
      license: null,
      insurance: null
    },

    membershipPaid: true,
    membershipExpiryDate: "2025-12-31",
    status: "active",
    registrationDate: "2024-01-15T10:30:00Z",
    lastUpdated: new Date().toISOString()
  });

  // –î–æ–¥–∞—î–º–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ä–æ–ª–ª—é club_owner
  clubOwnerProfiles.set('club-owner-2', {
    id: "club-owner-2",
    userId: "3",
    firstName: "–¢–µ—Å—Ç–æ–≤–∏–π",
    lastName: "–í–ª–∞—Å–Ω–∏–∫",
    middleName: "",
    fullName: "–í–ª–∞—Å–Ω–∏–∫ –¢–µ—Å—Ç–æ–≤–∏–π",
    position: "–ó–∞—Å–Ω–æ–≤–Ω–∏–∫",
    email: "club-owner@fusaf.org.ua",
    phone: "+380501234567",
    region: "–º. –ö–∏—ó–≤",
    city: "–ö–∏—ó–≤",
    address: "–≤—É–ª. –¢–µ—Å—Ç–æ–≤–∞, 10, –æ—Ñ. 5",

    clubName: "–°–ö –¢–µ—Å—Ç–æ–≤–∏–π –ö–ª—É–±",
    clubAddress: "–≤—É–ª. –¢–µ—Å—Ç–æ–≤–∞, 10, –ö–∏—ó–≤",
    clubDescription: "–¢–µ—Å—Ç–æ–≤–∏–π –∫–ª—É–± –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É",
    clubHistory: "–°—Ç–≤–æ—Ä–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ –§–£–°–ê–§",
    legalStatus: "–§–û–ü",
    registrationNumber: "87654321",
    foundingDate: "2020-01-01",
    website: "",

    membersCount: 12,
    coachesCount: 3,
    achievementsCount: 5,
    yearsActive: 4,

    photoUrl: null,
    documents: {
      registration: null,
      license: null,
      insurance: null
    },

    membershipPaid: true,
    membershipExpiryDate: "2025-12-31",
    status: "active",
    registrationDate: "2024-02-01T12:00:00Z",
    lastUpdated: new Date().toISOString()
  });
}

// GET - –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –≤–ª–∞—Å–Ω–∏–∫–∞ –∫–ª—É–±—É
export async function GET(request: NextRequest) {
  try {
    const session = await getApiSession(request);

    if (!session || !session.user) {
      return NextResponse.json(
        { error: '–ù–µ–æ–±—Ö—ñ–¥–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è' },
        { status: 401 }
      );
    }

    const url = new URL(request.url);
    const clubOwnerId = url.searchParams.get('clubOwnerId');

    let profile = null;

    if (clubOwnerId) {
      // –®—É–∫–∞—î–º–æ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É ID
      profile = clubOwnerProfiles.get(clubOwnerId);
    } else {
      // –®—É–∫–∞—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å –ø–æ userId –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      for (const [id, p] of clubOwnerProfiles.entries()) {
        if (p.userId === session.user.id) {
          profile = p;
          break;
        }
      }
    }

    if (!profile) {
      return NextResponse.json(
        { error: '–ü—Ä–æ—Ñ—ñ–ª—å –≤–ª–∞—Å–Ω–∏–∫–∞ –∫–ª—É–±—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' },
        { status: 404 }
      );
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø—É (–≤–ª–∞—Å–Ω–∏–∫ –º–æ–∂–µ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å)
    const isOwner = profile.userId === session.user.id;
    const isAdmin = session.user.roles?.includes('admin');

    if (!isOwner && !isAdmin) {
      return NextResponse.json(
        { error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Ü—å–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é' },
        { status: 403 }
      );
    }

    console.log('‚úÖ –ü—Ä–æ—Ñ—ñ–ª—å –≤–ª–∞—Å–Ω–∏–∫–∞ –∫–ª—É–±—É –æ—Ç—Ä–∏–º–∞–Ω–æ:', profile.fullName, '-', profile.clubName);

    return NextResponse.json({
      success: true,
      profile: profile
    });

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –≤–ª–∞—Å–Ω–∏–∫–∞ –∫–ª—É–±—É:', error);
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}

// PUT - –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –≤–ª–∞—Å–Ω–∏–∫–∞ –∫–ª—É–±—É –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–æ—é –≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é
export async function PUT(request: NextRequest) {
  try {
    const session = await getApiSession(request);

    if (!session || !session.user) {
      return NextResponse.json(
        { error: '–ù–µ–æ–±—Ö—ñ–¥–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è' },
        { status: 401 }
      );
    }

    const data = await request.json();
    console.log('üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –≤–ª–∞—Å–Ω–∏–∫–∞ –∫–ª—É–±—É:', data);

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö —á–µ—Ä–µ–∑ Zod
    const validationResult = updateClubOwnerProfileSchema.safeParse(data);

    if (!validationResult.success) {
      const errors = validationResult.error.issues.map(err =>
        `${err.path.join('.')}: ${err.message}`
      ).join(', ');

      return NextResponse.json(
        { error: `–ü–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó: ${errors}` },
        { status: 400 }
      );
    }

    const { clubOwnerId, updates } = validationResult.data;

    const existingProfile = clubOwnerProfiles.get(clubOwnerId);

    if (!existingProfile) {
      return NextResponse.json(
        { error: '–ü—Ä–æ—Ñ—ñ–ª—å –≤–ª–∞—Å–Ω–∏–∫–∞ –∫–ª—É–±—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' },
        { status: 404 }
      );
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø—É
    const isOwner = existingProfile.userId === session.user.id;
    const isAdmin = session.user.roles?.includes('admin');

    if (!isOwner && !isAdmin) {
      return NextResponse.json(
        { error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ü—å–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é' },
        { status: 403 }
      );
    }

    // –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø–æ–≤–Ω–æ–≥–æ —ñ–º–µ–Ω—ñ
    const firstName = updates.firstName || existingProfile.firstName;
    const lastName = updates.lastName || existingProfile.lastName;
    const middleName = updates.middleName || existingProfile.middleName;

    if (updates.firstName || updates.lastName || updates.middleName !== undefined) {
      updates.fullName = `${lastName} ${firstName}` + (middleName ? ` ${middleName}` : '');
    }

    // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ä–æ–∫—ñ–≤ –¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ –∫–ª—É–±—É
    if (updates.foundingDate) {
      const foundingYear = new Date(updates.foundingDate).getFullYear();
      const currentYear = new Date().getFullYear();
      updates.yearsActive = Math.max(0, currentYear - foundingYear);
    }

    // –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å
    const updatedProfile = {
      ...existingProfile,
      ...updates,
      lastUpdated: new Date().toISOString()
    };

    clubOwnerProfiles.set(clubOwnerId, updatedProfile);

    const updatedFields = Object.keys(updates).filter(key =>
      key !== 'fullName' && key !== 'yearsActive'
    );

    console.log('‚úÖ –ü—Ä–æ—Ñ—ñ–ª—å –≤–ª–∞—Å–Ω–∏–∫–∞ –∫–ª—É–±—É –æ–Ω–æ–≤–ª–µ–Ω–æ:', updatedProfile.fullName, '-', updatedProfile.clubName);
    console.log('üìù –û–Ω–æ–≤–ª–µ–Ω—ñ –ø–æ–ª—è:', updatedFields);

    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ email –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await sendClubOwnerProfileUpdateNotification(updatedProfile, updatedFields);

    return NextResponse.json({
      success: true,
      message: '–ü—Ä–æ—Ñ—ñ–ª—å –≤–ª–∞—Å–Ω–∏–∫–∞ –∫–ª—É–±—É —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ',
      profile: updatedProfile,
      updatedFields: updatedFields
    });

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –≤–ª–∞—Å–Ω–∏–∫–∞ –∫–ª—É–±—É:', error);
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}

// DELETE - –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤)
export async function DELETE(request: NextRequest) {
  try {
    const session = await getApiSession(request);

    if (!session || !session.user) {
      return NextResponse.json(
        { error: '–ù–µ–æ–±—Ö—ñ–¥–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è' },
        { status: 401 }
      );
    }

    // –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –º–æ–∂—É—Ç—å –≤–∏–¥–∞–ª—è—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—ñ
    if (!session.user.roles?.includes('admin')) {
      return NextResponse.json(
        { error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é' },
        { status: 403 }
      );
    }

    const { clubOwnerId } = await request.json();

    if (!clubOwnerId) {
      return NextResponse.json(
        { error: '–ù–µ –≤–∫–∞–∑–∞–Ω–æ ID –≤–ª–∞—Å–Ω–∏–∫–∞ –∫–ª—É–±—É' },
        { status: 400 }
      );
    }

    const profile = clubOwnerProfiles.get(clubOwnerId);

    if (!profile) {
      return NextResponse.json(
        { error: '–ü—Ä–æ—Ñ—ñ–ª—å –≤–ª–∞—Å–Ω–∏–∫–∞ –∫–ª—É–±—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' },
        { status: 404 }
      );
    }

    clubOwnerProfiles.delete(clubOwnerId);

    console.log('üóëÔ∏è –ü—Ä–æ—Ñ—ñ–ª—å –≤–ª–∞—Å–Ω–∏–∫–∞ –∫–ª—É–±—É –≤–∏–¥–∞–ª–µ–Ω–æ:', profile.fullName, '-', profile.clubName);

    return NextResponse.json({
      success: true,
      message: '–ü—Ä–æ—Ñ—ñ–ª—å –≤–ª–∞—Å–Ω–∏–∫–∞ –∫–ª—É–±—É —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ'
    });

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –≤–ª–∞—Å–Ω–∏–∫–∞ –∫–ª—É–±—É:', error);
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}
