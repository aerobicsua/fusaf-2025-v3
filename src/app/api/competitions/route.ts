import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/lib/auth';

// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ–π–Ω—ñ –¥–∞–Ω—ñ –∑–º–∞–≥–∞–Ω—å
const demoCompetitions = [
  {
    id: 'comp-1',
    title: '–ö—É–±–æ–∫ –£–∫—Ä–∞—ó–Ω–∏ –∑—ñ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ—ó –∞–µ—Ä–æ–±—ñ–∫–∏ 2025',
    description: '–û—Ñ—ñ—Ü—ñ–π–Ω—ñ –∑–º–∞–≥–∞–Ω–Ω—è —Ñ–µ–¥–µ—Ä–∞—Ü—ñ—ó –£–∫—Ä–∞—ó–Ω–∏ –∑—ñ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ—ó –∞–µ—Ä–æ–±—ñ–∫–∏ —Ç–∞ —Ñ—ñ—Ç–Ω–µ—Å—É. –ó–º–∞–≥–∞–Ω–Ω—è –ø—Ä–æ–≤–æ–¥—è—Ç—å—Å—è –∑–≥—ñ–¥–Ω–æ –∑ –º—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏ FIG.',
    date: '2025-04-15',
    time: '10:00',
    location: '–ü–∞–ª–∞—Ü —Å–ø–æ—Ä—Ç—É "–£–∫—Ä–∞—ó–Ω–∞"',
    address: '–≤—É–ª. –í–µ–ª–∏–∫–∞ –í–∞—Å–∏–ª—å–∫—ñ–≤—Å—å–∫–∞, 55, –ö–∏—ó–≤, 03150',
    registration_fee: 300,
    entry_fee: 200,
    max_participants: 200,
    registration_deadline: '2025-04-01',
    status: 'registration_open',
    club: {
      name: '–°–ö "–ì—Ä–∞—Ü—ñ—è"',
      city: '–ö–∏—ó–≤'
    },
    preliminary_registrations: [{ count: 5 }],
    individual_registrations: [{ count: 12 }]
  },
  {
    id: 'comp-2',
    title: '–ß–µ–º–ø—ñ–æ–Ω–∞—Ç –õ—å–≤—ñ–≤—Å—å–∫–æ—ó –æ–±–ª–∞—Å—Ç—ñ',
    description: '–†–µ–≥—ñ–æ–Ω–∞–ª—å–Ω–∏–π —á–µ–º–ø—ñ–æ–Ω–∞—Ç –∑ —Ä—ñ–∑–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π —Ç–∞ –≤—ñ–∫–æ–≤–∏—Ö –≥—Ä—É–ø.',
    date: '2025-03-20',
    time: '09:30',
    location: '–°–ø–æ—Ä—Ç–∫–æ–º–ø–ª–µ–∫—Å "–ê—Ä–µ–Ω–∞ –õ—å–≤—ñ–≤"',
    address: '–≤—É–ª. –°—Ç—Ä–∏–π—Å—å–∫–∞, 199, –õ—å–≤—ñ–≤',
    registration_fee: 250,
    entry_fee: 150,
    max_participants: 150,
    registration_deadline: '2025-03-10',
    status: 'registration_open',
    club: {
      name: '–ê–µ—Ä–æ–±—ñ–∫–∞ –õ—å–≤—ñ–≤',
      city: '–õ—å–≤—ñ–≤'
    },
    preliminary_registrations: [{ count: 3 }],
    individual_registrations: [{ count: 8 }]
  },
  {
    id: 'comp-3',
    title: '–ü–µ—Ä—à—ñ—Å—Ç—å –î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–æ—ó –æ–±–ª–∞—Å—Ç—ñ',
    description: '–í—ñ–¥–∫—Ä–∏—Ç–∞ –ø–µ—Ä—à—ñ—Å—Ç—å –¥–ª—è –≤—Å—ñ—Ö –≤—ñ–∫–æ–≤–∏—Ö –≥—Ä—É–ø —Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π.',
    date: '2025-05-10',
    time: '11:00',
    location: '–ü–ö "–ú–µ—Ç–µ–æ—Ä"',
    address: '–ø—Ä. –ì–∞–≥–∞—Ä—ñ–Ω–∞, 99, –î–Ω—ñ–ø—Ä–æ',
    registration_fee: 200,
    entry_fee: 100,
    max_participants: 120,
    registration_deadline: '2025-04-25',
    status: 'published',
    club: {
      name: '–§—ñ—Ç–Ω–µ—Å-–î–∏–Ω–∞–º—ñ–∫–∞',
      city: '–î–Ω—ñ–ø—Ä–æ'
    },
    preliminary_registrations: [{ count: 2 }],
    individual_registrations: [{ count: 4 }]
  }
];

// GET /api/competitions - –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∑–º–∞–≥–∞–Ω—å
export async function GET(request: NextRequest) {
  try {
    const searchParams = request.nextUrl.searchParams;
    const status = searchParams.get('status');
    const clubId = searchParams.get('club_id');

    let competitions = [...demoCompetitions];

    // –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º
    if (status && status !== 'all') {
      competitions = competitions.filter(comp => comp.status === status);
    }

    // –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ –∫–ª—É–±–æ–º
    if (clubId) {
      competitions = competitions.filter(comp => comp.id === clubId);
    }

    return NextResponse.json({
      success: true,
      competitions,
      message: 'üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ–π–Ω—ñ –¥–∞–Ω—ñ –∑–º–∞–≥–∞–Ω—å. –í —Ä–µ–∞–ª—å–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—ñ –¥–∞–Ω—ñ –±—É–¥—É—Ç—å –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.'
    });

  } catch (error) {
    console.error('Competitions API error:', error);
    return NextResponse.json(
      { error: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}

// POST /api/competitions - —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∑–º–∞–≥–∞–Ω–Ω—è
export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);

    if (!session) {
      return NextResponse.json(
        { error: '–ù–µ–æ–±—Ö—ñ–¥–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è' },
        { status: 401 }
      );
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø—É - —Ç—ñ–ª—å–∫–∏ –≤–ª–∞—Å–Ω–∏–∫–∏ –∫–ª—É–±—ñ–≤ —Ç–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏
    if (!['club_owner', 'admin'].includes(session.user?.role || '')) {
      return NextResponse.json(
        { error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–º–∞–≥–∞–Ω—å' },
        { status: 403 }
      );
    }

    const competitionData = await request.json();

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
    const requiredFields = ['title', 'date', 'time', 'location', 'registration_deadline'];
    const missingFields = requiredFields.filter(field => !competitionData[field]);

    if (missingFields.length > 0) {
      return NextResponse.json(
        { error: `–í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è: ${missingFields.join(', ')}` },
        { status: 400 }
      );
    }

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ–π–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–º–∞–≥–∞–Ω–Ω—è
    const newCompetition = {
      id: `comp-${Date.now()}`,
      ...competitionData,
      created_by: session.user.id,
      status: 'draft',
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString(),
      club: {
        name: '–¢–µ—Å—Ç–æ–≤–∏–π –∫–ª—É–±',
        city: '–ö–∏—ó–≤'
      },
      preliminary_registrations: [{ count: 0 }],
      individual_registrations: [{ count: 0 }]
    };

    console.log('Demo competition created:', newCompetition);

    return NextResponse.json({
      success: true,
      message: '‚úÖ –ó–º–∞–≥–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ (–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ–π–Ω–∏–π —Ä–µ–∂–∏–º)',
      competition: newCompetition
    });

  } catch (error) {
    console.error('Create competition error:', error);
    return NextResponse.json(
      { error: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}
