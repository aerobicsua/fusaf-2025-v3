import { type NextRequest, NextResponse } from 'next/server';
import { getApiSession } from '@/lib/auth';
// authOptions removed

// –°–∏–º—É–ª—è—Ü—ñ—è –¥–∞–Ω–∏—Ö —É—á–∞—Å–Ω–∏–∫—ñ–≤
const mockParticipants = [
  {
    id: 'p1',
    name: '–Ü–≤–∞–Ω–µ–Ω–∫–æ –ú–∞—Ä—ñ—è',
    lastName: '–Ü–≤–∞–Ω–µ–Ω–∫–æ',
    firstName: '–ú–∞—Ä—ñ—è',
    middleName: '–ü–µ—Ç—Ä—ñ–≤–Ω–∞',
    birthDate: '2008-05-15',
    gender: 'female',
    email: 'maria.ivanenko@email.com',
    phone: '+380 67 123 45 67',
    club: '–°–ö "–ì—Ä–∞—Ü—ñ—è"',
    city: '–ö–∏—ó–≤',
    coach: '–ü–µ—Ç—Ä–µ–Ω–∫–æ –û–ª—å–≥–∞ –í–∞—Å–∏–ª—ñ–≤–Ω–∞',
    program: 'iw',
    category: 'youth',
    registrationType: 'individual',
    registrationDate: '2025-01-15',
    paymentStatus: 'paid',
    medicalCertificate: true,
    insurance: true
  },
  {
    id: 'p2',
    name: '–ö–æ–≤–∞–ª–µ–Ω–∫–æ –ê–Ω–¥—Ä—ñ–π',
    lastName: '–ö–æ–≤–∞–ª–µ–Ω–∫–æ',
    firstName: '–ê–Ω–¥—Ä—ñ–π',
    middleName: '–í–∞—Å–∏–ª—å–æ–≤–∏—á',
    birthDate: '2006-08-22',
    gender: 'male',
    email: 'andriy.kovalenko@email.com',
    phone: '+380 93 987 65 43',
    club: '–ê–µ—Ä–æ–±—ñ–∫–∞ –õ—å–≤—ñ–≤',
    city: '–õ—å–≤—ñ–≤',
    coach: '–°–∏–¥–æ—Ä–µ–Ω–∫–æ –Ü–≥–æ—Ä –ü–µ—Ç—Ä–æ–≤–∏—á',
    program: 'im',
    category: 'juniors',
    registrationType: 'individual',
    registrationDate: '2025-01-18',
    paymentStatus: 'pending',
    medicalCertificate: true,
    insurance: true
  },
  {
    id: 'p3',
    name: '–°—Ç–µ–ø–∞–Ω–µ–Ω–∫–æ –ê–Ω–Ω–∞ & –ú–µ–ª—å–Ω–∏–∫ –û–ª–µ–≥',
    lastName: '–°—Ç–µ–ø–∞–Ω–µ–Ω–∫–æ/–ú–µ–ª—å–Ω–∏–∫',
    firstName: '–ê–Ω–Ω–∞/–û–ª–µ–≥',
    middleName: '',
    birthDate: '2004-03-10 / 2003-11-05',
    gender: 'mixed',
    email: 'pair.stepanenko.melnyk@email.com',
    phone: '+380 50 111 22 33',
    club: '–§—ñ—Ç–Ω–µ—Å-–î–∏–Ω–∞–º—ñ–∫–∞',
    city: '–î–Ω—ñ–ø—Ä–æ',
    coach: '–¢–∏–º–æ—à–µ–Ω–∫–æ –ú–∞—Ä–∏–Ω–∞ –û–ª–µ–∫—Å–∞–Ω–¥—Ä—ñ–≤–Ω–∞',
    program: 'mp',
    category: 'seniors',
    registrationType: 'preliminary',
    registrationDate: '2025-01-20',
    paymentStatus: 'paid',
    medicalCertificate: true,
    insurance: true
  },
  {
    id: 'p4',
    name: '–ö–æ–º–∞–Ω–¥–∞ "–ó—ñ—Ä–æ—á–∫–∏"',
    lastName: '–ö–æ–º–∞–Ω–¥–∞',
    firstName: '–ó—ñ—Ä–æ—á–∫–∏',
    middleName: '',
    birthDate: '2009-07-01 (—Å–µ—Ä–µ–¥–Ω—ñ–π –≤—ñ–∫)',
    gender: 'female',
    email: 'team.zirochky@email.com',
    phone: '+380 44 555 66 77',
    club: '–°–ö "–ì—Ä–∞—Ü—ñ—è"',
    city: '–ö–∏—ó–≤',
    coach: '–®–µ–≤—á–µ–Ω–∫–æ –¢–µ—Ç—è–Ω–∞ –ú–∏–∫–æ–ª–∞—ó–≤–Ω–∞',
    program: 'gr',
    category: 'youth',
    registrationType: 'preliminary',
    registrationDate: '2025-01-12',
    paymentStatus: 'paid',
    medicalCertificate: true,
    insurance: true
  }
];

export async function POST(request: NextRequest) {
  try {
    const session = await getApiSession(request);

    if (!session?.user?.email) {
      return NextResponse.json({
        success: false,
        error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π'
      }, { status: 401 });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∞ - —Ç—ñ–ª—å–∫–∏ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä–∏ –º–æ–∂—É—Ç—å –µ–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ
    const canExport = (session.user as any)?.roles?.some((role: string) =>
      ['admin', 'club_owner', 'coach_judge'].includes(role)
    );

    if (!canExport) {
      return NextResponse.json({
        success: false,
        error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É –¥–∞–Ω–∏—Ö'
      }, { status: 403 });
    }

    const { competitionId, settings } = await request.json();

    if (!competitionId || !settings) {
      return NextResponse.json({
        success: false,
        error: '–ù–µ –≤–∫–∞–∑–∞–Ω–æ ID –∑–º–∞–≥–∞–Ω–Ω—è –∞–±–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –µ–∫—Å–ø–æ—Ä—Ç—É'
      }, { status: 400 });
    }

    // –§—ñ–ª—å—Ç—Ä—É—î–º–æ —É—á–∞—Å–Ω–∏–∫—ñ–≤ –∑–≥—ñ–¥–Ω–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
    let filteredParticipants = [...mockParticipants];

    if (settings.filterBy.program !== 'all') {
      filteredParticipants = filteredParticipants.filter(p => p.program === settings.filterBy.program);
    }

    if (settings.filterBy.category !== 'all') {
      filteredParticipants = filteredParticipants.filter(p => p.category === settings.filterBy.category);
    }

    if (settings.filterBy.registrationType !== 'all') {
      filteredParticipants = filteredParticipants.filter(p => p.registrationType === settings.filterBy.registrationType);
    }

    console.log(`üìä –ï–∫—Å–ø–æ—Ä—Ç —É—á–∞—Å–Ω–∏–∫—ñ–≤ –∑–º–∞–≥–∞–Ω–Ω—è ${competitionId}:`, {
      format: settings.format,
      totalParticipants: filteredParticipants.length,
      filters: settings.filterBy,
      fields: settings.includeFields,
      user: session.user.email
    });

    // –ì–µ–Ω–µ—Ä—É—î–º–æ —Ñ–∞–π–ª –∑–≥—ñ–¥–Ω–æ –æ–±—Ä–∞–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É
    if (settings.format === 'excel') {
      return generateExcelFile(filteredParticipants, settings);
    } else if (settings.format === 'pdf') {
      return generatePDFFile(filteredParticipants, settings);
    } else {
      return NextResponse.json({
        success: false,
        error: '–ù–µ–≤—ñ–¥–æ–º–∏–π —Ñ–æ—Ä–º–∞—Ç –µ–∫—Å–ø–æ—Ä—Ç—É'
      }, { status: 400 });
    }

  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É —É—á–∞—Å–Ω–∏–∫—ñ–≤:', error);
    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    }, { status: 500 });
  }
}

function generateExcelFile(participants: any[], settings: any) {
  // –°–∏–º—É–ª—è—Ü—ñ—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó Excel —Ñ–∞–π–ª—É
  const csvContent = generateCSVContent(participants, settings);

  // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ CSV –≤ blob –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });

  return new NextResponse(blob, {
    headers: {
      'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
      'Content-Disposition': 'attachment; filename="participants.xlsx"'
    }
  });
}

function generatePDFFile(participants: any[], settings: any) {
  // –°–∏–º—É–ª—è—Ü—ñ—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó PDF —Ñ–∞–π–ª—É
  const htmlContent = generateHTMLContent(participants, settings);

  // –í —Ä–µ–∞–ª—å–Ω—ñ–π —Å–∏—Å—Ç–µ–º—ñ —Ç—É—Ç –±–∏ –±—É–ª–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è HTML –≤ PDF
  const blob = new Blob([htmlContent], { type: 'text/html;charset=utf-8;' });

  return new NextResponse(blob, {
    headers: {
      'Content-Type': 'application/pdf',
      'Content-Disposition': 'attachment; filename="participants.pdf"'
    }
  });
}

function generateCSVContent(participants: any[], settings: any): string {
  const headers = [];

  if (settings.includeFields.personalInfo) {
    headers.push('–ü—Ä—ñ–∑–≤–∏—â–µ', '–Ü–º\'—è', '–ü–æ –±–∞—Ç—å–∫–æ–≤—ñ', '–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è', '–°—Ç–∞—Ç—å');
  }

  if (settings.includeFields.contactInfo) {
    headers.push('Email', '–¢–µ–ª–µ—Ñ–æ–Ω');
  }

  if (settings.includeFields.clubInfo) {
    headers.push('–ö–ª—É–±', '–ú—ñ—Å—Ç–æ', '–¢—Ä–µ–Ω–µ—Ä');
  }

  if (settings.includeFields.programInfo) {
    headers.push('–ü—Ä–æ–≥—Ä–∞–º–∞', '–ö–∞—Ç–µ–≥–æ—Ä—ñ—è');
  }

  if (settings.includeFields.paymentInfo) {
    headers.push('–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç–∏', '–î–∞—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó');
  }

  if (settings.includeFields.medicalInfo) {
    headers.push('–ú–µ–¥–∏—á–Ω–∞ –¥–æ–≤—ñ–¥–∫–∞', '–°—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è');
  }

  let csvContent = headers.join(',') + '\n';

  participants.forEach(participant => {
    const row = [];

    if (settings.includeFields.personalInfo) {
      row.push(
        participant.lastName,
        participant.firstName,
        participant.middleName,
        participant.birthDate,
        participant.gender === 'male' ? '–ß–æ–ª–æ–≤—ñ—á–∞' : participant.gender === 'female' ? '–ñ—ñ–Ω–æ—á–∞' : '–ó–º—ñ—à–∞–Ω–∞'
      );
    }

    if (settings.includeFields.contactInfo) {
      row.push(participant.email, participant.phone);
    }

    if (settings.includeFields.clubInfo) {
      row.push(participant.club, participant.city, participant.coach);
    }

    if (settings.includeFields.programInfo) {
      const programNames = {
        'iw': 'Individual Women',
        'im': 'Individual Men',
        'mp': 'Mixed Pairs',
        'tr': 'Trio',
        'gr': 'Group',
        'ad': 'Aerobic Dance',
        'as': 'Aerobic Step'
      };

      const categoryNames = {
        'youth': 'YOUTH / 12-14 YEARS',
        'juniors': 'JUNIORS / 15-17 YEARS',
        'seniors': 'SENIORS 18+ YEARS',
        'nd': 'ND',
        'ndmini': 'NDmini'
      };

      row.push(
        programNames[participant.program as keyof typeof programNames] || participant.program,
        categoryNames[participant.category as keyof typeof categoryNames] || participant.category
      );
    }

    if (settings.includeFields.paymentInfo) {
      row.push(
        participant.paymentStatus === 'paid' ? '–°–ø–ª–∞—á–µ–Ω–æ' : '–û—á—ñ–∫—É—î –æ–ø–ª–∞—Ç–∏',
        participant.registrationDate
      );
    }

    if (settings.includeFields.medicalInfo) {
      row.push(
        participant.medicalCertificate ? '–Ñ' : '–ù–µ–º–∞—î',
        participant.insurance ? '–Ñ' : '–ù–µ–º–∞—î'
      );
    }

    csvContent += row.map(cell => `"${cell}"`).join(',') + '\n';
  });

  return csvContent;
}

function generateHTMLContent(participants: any[], settings: any): string {
  const headers = [];

  if (settings.includeFields.personalInfo) {
    headers.push('–ü—Ä—ñ–∑–≤–∏—â–µ', '–Ü–º\'—è', '–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è');
  }

  if (settings.includeFields.clubInfo) {
    headers.push('–ö–ª—É–±', '–ú—ñ—Å—Ç–æ');
  }

  if (settings.includeFields.programInfo) {
    headers.push('–ü—Ä–æ–≥—Ä–∞–º–∞', '–ö–∞—Ç–µ–≥–æ—Ä—ñ—è');
  }

  let htmlContent = `
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="UTF-8">
      <title>–°–ø–∏—Å–æ–∫ —É—á–∞—Å–Ω–∏–∫—ñ–≤</title>
      <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        h1 { color: #2563eb; text-align: center; }
        table { width: 100%; border-collapse: collapse; margin-top: 20px; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        th { background-color: #f2f2f2; font-weight: bold; }
        .footer { margin-top: 20px; text-align: center; color: #666; font-size: 12px; }
      </style>
    </head>
    <body>
      <h1>–°–ø–∏—Å–æ–∫ —É—á–∞—Å–Ω–∏–∫—ñ–≤ –∑–º–∞–≥–∞–Ω–Ω—è</h1>
      <p>–î–∞—Ç–∞ –µ–∫—Å–ø–æ—Ä—Ç—É: ${new Date().toLocaleDateString('uk-UA')}</p>
      <p>–ö—ñ–ª—å–∫—ñ—Å—Ç—å —É—á–∞—Å–Ω–∏–∫—ñ–≤: ${participants.length}</p>

      <table>
        <thead>
          <tr>
            ${headers.map(header => `<th>${header}</th>`).join('')}
          </tr>
        </thead>
        <tbody>
  `;

  participants.forEach(participant => {
    htmlContent += '<tr>';

    if (settings.includeFields.personalInfo) {
      htmlContent += `<td>${participant.lastName}</td>`;
      htmlContent += `<td>${participant.firstName}</td>`;
      htmlContent += `<td>${participant.birthDate}</td>`;
    }

    if (settings.includeFields.clubInfo) {
      htmlContent += `<td>${participant.club}</td>`;
      htmlContent += `<td>${participant.city}</td>`;
    }

    if (settings.includeFields.programInfo) {
      const programNames = {
        'iw': 'Individual Women',
        'im': 'Individual Men',
        'mp': 'Mixed Pairs',
        'tr': 'Trio',
        'gr': 'Group',
        'ad': 'Aerobic Dance',
        'as': 'Aerobic Step'
      };

      htmlContent += `<td>${programNames[participant.program as keyof typeof programNames] || participant.program}</td>`;
      htmlContent += `<td>${participant.category}</td>`;
    }

    htmlContent += '</tr>';
  });

  htmlContent += `
        </tbody>
      </table>

      <div class="footer">
        <p>–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ —Å–∏—Å—Ç–µ–º–æ—é –§–£–°–ê–§ ‚Ä¢ –§–µ–¥–µ—Ä–∞—Ü—ñ—è –£–∫—Ä–∞—ó–Ω–∏ –∑—ñ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ—ó –∞–µ—Ä–æ–±—ñ–∫–∏ —ñ —Ñ—ñ—Ç–Ω–µ—Å—É</p>
      </div>
    </body>
    </html>
  `;

  return htmlContent;
}
