import { NextRequest, NextResponse } from 'next/server';
import { executeQuery } from '@/lib/mysql';

export async function POST(request: NextRequest) {
  try {
    const { clubId, updatedBy, clubData } = await request.json();

    if (!clubId || !updatedBy || !clubData) {
      return NextResponse.json({
        success: false,
        error: '–î–∞–Ω—ñ –∫–ª—É–±—É, ID –∫–ª—É–±—É —Ç–∞ email –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ'
      }, { status: 400 });
    }

    console.log(`üè¢ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–ª—É–±—É: ${clubData.name} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º: ${updatedBy}`);

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –≤–ª–∞—Å–Ω–∏–∫–æ–º –∫–ª—É–±—É
    const verification = await executeQuery(`
      SELECT id, name, email, club, roles
      FROM users
      WHERE email = ? AND club = ? AND roles LIKE '%club_owner%'
      LIMIT 1
    `, [updatedBy, clubData.name]);

    if (verification.length === 0) {
      console.warn(`‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${updatedBy} –Ω–µ —î –≤–ª–∞—Å–Ω–∏–∫–æ–º –∫–ª—É–±—É ${clubData.name}`);
      return NextResponse.json({
        success: false,
        error: '–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ü—å–æ–≥–æ –∫–ª—É–±—É'
      }, { status: 403 });
    }

    console.log(`‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${updatedBy} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∏–π —è–∫ –≤–ª–∞—Å–Ω–∏–∫ –∫–ª—É–±—É`);

    // –°–ø—Ä–æ–±—É—î–º–æ –æ–Ω–æ–≤–∏—Ç–∏ –≤ —Ç–∞–±–ª–∏—Ü—ñ clubs (—è–∫—â–æ –≤–æ–Ω–∞ —ñ—Å–Ω—É—î)
    try {
      const updateResult = await executeQuery(`
        UPDATE clubs
        SET
          name = ?,
          description = ?,
          address = ?,
          phone = ?,
          email = ?,
          website = ?,
          achievements = ?,
          founded = ?,
          avatar = ?,
          updated_at = NOW()
        WHERE id = ? AND owner_id = ?
      `, [
        clubData.name,
        clubData.description || '',
        clubData.address || '',
        clubData.phone || '',
        clubData.email || '',
        clubData.website || '',
        clubData.achievements || clubData.experience || '', // –ü—ñ–¥—Ç—Ä–∏–º—É—î–º–æ –æ–±–∏–¥–≤–∞ –ø–æ–ª—è
        clubData.founded || null,
        clubData.avatar || '',
        clubId,
        updatedBy
      ]);

      if (Array.isArray(updateResult) && updateResult.length > 0) {
        console.log(`‚úÖ –ö–ª—É–± –æ–Ω–æ–≤–ª–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—ñ clubs`);
        return NextResponse.json({
          success: true,
          message: '–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–ª—É–± —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ'
        });
      }
    } catch (clubTableError) {
      console.warn('‚ö†Ô∏è –¢–∞–±–ª–∏—Ü—è clubs –Ω–µ —ñ—Å–Ω—É—î –∞–±–æ –ø–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è, —Å—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å');
    }

    // –Ø–∫—â–æ —Ç–∞–±–ª–∏—Ü—ñ clubs –Ω–µ–º–∞—î, —Å—Ç–≤–æ—Ä–∏–º–æ —ó—ó —Ç–∞ –∑–∞–ø–∏—Å
    try {
      // –°–ø–æ—á–∞—Ç–∫—É –≤–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—É —Ç–∞–±–ª–∏—Ü—é –∑ –Ω–µ–ø–æ–≤–Ω–æ—é —Å—Ö–µ–º–æ—é
      try {
        await executeQuery(`DROP TABLE IF EXISTS clubs`);
        console.log('üóëÔ∏è –°—Ç–∞—Ä–∞ —Ç–∞–±–ª–∏—Ü—è clubs –≤–∏–¥–∞–ª–µ–Ω–∞');
      } catch (dropError) {
        console.warn('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ:', dropError);
      }

      // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é clubs –∑ –ø–æ–≤–Ω–æ—é —Å—Ö–µ–º–æ—é –≤–∫–ª—é—á–∞—é—á–∏ –º–µ–¥—ñ–∞-—Ñ–∞–π–ª–∏
      await executeQuery(`
        CREATE TABLE clubs (
          id VARCHAR(100) PRIMARY KEY,
          name VARCHAR(255) NOT NULL,
          description TEXT,
          address VARCHAR(500),
          phone VARCHAR(20),
          email VARCHAR(255),
          website VARCHAR(255),
          founded DATE,
          avatar LONGTEXT,
          owner_id VARCHAR(255) NOT NULL,
          owner_name VARCHAR(255),
          members_count INT DEFAULT 0,
          achievements TEXT,
          media_files LONGTEXT,
          is_active BOOLEAN DEFAULT TRUE,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
        )
      `);

      // –î–æ–¥–∞—î–º–æ –ø–æ–ª–µ media_files –¥–æ —ñ—Å–Ω—É—é—á–æ—ó —Ç–∞–±–ª–∏—Ü—ñ (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
      try {
        await executeQuery(`ALTER TABLE clubs ADD COLUMN media_files LONGTEXT`);
        console.log('‚úÖ –ü–æ–ª–µ media_files –¥–æ–¥–∞–Ω–æ –¥–æ —Ç–∞–±–ª–∏—Ü—ñ clubs');
      } catch (alterError) {
        console.log('‚ÑπÔ∏è –ü–æ–ª–µ media_files –≤–∂–µ —ñ—Å–Ω—É—î –∞–±–æ –ø–æ–º–∏–ª–∫–∞:', alterError);
      }

      console.log('‚úÖ –¢–∞–±–ª–∏—Ü—è clubs —Å—Ç–≤–æ—Ä–µ–Ω–∞ –∞–±–æ –≤–∂–µ —ñ—Å–Ω—É—î');

      // –í—Å—Ç–∞–≤–ª—è—î–º–æ –∞–±–æ –æ–Ω–æ–≤–ª—é—î–º–æ –∑–∞–ø–∏—Å –∫–ª—É–±—É
      await executeQuery(`
        INSERT INTO clubs (
          id, name, description, address, phone, email, website,
          owner_id, owner_name, achievements, founded, avatar
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ON DUPLICATE KEY UPDATE
          name = VALUES(name),
          description = VALUES(description),
          address = VALUES(address),
          phone = VALUES(phone),
          email = VALUES(email),
          website = VALUES(website),
          achievements = VALUES(achievements),
          founded = VALUES(founded),
          avatar = VALUES(avatar),
          updated_at = NOW()
      `, [
        clubId,
        clubData.name,
        clubData.description || '',
        clubData.address || '',
        clubData.phone || '',
        clubData.email || '',
        clubData.website || '',
        updatedBy,
        verification[0].name,
        clubData.achievements || clubData.experience || '', // –ü—ñ–¥—Ç—Ä–∏–º—É—î–º–æ –æ–±–∏–¥–≤–∞ –ø–æ–ª—è
        clubData.founded || null,
        clubData.avatar || ''
      ]);

      // –û–Ω–æ–≤–ª—é—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —á–ª–µ–Ω—ñ–≤
      const memberCount = await executeQuery(`
        SELECT COUNT(*) as count
        FROM users
        WHERE club = ?
      `, [clubData.name]);

      await executeQuery(`
        UPDATE clubs
        SET members_count = ?
        WHERE id = ?
      `, [memberCount[0]?.count || 0, clubId]);

      console.log(`‚úÖ –ö–ª—É–± –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—ñ clubs`);

      return NextResponse.json({
        success: true,
        message: '–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–ª—É–± —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ'
      });

    } catch (createError) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ clubs:', createError);
      return NextResponse.json({
        success: false,
        error: '–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–ª—É–±'
      }, { status: 500 });
    }

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–ª—É–±—É:', error);
    return NextResponse.json({
      success: false,
      error: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∫–ª—É–±—É',
      details: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'
    }, { status: 500 });
  }
}
