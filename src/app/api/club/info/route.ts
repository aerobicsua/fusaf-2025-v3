import { NextRequest, NextResponse } from 'next/server';
import { executeQuery } from '@/lib/mysql';

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const clubName = searchParams.get('name');

    if (!clubName) {
      return NextResponse.json({
        success: false,
        error: '–ù–∞–∑–≤–∞ –∫–ª—É–±—É –æ–±–æ–≤\'—è–∑–∫–æ–≤–∞'
      }, { status: 400 });
    }

    console.log(`üè¢ –ü–æ—à—É–∫ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–ª—É–±: ${clubName}`);

    // –°–ø–æ—á–∞—Ç–∫—É —Å–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –∫–ª—É–± –≤ —Ç–∞–±–ª–∏—Ü—ñ clubs (—è–∫—â–æ –≤–æ–Ω–∞ —ñ—Å–Ω—É—î)
    try {
      const clubs = await executeQuery(`
        SELECT
          id, name, description, address, phone, email, website,
          founded, avatar, owner_id, owner_name, members_count, achievements,
          is_active, created_at, updated_at
        FROM clubs
        WHERE name = ?
        LIMIT 1
      `, [clubName]);

      if (clubs.length > 0) {
        const club = clubs[0];
        console.log('‚úÖ –ö–ª—É–± –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—ñ clubs:', club.name);

        return NextResponse.json({
          success: true,
          club: {
            id: club.id,
            name: club.name,
            description: club.description || '',
            address: club.address || '',
            phone: club.phone || '',
            email: club.email || '',
            website: club.website || '',
            founded: club.founded || new Date().toISOString(),
            avatar: club.avatar || '',
            ownerId: club.owner_id,
            ownerName: club.owner_name || '–ù–µ–≤—ñ–¥–æ–º–æ',
            membersCount: club.members_count || 0,
            achievements: club.achievements || '',
            isActive: Boolean(club.is_active),
            created_at: club.created_at,
            updated_at: club.updated_at
          }
        });
      }
    } catch (clubTableError) {
      console.warn('‚ö†Ô∏è –¢–∞–±–ª–∏—Ü—è clubs –Ω–µ —ñ—Å–Ω—É—î –∞–±–æ –ø–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É, —à—É–∫–∞—î–º–æ –≤ users');
    }

    // –Ø–∫—â–æ —Ç–∞–±–ª–∏—Ü—ñ clubs –Ω–µ–º–∞—î, —à—É–∫–∞—î–º–æ –≤ —Ç–∞–±–ª–∏—Ü—ñ users
    const users = await executeQuery(`
      SELECT
        id, name, email, club, created_at, updated_at
      FROM users
      WHERE club = ? AND roles LIKE '%club_owner%'
      LIMIT 1
    `, [clubName]);

    if (users.length > 0) {
      const owner = users[0];
      console.log('‚úÖ –í–ª–∞—Å–Ω–∏–∫ –∫–ª—É–±—É –∑–Ω–∞–π–¥–µ–Ω–∏–π –≤ —Ç–∞–±–ª–∏—Ü—ñ users:', owner.name);

      // –†–∞—Ö—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —á–ª–µ–Ω—ñ–≤ –∫–ª—É–±—É
      const memberCountResult = await executeQuery(`
        SELECT COUNT(*) as count
        FROM users
        WHERE club = ?
      `, [clubName]);

      const membersCount = memberCountResult[0]?.count || 0;

      return NextResponse.json({
        success: true,
        club: {
          id: `club_${clubName.replace(/\s+/g, '_')}`,
          name: clubName,
          description: `–°–ø–æ—Ä—Ç–∏–≤–Ω–∏–π –∫–ª—É–± "${clubName}" - —á–∞—Å—Ç–∏–Ω–∞ –§–µ–¥–µ—Ä–∞—Ü—ñ—ó –£–∫—Ä–∞—ó–Ω–∏ –∑—ñ –°–ø–æ—Ä—Ç–∏–≤–Ω–æ—ó –ê–µ—Ä–æ–±—ñ–∫–∏ —ñ –§—ñ—Ç–Ω–µ—Å—É`,
          address: '',
          phone: '',
          email: owner.email,
          website: '',
          founded: owner.created_at,
          ownerId: owner.email,
          ownerName: owner.name,
          membersCount: membersCount,
          achievements: '', // –ú–∞–ø–∏–º–æ experience -> achievements –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
          isActive: true,
          created_at: owner.created_at,
          updated_at: owner.updated_at
        }
      });
    }

    // –ö–ª—É–± –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
    console.warn(`‚ö†Ô∏è –ö–ª—É–± "${clubName}" –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);
    return NextResponse.json({
      success: false,
      error: '–ö–ª—É–± –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
    }, { status: 404 });

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–ª—É–±:', error);
    return NextResponse.json({
      success: false,
      error: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–ª—É–±',
      details: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'
    }, { status: 500 });
  }
}
