import { NextRequest, NextResponse } from 'next/server';
import { executeQuery } from '@/lib/mysql';
import bcrypt from 'bcryptjs';
import { v4 as uuidv4 } from 'uuid';
import { sendEmail, generateWelcomeEmail } from '@/lib/email';

export async function POST(request: NextRequest) {
  try {
    const { email, password, confirmPassword, name, role = 'athlete' } = await request.json();

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö
    if (!email || !password || !name) {
      return NextResponse.json({
        success: false,
        error: 'Email, –ø–∞—Ä–æ–ª—å —Ç–∞ —ñ–º\'—è –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ'
      }, { status: 400 });
    }

    if (password !== confirmPassword) {
      return NextResponse.json({
        success: false,
        error: '–ü–∞—Ä–æ–ª—ñ –Ω–µ —Å–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å'
      }, { status: 400 });
    }

    if (password.length < 6) {
      return NextResponse.json({
        success: false,
        error: '–ü–∞—Ä–æ–ª—å –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 6 —Å–∏–º–≤–æ–ª—ñ–≤'
      }, { status: 400 });
    }

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      return NextResponse.json({
        success: false,
        error: '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π email –∞–¥—Ä–µ—Å'
      }, { status: 400 });
    }

    console.log('üìù –°–ø—Ä–æ–±–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –¥–ª—è:', email);

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î
    const existingUsers = await executeQuery<any>(`
      SELECT id FROM users WHERE email = ?
    `, [email.toLowerCase()]);

    if (existingUsers.length > 0) {
      console.log('‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î:', email);
      return NextResponse.json({
        success: false,
        error: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º email –≤–∂–µ —ñ—Å–Ω—É—î'
      }, { status: 409 });
    }

    // –•–µ—à—É—î–º–æ –ø–∞—Ä–æ–ª—å
    const saltRounds = 12;
    const passwordHash = await bcrypt.hash(password, saltRounds);
    console.log('üîê –ü–∞—Ä–æ–ª—å –∑–∞—Ö–µ—à–æ–≤–∞–Ω–∏–π –¥–ª—è:', email);

    // –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID
    const userId = uuidv4();

    // –†–æ–∑–±–∏–≤–∞—î–º–æ —ñ–º'—è –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏
    const nameParts = name.trim().split(' ').filter((part: string) => part.trim());
    const firstName = nameParts[0] || '';
    const lastName = nameParts.length > 1 ? nameParts[nameParts.length - 1] : '';
    const middleName = nameParts.length > 2 ? nameParts.slice(1, -1).join(' ') : '';

    // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –ë–î
    await executeQuery(`
      INSERT INTO users (
        id, email, password_hash, name, roles,
        first_name, last_name, middle_name,
        country, status, email_verified, membership_paid,
        created_at, last_login
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, NOW(), NOW())
    `, [
      userId,
      email.toLowerCase(),
      passwordHash,
      name.trim(),
      `["${role}", "user"]`,
      firstName,
      lastName,
      middleName,
      '–£–∫—Ä–∞—ó–Ω–∞',
      'active', // –æ–¥—Ä–∞–∑—É –∞–∫—Ç–∏–≤—É—î–º–æ
      false, // email –Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ
      false // —á–ª–µ–Ω—Å—Ç–≤–æ –Ω–µ –æ–ø–ª–∞—á–µ–Ω–æ
    ]);

    console.log('‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –≤ –ë–î:', email);

    // –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const newUsers = await executeQuery<any>(`
      SELECT
        id, email, name, roles,
        first_name, last_name, middle_name,
        country, status, email_verified, membership_paid,
        created_at, last_login
      FROM users
      WHERE id = ?
    `, [userId]);

    if (newUsers.length === 0) {
      throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞');
    }

    const newUser = newUsers[0];

    // –ü–∞—Ä—Å–∏–º–æ —Ä–æ–ª—ñ
    let roles = [];
    try {
      roles = JSON.parse(newUser.roles || '[]');
    } catch (e) {
      roles = [role, 'user'];
    }

    // –§–æ—Ä–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    const userResponse = {
      id: newUser.id,
      email: newUser.email,
      name: newUser.name,
      roles: roles,
      createdAt: newUser.created_at,
      lastLogin: newUser.last_login,
      emailVerified: newUser.email_verified,

      // –ë–∞–∑–æ–≤–∏–π –ø—Ä–æ—Ñ—ñ–ª—å
      profile: {
        firstName: newUser.first_name || '',
        lastName: newUser.last_name || '',
        middleName: newUser.middle_name || '',
        dateOfBirth: '',
        gender: '',
        phone: '',

        // –ê–¥—Ä–µ—Å–∞
        country: newUser.country || '–£–∫—Ä–∞—ó–Ω–∞',
        region: '',
        city: '',
        address: '',
        zipCode: '',

        // –°–ø–æ—Ä—Ç–∏–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
        club: '',
        coach: '',
        sportCategory: '',
        experience: '',
        specialization: '',

        // –û—Å–æ–±–∏—Å—Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
        bio: '',
        website: '',
        socialMedia: {
          instagram: '',
          facebook: '',
          telegram: ''
        },

        // –î–æ—Å—è–≥–Ω–µ–Ω–Ω—è
        achievements: '',
        competitions: [],

        // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        isPublicProfile: true,
        showEmail: false,
        showPhone: false,
        emailNotifications: true,

        // –§–∞–π–ª–∏
        avatar: '',
        documents: []
      }
    };

    console.log('üéâ –£—Å–ø—ñ—à–Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –¥–ª—è:', email);

    // –ù–∞–¥—Å–∏–ª–∞—î–º–æ –≤—ñ—Ç–∞–ª—å–Ω–∏–π email
    try {
      const roleLabels: Record<string, string> = {
        'athlete': '–°–ø–æ—Ä—Ç—Å–º–µ–Ω',
        'coach_judge': '–¢—Ä–µ–Ω–µ—Ä/–°—É–¥–¥—è',
        'club_owner': '–í–ª–∞—Å–Ω–∏–∫ –∫–ª—É–±—É',
        'admin': '–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä'
      };

      const welcomeEmailHtml = generateWelcomeEmail({
        name: name.trim(),
        email: email.toLowerCase(),
        role: role,
        registrationDate: new Date().toISOString()
      });

      const emailResult = await sendEmail({
        from: 'aerobicsua@gmail.com',
        to: email.toLowerCase(),
        subject: `üéâ –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –§–£–°–ê–§, ${firstName}!`,
        html: welcomeEmailHtml
      });

      if (emailResult.success) {
        console.log('‚úÖ –í—ñ—Ç–∞–ª—å–Ω–∏–π email –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ –¥–ª—è:', email);
      } else {
        console.log('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤—ñ—Ç–∞–ª—å–Ω–∏–π email:', emailResult.error);
      }
    } catch (emailError) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤—ñ—Ç–∞–ª—å–Ω–æ–≥–æ email:', emailError);
      // –ù–µ –∑—É–ø–∏–Ω—è—î–º–æ –ø—Ä–æ—Ü–µ—Å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —á–µ—Ä–µ–∑ –ø–æ–º–∏–ª–∫—É email
    }

    return NextResponse.json({
      success: true,
      message: '–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞! –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –§–£–°–ê–§! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ email –¥–ª—è –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó.',
      user: userResponse
    });

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:', error);

    return NextResponse.json({
      success: false,
      error: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      details: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'
    }, { status: 500 });
  }
}
