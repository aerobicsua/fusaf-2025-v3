import { type NextRequest, NextResponse } from 'next/server';
import { getApiSession } from '@/lib/auth';
// authOptions removed

// –°–∏–º—É–ª—è—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —á–ª–µ–Ω—Å—Ç–≤–∞ –∫–ª—É–±—ñ–≤
const clubMemberships = new Map<string, {
  id: string;
  clubId: string;
  athleteId: string;
  athleteName: string;
  athleteEmail: string;
  joinDate: string;
  status: 'active' | 'suspended';
  gender: 'male' | 'female';
  birthDate: string;
  categories: string[];
}>();

// –°–∏–º—É–ª—è—Ü—ñ—è –≤–ª–∞—Å–Ω–∏–∫—ñ–≤ –∫–ª—É–±—ñ–≤
const clubOwners = new Map([
  ['club-1', 'competitions@fusaf.org.ua'], // –°–ö "–ì—Ä–∞—Ü—ñ—è"
  ['club-2', 'lviv@fusaf.org.ua'],        // –ê–µ—Ä–æ–±—ñ–∫–∞ –õ—å–≤—ñ–≤
  ['club-3', 'dnipro@fusaf.org.ua'],      // –§—ñ—Ç–Ω–µ—Å-–î–∏–Ω–∞–º—ñ–∫–∞
  ['club-4', 'odesa@fusaf.org.ua']        // –°–ø–æ—Ä—Ç-–ê—Ä–µ–Ω–∞
]);

// –î–µ–º–æ-—É—á–∞—Å–Ω–∏–∫–∏ –∫–ª—É–±—ñ–≤
const initializeDemoMembers = () => {
  const demoMembers = [
    {
      id: 'member-1',
      clubId: 'club-1',
      athleteId: 'athlete-1',
      athleteName: '–ü–µ—Ç—Ä–µ–Ω–∫–æ –ê–Ω–Ω–∞ –Ü–≤–∞–Ω—ñ–≤–Ω–∞',
      athleteEmail: 'anna.petrenko@email.com',
      joinDate: '2024-09-15',
      status: 'active' as const,
      gender: 'female' as const,
      birthDate: '2008-03-15',
      categories: ['IW', 'MP']
    },
    {
      id: 'member-2',
      clubId: 'club-1',
      athleteId: 'athlete-2',
      athleteName: '–ö–æ–≤–∞–ª–µ–Ω–∫–æ –î–º–∏—Ç—Ä–æ –û–ª–µ–∫—Å—ñ–π–æ–≤–∏—á',
      athleteEmail: 'dmytro.kovalenko@email.com',
      joinDate: '2024-08-20',
      status: 'active' as const,
      gender: 'male' as const,
      birthDate: '2007-11-22',
      categories: ['IM', 'MP']
    },
    {
      id: 'member-3',
      clubId: 'club-1',
      athleteId: 'athlete-3',
      athleteName: '–°–∏–¥–æ—Ä–µ–Ω–∫–æ –ú–∞—Ä—ñ—è –ü–µ—Ç—Ä—ñ–≤–Ω–∞',
      athleteEmail: 'maria.sydorenko@email.com',
      joinDate: '2024-10-01',
      status: 'active' as const,
      gender: 'female' as const,
      birthDate: '2009-07-10',
      categories: ['IW', 'TR']
    },
    {
      id: 'member-4',
      clubId: 'club-1',
      athleteId: 'athlete-4',
      athleteName: '–®–µ–≤—á–µ–Ω–∫–æ –û–ª–µ–∫—Å—ñ–π –ú–∏–∫–æ–ª–∞–π–æ–≤–∏—á',
      athleteEmail: 'oleksiy.shevchenko@email.com',
      joinDate: '2024-07-12',
      status: 'active' as const,
      gender: 'male' as const,
      birthDate: '2006-04-18',
      categories: ['IM', 'TR']
    },
    {
      id: 'member-5',
      clubId: 'club-1',
      athleteId: 'athlete-5',
      athleteName: '–ú–µ–ª—å–Ω–∏–∫ –°–æ—Ñ—ñ—è –ê–Ω–¥—Ä—ñ—ó–≤–Ω–∞',
      athleteEmail: 'sofia.melnyk@email.com',
      joinDate: '2024-11-03',
      status: 'active' as const,
      gender: 'female' as const,
      birthDate: '2008-12-05',
      categories: ['IW', 'GR']
    }
  ];

  demoMembers.forEach(member => {
    clubMemberships.set(member.id, member);
  });
};

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –¥–µ–º–æ-–¥–∞–Ω—ñ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –º–æ–¥—É–ª—è
initializeDemoMembers();

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞—è–≤–æ–∫ –¥–ª—è –≤–ª–∞—Å–Ω–∏–∫–∞ –∫–ª—É–±—É
export async function GET(request: NextRequest) {
  try {
    const session = await getApiSession(request);

    if (!session?.user?.email) {
      return NextResponse.json({
        success: false,
        error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π'
      }, { status: 401 });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–ª–∞—Å–Ω–∏–∫–æ–º –∫–ª—É–±—É
    const userClubs = Array.from(clubOwners.entries())
      .filter(([clubId, ownerEmail]) => ownerEmail === session.user.email)
      .map(([clubId]) => clubId);

    if (userClubs.length === 0) {
      return NextResponse.json({
        success: false,
        error: '–í–∏ –Ω–µ —î –≤–ª–∞—Å–Ω–∏–∫–æ–º –∂–æ–¥–Ω–æ–≥–æ –∫–ª—É–±—É'
      }, { status: 403 });
    }

    // –í —Ä–µ–∞–ª—å–Ω—ñ–π —Å–∏—Å—Ç–µ–º—ñ —Ç—É—Ç –±–∏ –±—É–≤ –∑–∞–ø–∏—Ç –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∑–∞—è–≤–æ–∫
    // –ó–∞—Ä–∞–∑ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –¥–µ–º–æ-–∑–∞—è–≤–∫–∏
    const demoRequests = [
      {
        id: 'req-demo-1',
        clubId: userClubs[0],
        clubName: '–°–ö "–ì—Ä–∞—Ü—ñ—è"',
        athleteId: 'new-athlete-1',
        athleteName: '–ù–æ–≤–∏–π –°–ø–æ—Ä—Ç—Å–º–µ–Ω –û–¥–∏–Ω',
        athleteEmail: 'new.athlete1@email.com',
        status: 'pending',
        requestDate: '2025-01-10',
        message: '–•–æ—á—É –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –≤–∞—à–æ–≥–æ –∫–ª—É–±—É –¥–ª—è —É—á–∞—Å—Ç—ñ –≤ –∑–º–∞–≥–∞–Ω–Ω—è—Ö –∑—ñ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ—ó –∞–µ—Ä–æ–±—ñ–∫–∏'
      }
    ];

    // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏—Ö —É—á–∞—Å–Ω–∏–∫—ñ–≤ –∫–ª—É–±—É
    const clubMembers = Array.from(clubMemberships.values())
      .filter(member => userClubs.includes(member.clubId));

    return NextResponse.json({
      success: true,
      requests: demoRequests,
      members: clubMembers,
      userClubs
    });

  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞—è–≤–æ–∫ –∫–ª—É–±—É:', error);
    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    }, { status: 500 });
  }
}

// –û–±—Ä–æ–±–∫–∞ –∑–∞—è–≤–∫–∏ (—Å—Ö–≤–∞–ª–µ–Ω–Ω—è/–≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è)
export async function PUT(request: NextRequest) {
  try {
    const session = await getApiSession(request);

    if (!session?.user?.email) {
      return NextResponse.json({
        success: false,
        error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π'
      }, { status: 401 });
    }

    const { requestId, action, response } = await request.json();

    if (!requestId || !action || !['approve', 'reject'].includes(action)) {
      return NextResponse.json({
        success: false,
        error: '–ù–µ–≤—ñ—Ä–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É'
      }, { status: 400 });
    }

    // –í —Ä–µ–∞–ª—å–Ω—ñ–π —Å–∏—Å—Ç–µ–º—ñ —Ç—É—Ç –±–∏ –±—É–ª–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –≤–ª–∞—Å–Ω–∏–∫–æ–º –∫–ª—É–±—É
    // —ñ –æ–±—Ä–æ–±–∫–∞ –∑–∞—è–≤–∫–∏ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö

    console.log('üèõÔ∏è –û–±—Ä–æ–±–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø:', {
      requestId,
      action,
      processedBy: session.user.email,
      response
    });

    if (action === 'approve') {
      // –î–æ–¥–∞—î–º–æ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å–Ω–∏–∫–∞ –¥–æ –∫–ª—É–±—É
      const newMemberId = `member-${Date.now()}`;
      const newMember = {
        id: newMemberId,
        clubId: 'club-1', // –í —Ä–µ–∞–ª—å–Ω—ñ–π —Å–∏—Å—Ç–µ–º—ñ –æ—Ç—Ä–∏–º—É—î–º–æ –∑ –∑–∞—è–≤–∫–∏
        athleteId: 'new-athlete-1',
        athleteName: '–ù–æ–≤–∏–π –°–ø–æ—Ä—Ç—Å–º–µ–Ω –û–¥–∏–Ω',
        athleteEmail: 'new.athlete1@email.com',
        joinDate: new Date().toISOString().split('T')[0],
        status: 'active' as const,
        gender: 'female' as const, // –í —Ä–µ–∞–ª—å–Ω—ñ–π —Å–∏—Å—Ç–µ–º—ñ –æ—Ç—Ä–∏–º—É—î–º–æ –∑ –ø—Ä–æ—Ñ—ñ–ª—é
        birthDate: '2009-01-01',
        categories: ['IW'] // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
      };

      clubMemberships.set(newMemberId, newMember);
    }

    return NextResponse.json({
      success: true,
      message: action === 'approve'
        ? '–ó–∞—è–≤–∫—É —Å—Ö–≤–∞–ª–µ–Ω–æ. –°–ø–æ—Ä—Ç—Å–º–µ–Ω –¥–æ–¥–∞–Ω–æ –¥–æ –∫–ª—É–±—É.'
        : '–ó–∞—è–≤–∫—É –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.',
      action
    });

  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞—è–≤–∫–∏:', error);
    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    }, { status: 500 });
  }
}
