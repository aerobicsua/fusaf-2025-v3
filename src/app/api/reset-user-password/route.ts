import { NextRequest, NextResponse } from 'next/server';
import { executeQuery } from '@/lib/mysql';
import bcrypt from 'bcryptjs';

export async function POST(request: NextRequest) {
  try {
    const { email, newPassword } = await request.json();

    if (!email || !newPassword) {
      return NextResponse.json({
        success: false,
        error: 'Email —Ç–∞ –Ω–æ–≤–∏–π –ø–∞—Ä–æ–ª—å –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ'
      }, { status: 400 });
    }

    console.log(`üîë –°–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è –¥–ª—è: ${email}`);

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —ñ—Å–Ω—É—î
    const users = await executeQuery(`
      SELECT id, email, name FROM users WHERE email = ? LIMIT 1
    `, [email]);

    if (users.length === 0) {
      console.log(`‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${email} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π`);
      return NextResponse.json({
        success: false,
        error: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π'
      }, { status: 404 });
    }

    const user = users[0];
    console.log(`‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–Ω–∞–π–¥–µ–Ω–∏–π: ${user.name}`);

    // –•–µ—à—É—î–º–æ –Ω–æ–≤–∏–π –ø–∞—Ä–æ–ª—å
    const hashedPassword = await bcrypt.hash(newPassword, 10);
    console.log(`üîí –ù–æ–≤–∏–π –ø–∞—Ä–æ–ª—å –∑–∞—Ö–µ—à–æ–≤–∞–Ω–æ`);

    // –û–Ω–æ–≤–ª—é—î–º–æ –ø–∞—Ä–æ–ª—å –≤ –±–∞–∑—ñ
    await executeQuery(`
      UPDATE users SET password_hash = ?, updated_at = NOW() WHERE email = ?
    `, [hashedPassword, email]);

    console.log(`‚úÖ –ü–∞—Ä–æ–ª—å –æ–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è: ${email}`);

    return NextResponse.json({
      success: true,
      message: '–ü–∞—Ä–æ–ª—å —É—Å–ø—ñ—à–Ω–æ —Å–∫–∏–Ω—É—Ç–æ',
      user: {
        email: user.email,
        name: user.name
      }
    });

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è:', error);
    return NextResponse.json({
      success: false,
      error: '–ü–æ–º–∏–ª–∫–∞ —Å–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è',
      details: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'
    }, { status: 500 });
  }
}
