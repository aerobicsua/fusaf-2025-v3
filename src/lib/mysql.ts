import mysql from 'mysql2/promise';

// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MySQL
const dbConfig = {
  host: process.env.DB_HOST,
  port: parseInt(process.env.DB_PORT || '3306'),
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  database: process.env.DB_NAME,
  charset: 'utf8mb4',
  timezone: '+00:00',
  connectTimeout: 10000,
  // SSL –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ–≥–æ –∑'—î–¥–Ω–∞–Ω–Ω—è
  ssl: {
    rejectUnauthorized: false
  }
};

// Pool –∑'—î–¥–Ω–∞–Ω—å –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
let pool: mysql.Pool | null = null;

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è pool –∑'—î–¥–Ω–∞–Ω—å
export function createPool() {
  if (!pool) {
    pool = mysql.createPool({
      ...dbConfig,
      connectionLimit: 10,
      queueLimit: 0
    });
  }
  return pool;
}

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
export async function getConnection() {
  try {
    const pool = createPool();
    const connection = await pool.getConnection();
    return connection;
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MySQL:', error);
    throw error;
  }
}

// –í–∏–∫–æ–Ω–∞–Ω–Ω—è SQL –∑–∞–ø–∏—Ç—É
export async function executeQuery<T = any>(
  query: string,
  params: any[] = []
): Promise<T[]> {
  let connection;

  try {
    connection = await getConnection();
    const [rows] = await connection.execute(query, params);
    return rows as T[];
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É MySQL:', error);
    console.error('üìù –ó–∞–ø–∏—Ç:', query);
    console.error('üìä –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:', params);
    throw error;
  } finally {
    if (connection) {
      connection.release();
    }
  }
}

// –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –∑ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º –º–µ—Ç–∞–¥–∞–Ω–∏—Ö
export async function executeQueryWithMeta<T = any>(
  query: string,
  params: any[] = []
): Promise<{ rows: T[], insertId?: number, affectedRows?: number }> {
  let connection;

  try {
    connection = await getConnection();
    const [rows, fields] = await connection.execute(query, params);

    const result: any = rows;
    const meta = fields as any;

    return {
      rows: result,
      insertId: meta.insertId,
      affectedRows: meta.affectedRows
    };
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É MySQL:', error);
    throw error;
  } finally {
    if (connection) {
      connection.release();
    }
  }
}

// –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î
export async function testConnection(): Promise<boolean> {
  try {
    const connection = await getConnection();
    await connection.ping();
    connection.release();

    console.log('‚úÖ –ó\'—î–¥–Ω–∞–Ω–Ω—è –∑ MySQL —É—Å–ø—ñ—à–Ω–µ!');
    console.log(`üìä –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö: ${dbConfig.database}`);
    console.log(`üñ•Ô∏è –•–æ—Å—Ç: ${dbConfig.host}`);

    return true;
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è:', error);
    return false;
  }
}

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ë–î
export async function getDatabaseInfo() {
  try {
    const tables = await executeQuery(`
      SELECT TABLE_NAME as name, TABLE_ROWS as rows
      FROM information_schema.TABLES
      WHERE TABLE_SCHEMA = ?
    `, [dbConfig.database]);

    return {
      database: dbConfig.database,
      host: dbConfig.host,
      tables: tables
    };
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ë–î:', error);
    throw error;
  }
}

// –ó–∞–∫—Ä–∏—Ç—Ç—è –≤—Å—ñ—Ö –∑'—î–¥–Ω–∞–Ω—å
export async function closeConnections() {
  if (pool) {
    await pool.end();
    pool = null;
    console.log('‚úÖ –ó\'—î–¥–Ω–∞–Ω–Ω—è –∑ MySQL –∑–∞–∫—Ä–∏—Ç–æ');
  }
}
