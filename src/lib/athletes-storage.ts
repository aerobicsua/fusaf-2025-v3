// üèÜ –°–ò–°–¢–ï–ú–ê –ß–õ–ï–ù–°–¢–í–ê –§–£–°–ê–§ - –†–æ–∑—à–∏—Ä–µ–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω—ñ–≤
// –ù–∞ –æ—Å–Ω–æ–≤—ñ FIG (International Gymnastics Federation) –ø—Ä–æ—Ñ—ñ–ª—ñ–≤ + –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –º–µ–¥—ñ–∞ —Ñ—É–Ω–∫—Ü—ñ—ó

interface MediaItem {
  id: string;
  type: 'photo' | 'video';
  url: string;
  title?: string;
  description?: string;
  uploadDate: string;
  isProfileImage?: boolean;
  competitionId?: string; // –ü—Ä–∏–≤'—è–∑–∫–∞ –¥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–º–∞–≥–∞–Ω–Ω—è
  tags?: string[];
}

interface CompetitionResult {
  id: string;
  competitionName: string;
  competitionType: 'World Championships' | 'Continental Championships' | 'National Championships' | 'Regional Championships' | 'Club Championships' | 'Other';
  date: string;
  location: string;
  venue?: string; // –ù–∞–∑–≤–∞ –∑–∞–ª—É/–∞—Ä–µ–Ω–∏
  category: string; // Women Individual, Men Team, etc.
  discipline: string; // –°–ø–æ—Ä—Ç–∏–≤–Ω–∞ –∞–µ—Ä–æ–±—ñ–∫–∞, –§—ñ—Ç–Ω–µ—Å –∞–µ—Ä–æ–±—ñ–∫–∞, —Ç–æ—â–æ

  // –î–µ—Ç–∞–ª—å–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
  rank?: number;
  totalScore?: number;
  technicScore?: number; // –¢–µ—Ö–Ω—ñ—á–Ω–∞ –æ—Ü—ñ–Ω–∫–∞
  artisticScore?: number; // –ê—Ä—Ç–∏—Å—Ç–∏—á–Ω–∞ –æ—Ü—ñ–Ω–∫–∞
  executionScore?: number; // –í–∏–∫–æ–Ω–∞–Ω–Ω—è
  difficultyScore?: number; // –°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å

  // –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
  participantsCount?: number; // –ö—ñ–ª—å–∫—ñ—Å—Ç—å —É—á–∞—Å–Ω–∏–∫—ñ–≤
  isPersonalBest?: boolean;
  notes?: string;

  // –ú–µ–¥—ñ–∞
  photos?: string[]; // URL —Ñ–æ—Ç–æ –∑ –∑–º–∞–≥–∞–Ω–Ω—è
  videoUrl?: string; // –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≤—ñ–¥–µ–æ –≤–∏—Å—Ç—É–ø—É

  // –°–∏—Å—Ç–µ–º–∞ –æ—Ü—ñ–Ω—é–≤–∞–Ω–Ω—è
  judgesCount?: number;
  deductions?: number; // –ó–Ω–∏–∂–µ–Ω–Ω—è –±–∞–ª—ñ–≤
}

interface Achievement {
  id: string;
  title: string;
  description: string;
  date: string;
  type: 'medal' | 'certificate' | 'record' | 'nomination' | 'other';
  level: 'international' | 'national' | 'regional' | 'club';
  competitionResult?: string; // ID —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –∑–º–∞–≥–∞–Ω–Ω—è
  photoUrl?: string;
}

interface PersonalBests {
  totalScore?: {
    score: number;
    competition: string;
    date: string;
  };
  technicScore?: {
    score: number;
    competition: string;
    date: string;
  };
  artisticScore?: {
    score: number;
    competition: string;
    date: string;
  };
}

interface AthleteStats {
  totalCompetitions: number;
  wins: number; // 1 –º—ñ—Å—Ü–µ
  podiums: number; // –¢–æ–ø-3
  averageScore: number;
  bestScore: number;
  competitionsByYear: Record<string, number>;
  medalsByType: {
    gold: number;
    silver: number;
    bronze: number;
  };
  disciplineStats: Record<string, {
    competitions: number;
    bestRank: number;
    averageScore: number;
  }>;
}

interface Athlete {
  id: string;
  // –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
  license?: string;
  title?: string; // Ms, Mr, Dr
  lastName: string;
  firstName: string;
  email: string;
  gender: 'male' | 'female';
  country: string;
  placeOfBirth?: string;
  yearOfBirth?: number;
  dateOfBirth?: string; // YYYY-MM-DD
  height?: number; // –≤ —Å–º
  weight?: number; // –≤ –∫–≥

  // –°–ø–æ—Ä—Ç–∏–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
  disciplines: string[]; // ['Aerobic Gymnastics', 'Rhythmic Gymnastics', etc.]
  club?: string;
  coach?: string;
  coachContact?: string;
  trainingSite?: string;

  // –õ—ñ—Ü–µ–Ω–∑—ñ—ó —Ç–∞ –∫–≤–∞–ª—ñ—Ñ—ñ–∫–∞—Ü—ñ—ó
  licenseLevel?: 'beginner' | 'intermediate' | 'advanced' | 'professional' | 'master';
  licenseExpiry?: string;
  qualifications?: string[];

  // –ú–µ–¥—ñ–∞ —Ç–∞ —Ñ–æ—Ç–æ
  profileImage?: string;
  media: MediaItem[]; // –í—Å—ñ —Ñ–æ—Ç–æ —Ç–∞ –≤—ñ–¥–µ–æ

  // –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–º–∞–≥–∞–Ω—å (—Ä–æ–∑—à–∏—Ä–µ–Ω–æ)
  results: CompetitionResult[];
  achievements: Achievement[];
  personalBests: PersonalBests;

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–æ–±—á–∏—Å–ª—é—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ)
  stats?: AthleteStats;

  // –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
  biography?: string;
  interests?: string[];
  languages?: string[];
  socialMedia?: {
    instagram?: string;
    facebook?: string;
    tiktok?: string;
    youtube?: string;
  };

  // –°–∏—Å—Ç–µ–º–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
  registrationDate: string;
  lastUpdated: string;
  status: 'active' | 'inactive' | 'suspended' | 'retired';
  visibility: 'public' | 'private' | 'members-only';
}

// –î–∏—Å—Ü–∏–ø–ª—ñ–Ω–∏ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ—ó –∞–µ—Ä–æ–±—ñ–∫–∏ —Ç–∞ —Ñ—ñ—Ç–Ω–µ—Å—É
export const DISCIPLINES = [
  '–°–ø–æ—Ä—Ç–∏–≤–Ω–∞ –∞–µ—Ä–æ–±—ñ–∫–∞',
  '–§—ñ—Ç–Ω–µ—Å –∞–µ—Ä–æ–±—ñ–∫–∞',
  '–°—Ç–µ–ø –∞–µ—Ä–æ–±—ñ–∫–∞',
  '–•—ñ–ø-—Ö–æ–ø –∞–µ—Ä–æ–±—ñ–∫–∞',
  '–¢–∞–Ω—Ü—é–≤–∞–ª—å–Ω–∞ –∞–µ—Ä–æ–±—ñ–∫–∞'
] as const;

// –ö—Ä–∞—ó–Ω–∏
export const COUNTRIES = [
  '–£–∫—Ä–∞—ó–Ω–∞',
  '–ü–æ–ª—å—â–∞',
  '–†—É–º—É–Ω—ñ—è',
  '–ß–µ—Ö—ñ—è',
  '–°–ª–æ–≤–∞—á—á–∏–Ω–∞',
  '–£–≥–æ—Ä—â–∏–Ω–∞',
  '–ë–æ–ª–≥–∞—Ä—ñ—è',
  '–Ü–Ω—à—ñ'
] as const;

// –¢–∏–ø–∏ –∑–º–∞–≥–∞–Ω—å
export const COMPETITION_TYPES = [
  'World Championships',
  'Continental Championships',
  'National Championships',
  'Regional Championships',
  'Club Championships',
  'Other'
] as const;

// –†—ñ–≤–Ω—ñ –¥–æ—Å—è–≥–Ω–µ–Ω—å
export const ACHIEVEMENT_LEVELS = [
  'international',
  'national',
  'regional',
  'club'
] as const;

// –ì–ª–æ–±–∞–ª—å–Ω–µ —Å—Ö–æ–≤–∏—â–µ –¥–ª—è —Å–ø–æ—Ä—Ç—Å–º–µ–Ω—ñ–≤ (—Ç–∏–º—á–∞—Å–æ–≤–µ —Ä—ñ—à–µ–Ω–Ω—è –¥–æ —Ä–µ–∞–ª—å–Ω–æ—ó –ë–î)
declare global {
  var __FUSAF_ATHLETES_STORAGE__: {
    athletes: Athlete[];
    lastUpdate: string;
    instanceId: string;
  } | undefined;
}

// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ–π–Ω—ñ –¥–∞–Ω—ñ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω—ñ–≤ (–ø–æ–∫–∏ –Ω–µ –æ—Ç—Ä–∏–º–∞–ª–∏ —Ä–µ–∞–ª—å–Ω–∏—Ö)
const DEMO_ATHLETES: Athlete[] = [
  {
    id: 'admin-1',
    license: 'FUSAF-ADM-001',
    title: 'Mr',
    lastName: 'Fedosenko',
    firstName: 'Andrii',
    email: 'andfedos@gmail.com',
    gender: 'male',
    country: '–£–∫—Ä–∞—ó–Ω–∞',
    placeOfBirth: '–ö–∏—ó–≤',
    yearOfBirth: 1985,
    height: 180,
    weight: 75,
    disciplines: ['–°–ø–æ—Ä—Ç–∏–≤–Ω–∞ –∞–µ—Ä–æ–±—ñ–∫–∞'],
    club: '–§–£–°–ê–§ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—è',
    coach: '–°–∞–º–æ—Å—Ç—ñ–π–Ω—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è',
    licenseLevel: 'master',
    media: [
      {
        id: 'photo-admin-1',
        type: 'photo',
        url: '/images/athletes/admin-profile.jpg',
        title: '–û—Ñ—ñ—Ü—ñ–π–Ω–µ —Ñ–æ—Ç–æ',
        uploadDate: '2020-01-01T00:00:00.000Z',
        isProfileImage: true
      }
    ],
    results: [
      {
        id: 'result-admin-1',
        competitionName: '–ß–µ–º–ø—ñ–æ–Ω–∞—Ç –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä—ñ–≤ –§–£–°–ê–§ 2023',
        competitionType: 'Other',
        date: '2023-12-01',
        location: '–ö–∏—ó–≤',
        venue: '–ü–∞–ª–∞—Ü —Å–ø–æ—Ä—Ç—É',
        category: '–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏',
        discipline: '–°–ø–æ—Ä—Ç–∏–≤–Ω–∞ –∞–µ—Ä–æ–±—ñ–∫–∞',
        rank: 1,
        totalScore: 95.5,
        technicScore: 48.0,
        artisticScore: 47.5,
        participantsCount: 5,
        isPersonalBest: true,
        notes: '–í–∏—Å—Ç—É–ø –ø—Ä–∏—Å–≤—è—á–µ–Ω–∏–π —Ä–æ–∑–≤–∏—Ç–∫—É —Ñ–µ–¥–µ—Ä–∞—Ü—ñ—ó'
      }
    ],
    achievements: [
      {
        id: 'ach-admin-1',
        title: '–ó–∞—Å–Ω–æ–≤–Ω–∏–∫ –§–£–°–ê–§',
        description: '–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ —Ä–æ–∑–≤–∏—Ç–æ–∫ –§–µ–¥–µ—Ä–∞—Ü—ñ—ó –£–∫—Ä–∞—ó–Ω–∏ –∑—ñ –°–ø–æ—Ä—Ç–∏–≤–Ω–æ—ó –ê–µ—Ä–æ–±—ñ–∫–∏ —ñ –§—ñ—Ç–Ω–µ—Å—É',
        date: '2020-01-01',
        type: 'other',
        level: 'national'
      },
      {
        id: 'ach-admin-2',
        title: '–û—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä –ø–æ–Ω–∞–¥ 50 –∑–º–∞–≥–∞–Ω—å',
        description: '–£—Å–ø—ñ—à–Ω–∞ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—è –Ω–∞—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏—Ö —Ç–∞ —Ä–µ–≥—ñ–æ–Ω–∞–ª—å–Ω–∏—Ö –∑–º–∞–≥–∞–Ω—å',
        date: '2023-12-31',
        type: 'certificate',
        level: 'national'
      }
    ],
    personalBests: {
      totalScore: {
        score: 95.5,
        competition: '–ß–µ–º–ø—ñ–æ–Ω–∞—Ç –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä—ñ–≤ –§–£–°–ê–§ 2023',
        date: '2023-12-01'
      }
    },
    biography: '–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –§–£–°–ê–§, –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä –∑–º–∞–≥–∞–Ω—å —Ç–∞ —Ä–æ–∑–≤–∏—Ç–∫—É —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ—ó –∞–µ—Ä–æ–±—ñ–∫–∏ –≤ –£–∫—Ä–∞—ó–Ω—ñ. –°—Ç–≤–æ—Ä–∏–≤ —Å—É—á–∞—Å–Ω—É —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ñ–µ–¥–µ—Ä–∞—Ü—ñ—î—é —Ç–∞ –≤–ø—Ä–æ–≤–∞–¥–∏–≤ —Ü–∏—Ñ—Ä–æ–≤—ñ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó –≤ —Å–ø–æ—Ä—Ç.',
    interests: ['–°–ø–æ—Ä—Ç–∏–≤–Ω—ñ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó', '–û—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—è –∑–º–∞–≥–∞–Ω—å', '–†–æ–∑–≤–∏—Ç–æ–∫ —Å–ø–æ—Ä—Ç—É'],
    languages: ['–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞', '–ê–Ω–≥–ª—ñ–π—Å—å–∫–∞', '–†–æ—Å—ñ–π—Å—å–∫–∞'],
    socialMedia: {
      instagram: '@fusaf_ukraine',
      facebook: 'FUSAF.Ukraine'
    },
    registrationDate: '2020-01-01T00:00:00.000Z',
    lastUpdated: new Date().toISOString(),
    status: 'active',
    visibility: 'public'
  }
];

function initializeAthletesStorage(): void {
  if (!global.__FUSAF_ATHLETES_STORAGE__) {
    global.__FUSAF_ATHLETES_STORAGE__ = {
      athletes: [...DEMO_ATHLETES],
      lastUpdate: new Date().toISOString(),
      instanceId: `athletes-${Date.now()}`
    };

    if (process.env.NODE_ENV !== 'production') {
      console.log('üèÜ Athletes Storage —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ:', {
        athletes: global.__FUSAF_ATHLETES_STORAGE__.athletes.length,
        instanceId: global.__FUSAF_ATHLETES_STORAGE__.instanceId
      });
    }
  }
}

// –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function calculateAthleteStats(athlete: Athlete): AthleteStats {
  const results = athlete.results;

  const stats: AthleteStats = {
    totalCompetitions: results.length,
    wins: results.filter(r => r.rank === 1).length,
    podiums: results.filter(r => r.rank && r.rank <= 3).length,
    averageScore: 0,
    bestScore: 0,
    competitionsByYear: {},
    medalsByType: { gold: 0, silver: 0, bronze: 0 },
    disciplineStats: {}
  };

  // –°–µ—Ä–µ–¥–Ω—ñ–π —Ç–∞ –Ω–∞–π–∫—Ä–∞—â–∏–π –±–∞–ª
  const scoresWithValues = results.filter(r => r.totalScore);
  if (scoresWithValues.length > 0) {
    stats.averageScore = scoresWithValues.reduce((sum, r) => sum + (r.totalScore || 0), 0) / scoresWithValues.length;
    stats.bestScore = Math.max(...scoresWithValues.map(r => r.totalScore || 0));
  }

  // –ú–µ–¥–∞–ª—ñ
  results.forEach(result => {
    if (result.rank === 1) stats.medalsByType.gold++;
    else if (result.rank === 2) stats.medalsByType.silver++;
    else if (result.rank === 3) stats.medalsByType.bronze++;

    // –ü–æ —Ä–æ–∫–∞–º
    const year = new Date(result.date).getFullYear().toString();
    stats.competitionsByYear[year] = (stats.competitionsByYear[year] || 0) + 1;

    // –ü–æ –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∞—Ö
    const discipline = result.discipline;
    if (!stats.disciplineStats[discipline]) {
      stats.disciplineStats[discipline] = {
        competitions: 0,
        bestRank: Number.POSITIVE_INFINITY,
        averageScore: 0
      };
    }

    stats.disciplineStats[discipline].competitions++;
    if (result.rank && result.rank < stats.disciplineStats[discipline].bestRank) {
      stats.disciplineStats[discipline].bestRank = result.rank;
    }
  });

  // –°–µ—Ä–µ–¥–Ω—ñ–π –±–∞–ª –ø–æ –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∞—Ö
  Object.keys(stats.disciplineStats).forEach(discipline => {
    const disciplineResults = results.filter(r => r.discipline === discipline && r.totalScore);
    if (disciplineResults.length > 0) {
      stats.disciplineStats[discipline].averageScore =
        disciplineResults.reduce((sum, r) => sum + (r.totalScore || 0), 0) / disciplineResults.length;
    }
  });

  return stats;
}

export const AthletesStorage = {
  // –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ—Ö —Å–ø–æ—Ä—Ç—Å–º–µ–Ω—ñ–≤
  getAll(): Athlete[] {
    initializeAthletesStorage();
    const storage = global.__FUSAF_ATHLETES_STORAGE__!;

    if (process.env.NODE_ENV !== 'production') {
      console.log('üèÜ AthletesStorage.getAll():', {
        count: storage.athletes.length,
        lastUpdate: storage.lastUpdate,
        instanceId: storage.instanceId
      });
    }

    return [...storage.athletes];
  },

  // –ó–Ω–∞–π—Ç–∏ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞ –∑–∞ ID
  findById(id: string): Athlete | null {
    initializeAthletesStorage();
    const storage = global.__FUSAF_ATHLETES_STORAGE__!;
    const athlete = storage.athletes.find(athlete => athlete.id === id);

    if (athlete) {
      // –û–±—á–∏—Å–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –∫–æ–∂–Ω–æ–º—É –∑–∞–ø–∏—Ç—ñ
      athlete.stats = calculateAthleteStats(athlete);
    }

    return athlete || null;
  },

  // –ó–Ω–∞–π—Ç–∏ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞ –∑–∞ email
  findByEmail(email: string): Athlete | null {
    initializeAthletesStorage();
    const storage = global.__FUSAF_ATHLETES_STORAGE__!;
    return storage.athletes.find(athlete => athlete.email === email) || null;
  },

  // –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–æ–≥–æ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞
  add(athlete: Athlete): void {
    initializeAthletesStorage();
    const storage = global.__FUSAF_ATHLETES_STORAGE__!;

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω –≤–∂–µ —ñ—Å–Ω—É—î
    const exists = storage.athletes.find(a => a.id === athlete.id || a.email === athlete.email);
    if (!exists) {
      // –î–æ–¥–∞—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
      const newAthlete: Athlete = {
        ...athlete,
        media: athlete.media || [],
        results: athlete.results || [],
        achievements: athlete.achievements || [],
        personalBests: athlete.personalBests || {},
        registrationDate: athlete.registrationDate || new Date().toISOString(),
        lastUpdated: new Date().toISOString(),
        status: athlete.status || 'active',
        visibility: athlete.visibility || 'public'
      };

      // –û–±—á–∏—Å–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      newAthlete.stats = calculateAthleteStats(newAthlete);

      storage.athletes.push(newAthlete);
      storage.lastUpdate = new Date().toISOString();

      if (process.env.NODE_ENV !== 'production') {
        console.log('‚úÖ AthletesStorage.add() –¥–æ–¥–∞–≤ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞:', {
          id: athlete.id,
          name: `${athlete.firstName} ${athlete.lastName}`,
          total: storage.athletes.length
        });
      }
    }
  },

  // –û–Ω–æ–≤–∏—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞
  update(id: string, updates: Partial<Athlete>): boolean {
    initializeAthletesStorage();
    const storage = global.__FUSAF_ATHLETES_STORAGE__!;

    const index = storage.athletes.findIndex(a => a.id === id);
    if (index === -1) return false;

    storage.athletes[index] = {
      ...storage.athletes[index],
      ...updates,
      lastUpdated: new Date().toISOString()
    };

    // –ü–µ—Ä–µ—Ä–∞—Ö–æ–≤—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—ñ—Å–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    storage.athletes[index].stats = calculateAthleteStats(storage.athletes[index]);

    storage.lastUpdate = new Date().toISOString();

    if (process.env.NODE_ENV !== 'production') {
      console.log('‚úÖ AthletesStorage.update() –æ–Ω–æ–≤–∏–≤ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞:', {
        id,
        name: `${storage.athletes[index].firstName} ${storage.athletes[index].lastName}`
      });
    }

    return true;
  },

  // –î–æ–¥–∞—Ç–∏ –º–µ–¥—ñ–∞ –¥–æ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞
  addMedia(athleteId: string, media: MediaItem): boolean {
    initializeAthletesStorage();
    const storage = global.__FUSAF_ATHLETES_STORAGE__!;

    const index = storage.athletes.findIndex(a => a.id === athleteId);
    if (index === -1) return false;

    if (!storage.athletes[index].media) {
      storage.athletes[index].media = [];
    }

    storage.athletes[index].media.push(media);
    storage.athletes[index].lastUpdated = new Date().toISOString();
    storage.lastUpdate = new Date().toISOString();

    console.log('üì∏ –î–æ–¥–∞–Ω–æ –º–µ–¥—ñ–∞:', { athleteId, mediaId: media.id, type: media.type });
    return true;
  },

  // –î–æ–¥–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–º–∞–≥–∞–Ω–Ω—è
  addResult(athleteId: string, result: CompetitionResult): boolean {
    initializeAthletesStorage();
    const storage = global.__FUSAF_ATHLETES_STORAGE__!;

    const index = storage.athletes.findIndex(a => a.id === athleteId);
    if (index === -1) return false;

    storage.athletes[index].results.push(result);

    // –û–Ω–æ–≤–ª—é—î–º–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ —Ä–µ–∫–æ—Ä–¥–∏
    const athlete = storage.athletes[index];
    if (result.totalScore) {
      if (!athlete.personalBests.totalScore || result.totalScore > athlete.personalBests.totalScore.score) {
        athlete.personalBests.totalScore = {
          score: result.totalScore,
          competition: result.competitionName,
          date: result.date
        };
        result.isPersonalBest = true;
      }
    }

    // –ü–µ—Ä–µ—Ä–∞—Ö–æ–≤—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    athlete.stats = calculateAthleteStats(athlete);
    athlete.lastUpdated = new Date().toISOString();
    storage.lastUpdate = new Date().toISOString();

    console.log('üèÖ –î–æ–¥–∞–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', { athleteId, resultId: result.id, competition: result.competitionName });
    return true;
  },

  // –û–Ω–æ–≤–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–º–∞–≥–∞–Ω–Ω—è
  updateResult(athleteId: string, resultId: string, updates: Partial<CompetitionResult>): boolean {
    initializeAthletesStorage();
    const storage = global.__FUSAF_ATHLETES_STORAGE__!;

    const athleteIndex = storage.athletes.findIndex(a => a.id === athleteId);
    if (athleteIndex === -1) return false;

    const resultIndex = storage.athletes[athleteIndex].results.findIndex(r => r.id === resultId);
    if (resultIndex === -1) return false;

    storage.athletes[athleteIndex].results[resultIndex] = {
      ...storage.athletes[athleteIndex].results[resultIndex],
      ...updates
    };

    // –ü–µ—Ä–µ—Ä–∞—Ö–æ–≤—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–∞ —Ä–µ–∫–æ—Ä–¥–∏
    const athlete = storage.athletes[athleteIndex];
    athlete.stats = calculateAthleteStats(athlete);
    athlete.lastUpdated = new Date().toISOString();
    storage.lastUpdate = new Date().toISOString();

    console.log('‚úèÔ∏è –û–Ω–æ–≤–ª–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', { athleteId, resultId });
    return true;
  },

  // –í–∏–¥–∞–ª–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–º–∞–≥–∞–Ω–Ω—è
  deleteResult(athleteId: string, resultId: string): boolean {
    initializeAthletesStorage();
    const storage = global.__FUSAF_ATHLETES_STORAGE__!;

    const athleteIndex = storage.athletes.findIndex(a => a.id === athleteId);
    if (athleteIndex === -1) return false;

    const resultIndex = storage.athletes[athleteIndex].results.findIndex(r => r.id === resultId);
    if (resultIndex === -1) return false;

    storage.athletes[athleteIndex].results.splice(resultIndex, 1);

    // –ü–µ—Ä–µ—Ä–∞—Ö–æ–≤—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const athlete = storage.athletes[athleteIndex];
    athlete.stats = calculateAthleteStats(athlete);
    athlete.lastUpdated = new Date().toISOString();
    storage.lastUpdate = new Date().toISOString();

    console.log('üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', { athleteId, resultId });
    return true;
  },

  // –í–∏–¥–∞–ª–∏—Ç–∏ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞
  remove(id: string): boolean {
    initializeAthletesStorage();
    const storage = global.__FUSAF_ATHLETES_STORAGE__!;

    const index = storage.athletes.findIndex(a => a.id === id);
    if (index === -1) return false;

    const removed = storage.athletes.splice(index, 1)[0];
    storage.lastUpdate = new Date().toISOString();

    if (process.env.NODE_ENV !== 'production') {
      console.log('üóëÔ∏è AthletesStorage.remove() –≤–∏–¥–∞–ª–∏–≤ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞:', {
        id,
        name: `${removed.firstName} ${removed.lastName}`
      });
    }

    return true;
  },

  // –§—ñ–ª—å—Ç—Ä—É–≤–∞—Ç–∏ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω—ñ–≤
  filter(filters: {
    discipline?: string;
    country?: string;
    license?: string;
    surname?: string;
    status?: string;
  }): Athlete[] {
    const athletes = this.getAll();

    return athletes.filter(athlete => {
      if (filters.discipline && filters.discipline !== 'all') {
        if (!athlete.disciplines.includes(filters.discipline)) return false;
      }

      if (filters.country && filters.country !== 'all') {
        if (athlete.country !== filters.country) return false;
      }

      if (filters.license) {
        if (!athlete.license?.toLowerCase().includes(filters.license.toLowerCase())) return false;
      }

      if (filters.surname) {
        if (!athlete.lastName.toLowerCase().includes(filters.surname.toLowerCase())) return false;
      }

      if (filters.status && filters.status !== 'all') {
        if (athlete.status !== filters.status) return false;
      }

      return true;
    });
  },

  // –û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ—Ö —Å–ø–æ—Ä—Ç—Å–º–µ–Ω—ñ–≤ (–∫—Ä—ñ–º –∞–¥–º—ñ–Ω–∞)
  clearExceptAdmin(): void {
    initializeAthletesStorage();
    const storage = global.__FUSAF_ATHLETES_STORAGE__!;

    // –ó–∞–ª–∏—à–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω–∞
    const adminAthlete = storage.athletes.find(a => a.email === 'andfedos@gmail.com');
    storage.athletes = adminAthlete ? [adminAthlete] : [];
    storage.lastUpdate = new Date().toISOString();

    console.log('üßπ AthletesStorage.clearExceptAdmin() –≤–∏–¥–∞–ª–∏–≤ –≤—Å—ñ—Ö –∫—Ä—ñ–º –∞–¥–º—ñ–Ω–∞');
  },

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  getStats() {
    const athletes = this.getAll();
    return {
      total: athletes.length,
      active: athletes.filter(a => a.status === 'active').length,
      inactive: athletes.filter(a => a.status === 'inactive').length,
      suspended: athletes.filter(a => a.status === 'suspended').length,
      retired: athletes.filter(a => a.status === 'retired').length,
      byDiscipline: DISCIPLINES.reduce((acc, discipline) => {
        acc[discipline] = athletes.filter(a => a.disciplines.includes(discipline)).length;
        return acc;
      }, {} as Record<string, number>),
      byCountry: COUNTRIES.reduce((acc, country) => {
        acc[country] = athletes.filter(a => a.country === country).length;
        return acc;
      }, {} as Record<string, number>),
      totalCompetitions: athletes.reduce((sum, a) => sum + a.results.length, 0),
      totalMedia: athletes.reduce((sum, a) => sum + a.media.length, 0),
      storageType: 'ATHLETES_STORAGE_EXTENDED',
      lastUpdate: global.__FUSAF_ATHLETES_STORAGE__?.lastUpdate || new Date().toISOString(),
      instanceId: global.__FUSAF_ATHLETES_STORAGE__?.instanceId || 'not-initialized'
    };
  }
};

export type { Athlete, CompetitionResult, MediaItem, Achievement, PersonalBests, AthleteStats };
