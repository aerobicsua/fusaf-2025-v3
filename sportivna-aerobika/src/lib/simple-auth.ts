// –†–æ–∑—à–∏—Ä–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –±–µ–∑ NextAuth
export interface User {
  id: string;
  email: string;
  name: string;
  roles: string[];
  createdAt?: string;
  lastLogin?: string;
  emailVerified?: boolean;

  // –†–æ–∑—à–∏—Ä–µ–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ—Ñ—ñ–ª—é
  profile?: {
    firstName: string;
    lastName: string;
    middleName: string;
    dateOfBirth: string;
    gender: string;
    phone: string;

    // –ê–¥—Ä–µ—Å–∞
    country: string;
    region: string;
    city: string;
    address: string;
    zipCode: string;

    // –°–ø–æ—Ä—Ç–∏–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
    club: string;
    coach: string;
    sportCategory: string;
    experience: string;
    specialization: string;

    // –û—Å–æ–±–∏—Å—Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
    bio: string;
    website: string;
    socialMedia: {
      instagram: string;
      facebook: string;
      telegram: string;
    };

    // –î–æ—Å—è–≥–Ω–µ–Ω–Ω—è
    achievements: string;
    competitions: Array<{
      name: string;
      date: string;
      place: string;
      category: string;
    }>;

    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    isPublicProfile: boolean;
    showEmail: boolean;
    showPhone: boolean;
    emailNotifications: boolean;

    // –§–∞–π–ª–∏
    avatar: string;
  };
}

export interface RegisterData {
  email: string;
  password: string;
  name: string;
  confirmPassword: string;
  role?: string;
}

// –î–µ–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ (–æ—á–∏—â–µ–Ω–æ - —Ç—ñ–ª—å–∫–∏ —Å—É–ø–µ—Ä–∞–¥–º—ñ–Ω –§–£–°–ê–§)
export const demoUsers: User[] = [
  {
    id: "2",
    email: "afedos@ukr.net",
    name: "–§–µ–¥–æ—Å–µ–Ω–∫–æ –ú–∞—Ä—ñ—è",
    roles: ["athlete", "user"],
    createdAt: "2024-01-01",
    lastLogin: new Date().toISOString(),
    emailVerified: true,
    profile: {
      firstName: "–ú–∞—Ä—ñ—è",
      lastName: "–§–µ–¥–æ—Å–µ–Ω–∫–æ",
      middleName: "–ê–Ω–¥—Ä—ñ—ó–≤–Ω–∞",
      dateOfBirth: "2011-10-19",
      gender: "female",
      phone: "+380671234567",

      // –ê–¥—Ä–µ—Å–∞
      country: "–£–∫—Ä–∞—ó–Ω–∞",
      region: "–º. –ö–∏—ó–≤",
      city: "–ö–∏—ó–≤",
      address: "–≤—É–ª. –°–ø–æ—Ä—Ç–∏–≤–Ω–∞, 10",
      zipCode: "03150",

      // –°–ø–æ—Ä—Ç–∏–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
      club: "",
      coach: "",
      sportCategory: "—é–Ω–∏–π —Å–ø–æ—Ä—Ç—Å–º–µ–Ω",
      experience: "2 —Ä–æ–∫–∏",
      specialization: "individual",

      // –û—Å–æ–±–∏—Å—Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
      bio: "–ó–∞–π–º–∞—é—Å—è —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ—é –∞–µ—Ä–æ–±—ñ–∫–æ—é –∑ 2022 —Ä–æ–∫—É. –õ—é–±–ª—é –≤–∏–≤—á–∞—Ç–∏ –Ω–æ–≤—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ —Ç–∞ –±—Ä–∞—Ç–∏ —É—á–∞—Å—Ç—å —É –∑–º–∞–≥–∞–Ω–Ω—è—Ö.",
      website: "",
      socialMedia: {
        instagram: "",
        facebook: "",
        telegram: ""
      },

      // –î–æ—Å—è–≥–Ω–µ–Ω–Ω—è
      achievements: "",
      competitions: [],

      // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
      isPublicProfile: true,
      showEmail: false,
      showPhone: false,
      emailNotifications: true,

      // –§–∞–π–ª–∏
      avatar: ""
    }
  }
];

// –î–µ–º–æ –ø–∞—Ä–æ–ª—ñ (–≤—Å—ñ –æ–¥–Ω–∞–∫–æ–≤—ñ)
export const DEMO_PASSWORD = "password123";

// –í–∞–ª—ñ–¥–∞—Ü—ñ—è email
export function isValidEmail(email: string): boolean {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
}

// –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–∞—Ä–æ–ª—è (—Å–ø—Ä–æ—â–µ–Ω–∞)
export function isValidPassword(password: string): { valid: boolean; errors: string[] } {
  const errors: string[] = [];

  if (password.length < 6) {
    errors.push("–ü–∞—Ä–æ–ª—å –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 6 —Å–∏–º–≤–æ–ª—ñ–≤");
  }

  return { valid: errors.length === 0, errors };
}

// –ü—Ä–æ—Å—Ç–∏–π –ª–æ–≥—ñ–Ω
export function simpleLogin(email: string, password: string): User | null {
  if (password !== DEMO_PASSWORD) {
    return null;
  }

  console.log('üîê simpleLogin: –õ–æ–≥—ñ–Ω –¥–ª—è', email);

  // –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤ localStorage
  const existingUserData = localStorage.getItem('simple-auth-user');
  if (existingUserData) {
    try {
      const existingUser = JSON.parse(existingUserData) as User;
      if (existingUser.email === email) {
        console.log('üîê simpleLogin: –ó–Ω–∞–π—à–ª–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ localStorage');
        console.log('üîê simpleLogin: –ê–≤–∞—Ç–∞—Ä –≤ localStorage:', existingUser.profile?.avatar ? '—î' : '–Ω–µ–º–∞—î');

        // –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –≤—Ö–æ–¥—É
        existingUser.lastLogin = new Date().toISOString();

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ
        localStorage.setItem('simple-auth-user', JSON.stringify(existingUser));

        return existingUser;
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è simpleLogin: –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É localStorage:', error);
    }
  }

  // –Ø–∫—â–æ –Ω–µ–º–∞—î –≤ localStorage, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ—Å—Ç—ñ–π–Ω–µ —Å—Ö–æ–≤–∏—â–µ –æ–Ω–æ–≤–ª–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
  const updatedUsersKey = 'fusaf-updated-users';
  try {
    const updatedUsersData = localStorage.getItem(updatedUsersKey);
    if (updatedUsersData) {
      const updatedUsers = JSON.parse(updatedUsersData) as { [email: string]: User };
      const updatedUser = updatedUsers[email];

      if (updatedUser) {
        console.log('üîê simpleLogin: –ó–Ω–∞–π—à–ª–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –ø–æ—Å—Ç—ñ–π–Ω–æ–º—É —Å—Ö–æ–≤–∏—â—ñ!');
        console.log('üîê simpleLogin: –ê–≤–∞—Ç–∞—Ä –≤ –ø–æ—Å—Ç—ñ–π–Ω–æ–º—É —Å—Ö–æ–≤–∏—â—ñ:', updatedUser.profile?.avatar ? '—î' : '–Ω–µ–º–∞—î');

        // –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –≤—Ö–æ–¥—É
        updatedUser.lastLogin = new Date().toISOString();

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –∞–∫—Ç–∏–≤–Ω—É —Å–µ—Å—ñ—é
        localStorage.setItem('simple-auth-user', JSON.stringify(updatedUser));

        return updatedUser;
      }
    }
  } catch (error) {
    console.warn('‚ö†Ô∏è simpleLogin: –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –ø–æ—Å—Ç—ñ–π–Ω–æ–≥–æ —Å—Ö–æ–≤–∏—â–∞:', error);
  }

  // –Ø–∫—â–æ –Ω–µ–º–∞—î –≤ –ø–æ—Å—Ç—ñ–π–Ω–æ–º—É —Å—Ö–æ–≤–∏—â—ñ, –±–µ—Ä–µ–º –∑ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ demoUsers
  const user = demoUsers.find(u => u.email === email);
  if (!user) {
    console.log('‚ùå simpleLogin: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ demoUsers');
    return null;
  }

  console.log('üîê simpleLogin: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ demoUsers (–±–µ–∑ –∞–≤–∞—Ç–∞—Ä–∞)');

  // –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –≤—Ö–æ–¥—É
  user.lastLogin = new Date().toISOString();

  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ localStorage
  localStorage.setItem('simple-auth-user', JSON.stringify(user));

  return user;
}

// –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
export async function simpleRegister(data: RegisterData): Promise<{ success: boolean; error?: string; user?: User }> {
  // –í–∞–ª—ñ–¥–∞—Ü—ñ—ó
  if (!isValidEmail(data.email)) {
    return { success: false, error: "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π email –∞–¥—Ä–µ—Å" };
  }

  if (data.password !== data.confirmPassword) {
    return { success: false, error: "–ü–∞—Ä–æ–ª—ñ –Ω–µ —Å–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å" };
  }

  const passwordCheck = isValidPassword(data.password);
  if (!passwordCheck.valid) {
    return { success: false, error: passwordCheck.errors.join(", ") };
  }

  if (!data.name.trim()) {
    return { success: false, error: "–Ü–º'—è –æ–±–æ–≤'—è–∑–∫–æ–≤–µ" };
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î
  const existingUser = demoUsers.find(u => u.email.toLowerCase() === data.email.toLowerCase());
  if (existingUser) {
    return { success: false, error: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º email –≤–∂–µ —ñ—Å–Ω—É—î" };
  }

  // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  const newUser: User = {
    id: (demoUsers.length + 1).toString(),
    email: data.email.toLowerCase(),
    name: data.name.trim(),
    roles: [data.role || "athlete", "user"],
    createdAt: new Date().toISOString(),
    lastLogin: new Date().toISOString(),
    emailVerified: false
  };

  // –î–æ–¥–∞—î–º–æ –¥–æ –¥–µ–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
  demoUsers.push(newUser);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—ñ—Å–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
  localStorage.setItem('simple-auth-user', JSON.stringify(newUser));

  // –ù–∞–¥—Å–∏–ª–∞—î–º–æ email –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
  try {
    const { sendRegistrationEmail } = await import('@/lib/email-service');
    const emailResult = await sendRegistrationEmail({
      name: newUser.name,
      email: newUser.email,
      role: newUser.roles[0] || 'athlete'
    });

    console.log('üìß Email —Å—Ç–∞—Ç—É—Å:', emailResult);
  } catch (error) {
    console.warn('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è email:', error);
    // –ù–µ –±–ª–æ–∫—É—î–º–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é —á–µ—Ä–µ–∑ –ø–æ–º–∏–ª–∫—É email
  }

  return { success: true, user: newUser };
}

// –°–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è (–∑–∞–≥–ª—É—à–∫–∞)
export function resetPassword(email: string): { success: boolean; message: string } {
  if (!isValidEmail(email)) {
    return { success: false, message: "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π email –∞–¥—Ä–µ—Å" };
  }

  const user = demoUsers.find(u => u.email.toLowerCase() === email.toLowerCase());
  if (!user) {
    return { success: false, message: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–∞–∫–∏–º email –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" };
  }

  return {
    success: true,
    message: `–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞ ${email}. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø–æ—à—Ç–æ–≤—É —Å–∫—Ä–∏–Ω—å–∫—É.`
  };
}

// –ó–º—ñ–Ω–∞ –ø–∞—Ä–æ–ª—è
export function changePassword(currentPassword: string, newPassword: string): { success: boolean; error?: string } {
  const user = getCurrentUser();
  if (!user) {
    return { success: false, error: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π" };
  }

  if (currentPassword !== DEMO_PASSWORD) {
    return { success: false, error: "–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–æ—Ç–æ—á–Ω–∏–π –ø–∞—Ä–æ–ª—å" };
  }

  const passwordCheck = isValidPassword(newPassword);
  if (!passwordCheck.valid) {
    return { success: false, error: passwordCheck.errors.join(", ") };
  }

  return { success: true };
}

// –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
export function getCurrentUser(): User | null {
  if (typeof window === 'undefined') return null;

  try {
    const userData = localStorage.getItem('simple-auth-user');
    if (!userData) {
      console.log('üîç getCurrentUser: localStorage –ø–æ—Ä–æ–∂–Ω—ñ–π');
      return null;
    }

    const user = JSON.parse(userData) as User;
    console.log('üîç getCurrentUser: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞', user.email, 'avatar:', user.profile?.avatar ? '—î' : '–Ω–µ–º–∞—î');
    return user;
  } catch (error) {
    console.error('‚ùå getCurrentUser: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', error);
    return null;
  }
}

// –û–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
export function updateUser(updates: Partial<User>): { success: boolean; error?: string } {
  const user = getCurrentUser();
  if (!user) {
    return { success: false, error: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π" };
  }

  try {
    const updatedUser = { ...user, ...updates };
    console.log('üíæ updateUser: –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', {
      userId: user.id,
      email: user.email,
      hasProfile: !!updates.profile,
      profileAvatar: updates.profile?.avatar ? '–º–∞—î –∞–≤–∞—Ç–∞—Ä' : '–Ω–µ–º–∞—î –∞–≤–∞—Ç–∞—Ä–∞'
    });

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ localStorage (–ø–æ—Ç–æ—á–Ω–∞ —Å–µ—Å—ñ—è)
    localStorage.setItem('simple-auth-user', JSON.stringify(updatedUser));
    console.log('üíæ updateUser: –ó–±–µ—Ä–µ–∂–µ–Ω–æ –≤ localStorage');

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –ü–û–°–¢–Ü–ô–ù–ï —Å—Ö–æ–≤–∏—â–µ –æ–Ω–æ–≤–ª–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    const updatedUsersKey = 'fusaf-updated-users';
    try {
      let updatedUsers: { [email: string]: User } = {};

      const existing = localStorage.getItem(updatedUsersKey);
      if (existing) {
        updatedUsers = JSON.parse(existing);
      }

      updatedUsers[updatedUser.email] = updatedUser;
      localStorage.setItem(updatedUsersKey, JSON.stringify(updatedUsers));

      console.log('üíæ updateUser: –ó–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –ü–û–°–¢–Ü–ô–ù–ï —Å—Ö–æ–≤–∏—â–µ');
      console.log('üíæ updateUser: –ê–≤–∞—Ç–∞—Ä –≤ –ø–æ—Å—Ç—ñ–π–Ω–æ–º—É —Å—Ö–æ–≤–∏—â—ñ:', updatedUsers[updatedUser.email].profile?.avatar ? '—î' : '–Ω–µ–º–∞—î');
    } catch (error) {
      console.warn('‚ö†Ô∏è updateUser: –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –ø–æ—Å—Ç—ñ–π–Ω–µ —Å—Ö–æ–≤–∏—â–µ:', error);
    }

    // –û–Ω–æ–≤–ª—é—î–º–æ –≤ –¥–µ–º–æ —Å–ø–∏—Å–∫—É (–¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å–µ—Å—ñ—ó)
    const userIndex = demoUsers.findIndex(u => u.id === user.id);
    if (userIndex !== -1) {
      demoUsers[userIndex] = updatedUser;
      console.log('üíæ updateUser: –û–Ω–æ–≤–ª–µ–Ω–æ –≤ demoUsers[' + userIndex + ']');
      console.log('üíæ updateUser: –ê–≤–∞—Ç–∞—Ä –≤ demoUsers:', demoUsers[userIndex].profile?.avatar ? '—î' : '–Ω–µ–º–∞—î');
    } else {
      console.warn('‚ö†Ô∏è updateUser: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ demoUsers!', user.id);
    }

    return { success: true };
  } catch (error) {
    console.error('‚ùå updateUser: –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', error);
    return { success: false, error: "–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö" };
  }
}

// –í–∏–π—Ç–∏
export function simpleLogout(): void {
  console.log('üö™ simpleLogout: –í–∏—Ö–æ–¥–∏–º–æ –∑ —Å–∏—Å—Ç–µ–º–∏');

  // –ü–µ—Ä–µ–¥ –≤–∏—Ö–æ–¥–æ–º –ø–µ—Ä–µ–∫–æ–Ω–∞—î–º–æ—Å—è, —â–æ –≤—Å—ñ –∑–º—ñ–Ω–∏ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –ü–û–°–¢–Ü–ô–ù–û
  const currentUser = getCurrentUser();
  if (currentUser) {
    console.log('üö™ simpleLogout: –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ –∑–º—ñ–Ω–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ü–û–°–¢–Ü–ô–ù–û');
    console.log('üö™ simpleLogout: –ê–≤–∞—Ç–∞—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', currentUser.profile?.avatar ? '—î' : '–Ω–µ–º–∞—î');

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –ø–æ—Å—Ç—ñ–π–Ω–µ —Å—Ö–æ–≤–∏—â–µ –æ–Ω–æ–≤–ª–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    const updatedUsersKey = 'fusaf-updated-users';
    let updatedUsers: { [email: string]: User } = {};

    try {
      const existing = localStorage.getItem(updatedUsersKey);
      if (existing) {
        updatedUsers = JSON.parse(existing);
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:', error);
    }

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    updatedUsers[currentUser.email] = currentUser;
    localStorage.setItem(updatedUsersKey, JSON.stringify(updatedUsers));

    console.log('üö™ simpleLogout: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –ø–æ—Å—Ç—ñ–π–Ω–µ —Å—Ö–æ–≤–∏—â–µ');
    console.log('üö™ simpleLogout: –ê–≤–∞—Ç–∞—Ä –≤ –ø–æ—Å—Ç—ñ–π–Ω–æ–º—É —Å—Ö–æ–≤–∏—â—ñ:', updatedUsers[currentUser.email].profile?.avatar ? '—î' : '–Ω–µ–º–∞—î');
  }

  // –û—á–∏—â–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–æ—Ç–æ—á–Ω—É —Å–µ—Å—ñ—é, –∞–ª–µ –ù–ï –ø–æ—Å—Ç—ñ–π–Ω—ñ –¥–∞–Ω—ñ
  localStorage.removeItem('simple-auth-user');
  window.location.href = '/';
}

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–ª–µ–π
export function hasRole(role: string): boolean {
  const user = getCurrentUser();
  return user?.roles.includes(role) || false;
}

export function hasAnyRole(roles: string[]): boolean {
  const user = getCurrentUser();
  if (!user) return false;
  return roles.some(role => user.roles.includes(role));
}

// –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤)
export function getAllUsers(): User[] {
  const currentUser = getCurrentUser();
  if (!currentUser?.roles.includes('admin')) {
    console.warn('–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ: —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤');
    return [];
  }

  return demoUsers;
}

// –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤)
export function deleteUser(userId: string): { success: boolean; error?: string } {
  const currentUser = getCurrentUser();
  if (!currentUser?.roles.includes('admin')) {
    return { success: false, error: "–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ" };
  }

  const userIndex = demoUsers.findIndex(u => u.id === userId);
  if (userIndex === -1) {
    return { success: false, error: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" };
  }

  if (demoUsers[userIndex].id === currentUser.id) {
    return { success: false, error: "–ù–µ–º–æ–∂–Ω–∞ –≤–∏–¥–∞–ª–∏—Ç–∏ –≤–ª–∞—Å–Ω–∏–π –∞–∫–∞—É–Ω—Ç" };
  }

  demoUsers.splice(userIndex, 1);

  return { success: true };
}
