// SimpleAuth –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é MySQL API
export interface User {
  id: string;
  email: string;
  name: string;
  roles: string[];
  createdAt?: string;
  lastLogin?: string;
  emailVerified?: boolean;

  // –†–æ–∑—à–∏—Ä–µ–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ—Ñ—ñ–ª—é
  profile?: {
    firstName: string;
    lastName: string;
    middleName: string;
    dateOfBirth: string;
    gender: string;
    phone: string;

    // –ê–¥—Ä–µ—Å–∞
    country: string;
    region: string;
    city: string;
    address: string;
    zipCode: string;

    // –°–ø–æ—Ä—Ç–∏–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
    club: string;
    coach: string;
    sportCategory: string;
    experience: string;
    specialization: string;

    // –û—Å–æ–±–∏—Å—Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
    bio: string;
    website: string;
    socialMedia: {
      instagram: string;
      facebook: string;
      telegram: string;
    };

    // –î–æ—Å—è–≥–Ω–µ–Ω–Ω—è
    achievements: string;
    competitions: Array<{
      name: string;
      date: string;
      place: string;
      category: string;
    }>;

    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    isPublicProfile: boolean;
    showEmail: boolean;
    showPhone: boolean;
    emailNotifications: boolean;

    // –§–∞–π–ª–∏
    avatar: string;
    documents: Array<{
      name: string;
      type: string;
      url: string;
    }>;
  };
}

export interface RegisterData {
  email: string;
  password: string;
  name: string;
  confirmPassword: string;
  role?: string;
}

// –í–∞–ª—ñ–¥–∞—Ü—ñ—è email
export function isValidEmail(email: string): boolean {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
}

// –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–∞—Ä–æ–ª—è
export function isValidPassword(password: string): { valid: boolean; errors: string[] } {
  const errors: string[] = [];

  if (password.length < 6) {
    errors.push("–ü–∞—Ä–æ–ª—å –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 6 —Å–∏–º–≤–æ–ª—ñ–≤");
  }

  return { valid: errors.length === 0, errors };
}

// –õ–æ–≥—ñ–Ω —á–µ—Ä–µ–∑ API
export async function mysqlLogin(email: string, password: string): Promise<{ success: boolean; user?: User; error?: string }> {
  try {
    console.log('üîê mysqlLogin: –õ–æ–≥—ñ–Ω –¥–ª—è', email);

    const response = await fetch('/api/auth/login', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ email, password }),
    });

    const data = await response.json();

    if (!response.ok) {
      console.log('‚ùå mysqlLogin: –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ API:', data.error);
      return { success: false, error: data.error || '–ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É' };
    }

    if (data.success && data.user) {
      console.log('‚úÖ mysqlLogin: –£—Å–ø—ñ—à–Ω–∏–π –ª–æ–≥—ñ–Ω –¥–ª—è', email);

      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ localStorage –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å–µ—Å—ñ—ó
      localStorage.setItem('simple-auth-user', JSON.stringify(data.user));

      return { success: true, user: data.user };
    } else {
      console.log('‚ùå mysqlLogin: –ù–µ–≤–¥–∞–ª–∞ —Å–ø—Ä–æ–±–∞ –ª–æ–≥—ñ–Ω—É');
      return { success: false, error: data.error || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞' };
    }

  } catch (error) {
    console.error('‚ùå mysqlLogin: –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É:', error);
    return { success: false, error: '–ü–æ–º–∏–ª–∫–∞ –∑\'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º' };
  }
}

// –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —á–µ—Ä–µ–∑ API
export async function mysqlRegister(data: RegisterData): Promise<{ success: boolean; error?: string; user?: User }> {
  try {
    console.log('üìù mysqlRegister: –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –¥–ª—è', data.email);

    const response = await fetch('/api/auth/register', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(data),
    });

    const result = await response.json();

    if (!response.ok) {
      console.log('‚ùå mysqlRegister: –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ API:', result.error);
      return { success: false, error: result.error || '–ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó' };
    }

    if (result.success && result.user) {
      console.log('‚úÖ mysqlRegister: –£—Å–ø—ñ—à–Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –¥–ª—è', data.email);

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—ñ—Å–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
      localStorage.setItem('simple-auth-user', JSON.stringify(result.user));

      return { success: true, user: result.user };
    } else {
      console.log('‚ùå mysqlRegister: –ù–µ–≤–¥–∞–ª–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è');
      return { success: false, error: result.error || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞' };
    }

  } catch (error) {
    console.error('‚ùå mysqlRegister: –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É:', error);
    return { success: false, error: '–ü–æ–º–∏–ª–∫–∞ –∑\'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º' };
  }
}

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é —á–µ—Ä–µ–∑ API
export async function mysqlUpdateUser(updates: Partial<User>): Promise<{ success: boolean; error?: string; user?: User }> {
  try {
    const currentUser = getCurrentUser();
    if (!currentUser) {
      return { success: false, error: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π' };
    }

    console.log('üíæ mysqlUpdateUser: –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –¥–ª—è', currentUser.email);
    console.log('üíæ mysqlUpdateUser: –î–∞–Ω—ñ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:', {
      hasProfile: !!updates.profile,
      profileAvatar: updates.profile?.avatar ? '–º–∞—î –∞–≤–∞—Ç–∞—Ä' : '–Ω–µ–º–∞—î –∞–≤–∞—Ç–∞—Ä–∞'
    });

    const response = await fetch('/api/auth/profile', {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        userId: currentUser.id,
        name: updates.name,
        profile: updates.profile
      }),
    });

    const result = await response.json();

    if (!response.ok) {
      console.log('‚ùå mysqlUpdateUser: –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ API:', result.error);
      return { success: false, error: result.error || '–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é' };
    }

    if (result.success && result.user) {
      console.log('‚úÖ mysqlUpdateUser: –ü—Ä–æ—Ñ—ñ–ª—å –æ–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ');

      // –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ localStorage
      localStorage.setItem('simple-auth-user', JSON.stringify(result.user));

      return { success: true, user: result.user };
    } else {
      console.log('‚ùå mysqlUpdateUser: –ù–µ–≤–¥–∞–ª–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è');
      return { success: false, error: result.error || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞' };
    }

  } catch (error) {
    console.error('‚ùå mysqlUpdateUser: –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É:', error);
    return { success: false, error: '–ü–æ–º–∏–ª–∫–∞ –∑\'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º' };
  }
}

// –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–∑ localStorage)
export function getCurrentUser(): User | null {
  if (typeof window === 'undefined') return null;

  try {
    const userData = localStorage.getItem('simple-auth-user');
    if (!userData) {
      console.log('üîç getCurrentUser: localStorage –ø–æ—Ä–æ–∂–Ω—ñ–π');
      return null;
    }

    const user = JSON.parse(userData) as User;
    console.log('üîç getCurrentUser: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞', user.email, 'avatar:', user.profile?.avatar ? '—î' : '–Ω–µ–º–∞—î');
    return user;
  } catch (error) {
    console.error('‚ùå getCurrentUser: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', error);
    return null;
  }
}

// –°–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è (–∑–∞–≥–ª—É—à–∫–∞)
export function resetPassword(email: string): { success: boolean; message: string } {
  if (!isValidEmail(email)) {
    return { success: false, message: "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π email –∞–¥—Ä–µ—Å" };
  }

  // TODO: –†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —á–µ—Ä–µ–∑ API
  return {
    success: true,
    message: `–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞ ${email}. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø–æ—à—Ç–æ–≤—É —Å–∫—Ä–∏–Ω—å–∫—É.`
  };
}

// –ó–º—ñ–Ω–∞ –ø–∞—Ä–æ–ª—è (–∑–∞–≥–ª—É—à–∫–∞)
export function changePassword(currentPassword: string, newPassword: string): { success: boolean; error?: string } {
  const user = getCurrentUser();
  if (!user) {
    return { success: false, error: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π" };
  }

  const passwordCheck = isValidPassword(newPassword);
  if (!passwordCheck.valid) {
    return { success: false, error: passwordCheck.errors.join(", ") };
  }

  // TODO: –†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —á–µ—Ä–µ–∑ API
  return { success: true };
}

// –í–∏–π—Ç–∏
export function mysqlLogout(): void {
  console.log('üö™ mysqlLogout: –í–∏—Ö–æ–¥–∏–º–æ –∑ —Å–∏—Å—Ç–µ–º–∏');

  // –û—á–∏—â–∞—î–º–æ localStorage
  localStorage.removeItem('simple-auth-user');

  // TODO: –Ü–Ω–≤–∞–ª—ñ–¥—É–≤–∞—Ç–∏ JWT —Ç–æ–∫–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ

  window.location.href = '/';
}

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–ª–µ–π
export function hasRole(role: string): boolean {
  const user = getCurrentUser();
  return user?.roles.includes(role) || false;
}

export function hasAnyRole(roles: string[]): boolean {
  const user = getCurrentUser();
  if (!user) return false;
  return roles.some(role => user.roles.includes(role));
}

// –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤)
export async function getAllUsers(): Promise<User[]> {
  const currentUser = getCurrentUser();
  if (!currentUser?.roles.includes('admin')) {
    console.warn('–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ: —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤');
    return [];
  }

  // TODO: –†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —á–µ—Ä–µ–∑ API
  return [];
}

// –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤)
export async function deleteUser(userId: string): Promise<{ success: boolean; error?: string }> {
  const currentUser = getCurrentUser();
  if (!currentUser?.roles.includes('admin')) {
    return { success: false, error: "–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ" };
  }

  if (userId === currentUser.id) {
    return { success: false, error: "–ù–µ–º–æ–∂–Ω–∞ –≤–∏–¥–∞–ª–∏—Ç–∏ –≤–ª–∞—Å–Ω–∏–π –∞–∫–∞—É–Ω—Ç" };
  }

  // TODO: –†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —á–µ—Ä–µ–∑ API
  return { success: true };
}

// –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å MySQL API)
export const simpleLogin = mysqlLogin;
export const simpleRegister = mysqlRegister;
export const updateUser = mysqlUpdateUser;
export const simpleLogout = mysqlLogout;
