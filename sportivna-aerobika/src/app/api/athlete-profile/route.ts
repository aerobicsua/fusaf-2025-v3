import { NextRequest, NextResponse } from 'next/server';
import { getApiSession } from '@/lib/auth';
// authOptions removed
import { z } from 'zod';

// Zod —Å—Ö–µ–º–∏ –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
const athleteProfileSchema = z.object({
  firstName: z.string().min(1, "–Ü–º'—è –æ–±–æ–≤'—è–∑–∫–æ–≤–µ").max(50, "–Ü–º'—è –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–µ"),
  lastName: z.string().min(1, "–ü—Ä—ñ–∑–≤–∏—â–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–µ").max(50, "–ü—Ä—ñ–∑–≤–∏—â–µ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–µ"),
  middleName: z.string().max(50, "–ü–æ –±–∞—Ç—å–∫–æ–≤—ñ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–µ").optional(),
  dateOfBirth: z.string().min(1, "–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –æ–±–æ–≤'—è–∑–∫–æ–≤–∞"),
  age: z.number().optional(),
  gender: z.enum(['male', 'female'], { message: "–û–±–µ—Ä—ñ—Ç—å —Å—Ç–∞—Ç—å" }),
  firstNameEn: z.string().max(50, "–ê–Ω–≥–ª—ñ–π—Å—å–∫–µ —ñ–º'—è –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–µ").optional(),
  lastNameEn: z.string().max(50, "–ê–Ω–≥–ª—ñ–π—Å—å–∫–µ –ø—Ä—ñ–∑–≤–∏—â–µ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–µ").optional(),
  passport: z.string().max(20, "–ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π").optional(),
  email: z.string().email("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç email"),
  phone: z.string().min(1, "–¢–µ–ª–µ—Ñ–æ–Ω –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π").regex(/^\+380\d{9}$/, "–¢–µ–ª–µ—Ñ–æ–Ω –º–∞—î –±—É—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç—ñ +380XXXXXXXXX"),
  region: z.string().min(1, "–û–±–ª–∞—Å—Ç—å –æ–±–æ–≤'—è–∑–∫–æ–≤–∞"),
  city: z.string().min(1, "–ú—ñ—Å—Ç–æ –æ–±–æ–≤'—è–∑–∫–æ–≤–µ").max(100, "–ù–∞–∑–≤–∞ –º—ñ—Å—Ç–∞ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∞"),
  address: z.string().min(1, "–ê–¥—Ä–µ—Å–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–∞").max(200, "–ê–¥—Ä–µ—Å–∞ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∞"),
  club: z.string().min(1, "–ö–ª—É–± –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π"),
  coach: z.string().max(100, "–Ü–º'—è —Ç—Ä–µ–Ω–µ—Ä–∞ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–µ").optional(),
  sportCategory: z.string().min(1, "–°–ø–æ—Ä—Ç–∏–≤–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è –æ–±–æ–≤'—è–∑–∫–æ–≤–∞"),
  experience: z.string().min(1, "–°—Ç–∞–∂ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π").max(100, "–û–ø–∏—Å —Å—Ç–∞–∂—É –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π"),
  achievements: z.string().max(1000, "–û–ø–∏—Å –¥–æ—Å—è–≥–Ω–µ–Ω—å –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π").optional(),
  fullName: z.string().optional()
});

const updateProfileSchema = z.object({
  athleteId: z.string().min(1, "ID —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π"),
  updates: athleteProfileSchema.partial()
});

// –ü–æ–∫—Ä–∞—â–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ email –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async function sendProfileUpdateNotification(profile: any, updatedFields: string[]) {
  const emailData = {
    to: profile.email,
    subject: '–ü—Ä–æ—Ñ—ñ–ª—å —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞ –§–£–°–ê–§ –æ–Ω–æ–≤–ª–µ–Ω–æ',
    html: `
      <h2>–í—ñ—Ç–∞—î–º–æ, ${profile.fullName}!</h2>

      <p>–í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞ –≤ –§–£–°–ê–§ –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ.</p>

      <div style="background: #f8f9fa; padding: 15px; border-radius: 8px; margin: 20px 0;">
        <h3>üìù –û–Ω–æ–≤–ª–µ–Ω—ñ –ø–æ–ª—è:</h3>
        <ul>
          ${updatedFields.map(field => `<li><strong>${field}</strong></li>`).join('')}
        </ul>
        <p><strong>–î–∞—Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:</strong> ${new Date().toLocaleString('uk-UA')}</p>
      </div>

      <p>üîí <strong>–ë–µ–∑–ø–µ–∫–∞:</strong> –Ø–∫—â–æ —Ü—ñ –∑–º—ñ–Ω–∏ –∑—Ä–æ–±–∏–ª–∏ –Ω–µ –≤–∏, –Ω–µ–≥–∞–π–Ω–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ —Å–ª—É–∂–±–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.</p>

      <p>–í–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–≤—ñ–π –æ–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å –≤ –æ—Å–æ–±–∏—Å—Ç–æ–º—É –∫–∞–±—ñ–Ω–µ—Ç—ñ.</p>

      <p>–ó –ø–æ–≤–∞–≥–æ—é,<br>–ö–æ–º–∞–Ω–¥–∞ –§–£–°–ê–§</p>

      <hr>
      <p style="color: #666; font-size: 12px;">
        –§–µ–¥–µ—Ä–∞—Ü—ñ—è –£–∫—Ä–∞—ó–Ω–∏ –∑—ñ –°–ø–æ—Ä—Ç–∏–≤–Ω–æ—ó –ê–µ—Ä–æ–±—ñ–∫–∏ —ñ –§—ñ—Ç–Ω–µ—Å—É<br>
        Email: info@fusaf.org.ua | –¢–µ–ª–µ—Ñ–æ–Ω: +38 (050) 123-45-67
      </p>
    `
  };

  // –í —Ä–µ–∞–ª—å–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—ñ —Ç—É—Ç –±—É–¥–µ Resend –∞–±–æ SendGrid
  console.log(`üìß EMAIL –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø –ü–†–û –û–ù–û–í–õ–ï–ù–ù–Ø –ü–†–û–§–Ü–õ–Æ:`);
  console.log(`‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ`);
  console.log(`–î–æ: ${emailData.to}`);
  console.log(`–¢–µ–º–∞: ${emailData.subject}`);
  console.log(`–û–Ω–æ–≤–ª–µ–Ω—ñ –ø–æ–ª—è: ${updatedFields.join(', ')}`);
  console.log(`–ß–∞—Å –≤—ñ–¥–ø—Ä–∞–≤–∫–∏: ${new Date().toISOString()}`);
  console.log(`‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ`);

  // TODO: –ü—ñ–¥–∫–ª—é—á–∏—Ç–∏ —Ä–µ–∞–ª—å–Ω–∏–π email —Å–µ—Ä–≤—ñ—Å
  // await emailService.send(emailData);
}

// –¢–∏–º—á–∞—Å–æ–≤–µ —Å—Ö–æ–≤–∏—â–µ –ø—Ä–æ—Ñ—ñ–ª—ñ–≤ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω—ñ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—ñ - –±–∞–∑–∞ –¥–∞–Ω–∏—Ö)
const athleteProfiles = new Map<string, any>();

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
if (athleteProfiles.size === 0) {
  athleteProfiles.set('athlete-1705234567890', {
    id: "athlete-1705234567890",
    userId: "1",
    firstName: "–Ü–≤–∞–Ω",
    lastName: "–Ü–≤–∞–Ω–æ–≤",
    middleName: "–Ü–≤–∞–Ω–æ–≤–∏—á",
    fullName: "–Ü–≤–∞–Ω–æ–≤ –Ü–≤–∞–Ω –Ü–≤–∞–Ω–æ–≤–∏—á",
    dateOfBirth: "2000-03-15",
    age: 24,
    gender: "male",
    firstNameEn: "Ivan",
    lastNameEn: "Ivanov",
    passport: "AA123456",
    email: "ivan.ivanov@example.com",
    phone: "+380671234567",
    region: "–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
    city: "–ö–∏—ó–≤",
    address: "–≤—É–ª. –•—Ä–µ—â–∞—Ç–∏–∫, 1, –∫–≤. 1",
    club: "–°–ö –ö–∏—ó–≤ –ê–µ—Ä–æ–±—ñ–∫",
    coach: "–Ü–≤–∞–Ω–æ–≤–∞ –û–ª–µ–Ω–∞ –ü–µ—Ç—Ä—ñ–≤–Ω–∞",
    sportCategory: "1 —Å–ø–æ—Ä—Ç–∏–≤–Ω–∏–π —Ä–æ–∑—Ä—è–¥",
    experience: "5 —Ä–æ–∫—ñ–≤",
    achievements: "–ü–µ—Ä–µ–º–æ–∂–µ—Ü—å —á–µ–º–ø—ñ–æ–Ω–∞—Ç—É –º—ñ—Å—Ç–∞ –ö–∏—ó–≤ 2023, —É—á–∞—Å–Ω–∏–∫ —á–µ–º–ø—ñ–æ–Ω–∞—Ç—É –£–∫—Ä–∞—ó–Ω–∏ 2024",
    files: {
      photo: "photo-1705234567890",
      medicalCertificate: "medical-1705234567890",
      parentalConsent: null
    },
    photoUrl: "/api/files/photo-1705234567890",
    membershipPaid: true,
    membershipExpiryDate: "2025-12-31",
    status: "active",
    registrationDate: "2024-01-15T10:30:00Z",
    lastUpdated: new Date().toISOString()
  });

  // –î–æ–¥–∞—î–º–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ä–æ–ª—å—é athlete
  athleteProfiles.set('athlete-2', {
    id: "athlete-2",
    userId: "2",
    firstName: "–¢–µ—Å—Ç–æ–≤–∏–π",
    lastName: "–°–ø–æ—Ä—Ç—Å–º–µ–Ω",
    middleName: "",
    fullName: "–°–ø–æ—Ä—Ç—Å–º–µ–Ω –¢–µ—Å—Ç–æ–≤–∏–π",
    dateOfBirth: "1995-05-20",
    age: 29,
    gender: "male",
    firstNameEn: "Test",
    lastNameEn: "Athlete",
    passport: "",
    email: "athlete@fusaf.org.ua",
    phone: "+380501234567",
    region: "–º. –ö–∏—ó–≤",
    city: "–ö–∏—ó–≤",
    address: "–≤—É–ª. –¢–µ—Å—Ç–æ–≤–∞, 5, –∫–≤. 10",
    club: "–°–ö –õ—å–≤—ñ–≤ –§—ñ—Ç–Ω–µ—Å",
    coach: "–ö–æ–≤–∞–ª–µ–Ω–∫–æ –ú–∞—Ä–∏–Ω–∞ –°–µ—Ä–≥—ñ—ó–≤–Ω–∞",
    sportCategory: "–ö–∞–Ω–¥–∏–¥–∞—Ç —É –º–∞–π—Å—Ç—Ä–∏ —Å–ø–æ—Ä—Ç—É",
    experience: "8 —Ä–æ–∫—ñ–≤",
    achievements: "–£—á–∞—Å–Ω–∏–∫ —á–µ–º–ø—ñ–æ–Ω–∞—Ç—É –£–∫—Ä–∞—ó–Ω–∏, –ø—Ä–∏–∑–µ—Ä —Ä–µ–≥—ñ–æ–Ω–∞–ª—å–Ω–∏—Ö –∑–º–∞–≥–∞–Ω—å",
    files: {},
    photoUrl: null,
    membershipPaid: true,
    membershipExpiryDate: "2025-12-31",
    status: "active",
    registrationDate: "2024-02-01T12:00:00Z",
    lastUpdated: new Date().toISOString()
  });
}

// GET - –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é
export async function GET(request: NextRequest) {
  try {
    const session = await getApiSession(request);

    if (!session || !session.user) {
      return NextResponse.json(
        { error: '–ù–µ–æ–±—Ö—ñ–¥–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è' },
        { status: 401 }
      );
    }

    const url = new URL(request.url);
    const athleteId = url.searchParams.get('athleteId');

    let profile = null;

    if (athleteId) {
      // –®—É–∫–∞—î–º–æ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É ID
      profile = athleteProfiles.get(athleteId);
    } else {
      // –®—É–∫–∞—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å –ø–æ userId –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      for (const [id, p] of athleteProfiles.entries()) {
        if (p.userId === session.user.id) {
          profile = p;
          break;
        }
      }
    }

    if (!profile) {
      return NextResponse.json(
        { error: '–ü—Ä–æ—Ñ—ñ–ª—å —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' },
        { status: 404 }
      );
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø—É (—Å–ø–æ—Ä—Ç—Å–º–µ–Ω –º–æ–∂–µ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å)
    const isOwner = profile.userId === session.user.id;
    const isAdmin = session.user.roles?.includes('admin');

    if (!isOwner && !isAdmin) {
      return NextResponse.json(
        { error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Ü—å–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é' },
        { status: 403 }
      );
    }

    console.log('‚úÖ –ü—Ä–æ—Ñ—ñ–ª—å –æ—Ç—Ä–∏–º–∞–Ω–æ:', profile.fullName);

    return NextResponse.json({
      success: true,
      profile: profile
    });

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é:', error);
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}

// PUT - –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–æ—é –≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é
export async function PUT(request: NextRequest) {
  try {
    const session = await getApiSession(request);

    if (!session || !session.user) {
      return NextResponse.json(
        { error: '–ù–µ–æ–±—Ö—ñ–¥–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è' },
        { status: 401 }
      );
    }

    const data = await request.json();
    console.log('üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞:', data);

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö —á–µ—Ä–µ–∑ Zod
    const validationResult = updateProfileSchema.safeParse(data);

    if (!validationResult.success) {
      const errors = validationResult.error.issues.map(err =>
        `${err.path.join('.')}: ${err.message}`
      ).join(', ');

      return NextResponse.json(
        { error: `–ü–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó: ${errors}` },
        { status: 400 }
      );
    }

    const { athleteId, updates } = validationResult.data;

    const existingProfile = athleteProfiles.get(athleteId);

    if (!existingProfile) {
      return NextResponse.json(
        { error: '–ü—Ä–æ—Ñ—ñ–ª—å —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' },
        { status: 404 }
      );
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø—É
    const isOwner = existingProfile.userId === session.user.id;
    const isAdmin = session.user.roles?.includes('admin');

    if (!isOwner && !isAdmin) {
      return NextResponse.json(
        { error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ü—å–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é' },
        { status: 403 }
      );
    }

    // –ü–µ—Ä–µ—Ä–∞—Ö—É–Ω–æ–∫ –≤—ñ–∫—É –ø—Ä–∏ –∑–º—ñ–Ω—ñ –¥–∞—Ç–∏ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è
    if (updates.dateOfBirth) {
      const birthDate = new Date(updates.dateOfBirth);
      const today = new Date();
      updates.age = today.getFullYear() - birthDate.getFullYear();
    }

    // –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø–æ–≤–Ω–æ–≥–æ —ñ–º–µ–Ω—ñ
    const firstName = updates.firstName || existingProfile.firstName;
    const lastName = updates.lastName || existingProfile.lastName;
    const middleName = updates.middleName || existingProfile.middleName;

    if (updates.firstName || updates.lastName || updates.middleName !== undefined) {
      updates.fullName = `${lastName} ${firstName}` + (middleName ? ` ${middleName}` : '');
    }

    // –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å
    const updatedProfile = {
      ...existingProfile,
      ...updates,
      lastUpdated: new Date().toISOString()
    };

    athleteProfiles.set(athleteId, updatedProfile);

    const updatedFields = Object.keys(updates).filter(key => key !== 'fullName' && key !== 'age');

    console.log('‚úÖ –ü—Ä–æ—Ñ—ñ–ª—å –æ–Ω–æ–≤–ª–µ–Ω–æ:', updatedProfile.fullName);
    console.log('üìù –û–Ω–æ–≤–ª–µ–Ω—ñ –ø–æ–ª—è:', updatedFields);

    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ email –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await sendProfileUpdateNotification(updatedProfile, updatedFields);

    return NextResponse.json({
      success: true,
      message: '–ü—Ä–æ—Ñ—ñ–ª—å —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ',
      profile: updatedProfile,
      updatedFields: updatedFields
    });

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é:', error);
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}

// DELETE - –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤)
export async function DELETE(request: NextRequest) {
  try {
    const session = await getApiSession(request);

    if (!session || !session.user) {
      return NextResponse.json(
        { error: '–ù–µ–æ–±—Ö—ñ–¥–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è' },
        { status: 401 }
      );
    }

    // –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –º–æ–∂—É—Ç—å –≤–∏–¥–∞–ª—è—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—ñ
    if (!session.user.roles?.includes('admin')) {
      return NextResponse.json(
        { error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é' },
        { status: 403 }
      );
    }

    const { athleteId } = await request.json();

    if (!athleteId) {
      return NextResponse.json(
        { error: '–ù–µ –≤–∫–∞–∑–∞–Ω–æ ID —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞' },
        { status: 400 }
      );
    }

    const profile = athleteProfiles.get(athleteId);

    if (!profile) {
      return NextResponse.json(
        { error: '–ü—Ä–æ—Ñ—ñ–ª—å —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' },
        { status: 404 }
      );
    }

    athleteProfiles.delete(athleteId);

    console.log('üóëÔ∏è –ü—Ä–æ—Ñ—ñ–ª—å –≤–∏–¥–∞–ª–µ–Ω–æ:', profile.fullName);

    return NextResponse.json({
      success: true,
      message: '–ü—Ä–æ—Ñ—ñ–ª—å —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ'
    });

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é:', error);
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}
