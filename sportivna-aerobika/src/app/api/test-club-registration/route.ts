import { NextRequest, NextResponse } from 'next/server';

export async function POST(request: NextRequest) {
  try {
    console.log('üß™ Test API endpoint called');

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–æ–∑–º—ñ—Ä –∑–∞–ø–∏—Ç—É
    const contentLength = request.headers.get('content-length');
    if (contentLength) {
      const size = parseInt(contentLength);
      const maxSize = 2 * 1024 * 1024; // 2MB –º–∞–∫—Å–∏–º—É–º –¥–ª—è —Å—Ç–∞–±—ñ–ª—å–Ω–æ—ó —Ä–æ–±–æ—Ç–∏

      if (size > maxSize) {
        return NextResponse.json({
          success: false,
          error: `–§–∞–π–ª –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π! –ú–∞–∫—Å–∏–º—É–º: 2MB, –≤–∞—à: ${Math.round(size / 1024 / 1024)}MB`
        }, {
          status: 413,
          headers: { 'Content-Type': 'application/json' }
        });
      }
    }

    // –ü—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ FormData
    try {
      const formData = await request.formData();
      console.log('üß™ FormData –æ—Ç—Ä–∏–º–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ');

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–∞–π–ª–∏
      const registrationFile = formData.get('registrationDocuments') as File;
      if (registrationFile) {
        console.log('üß™ –§–∞–π–ª:', registrationFile.name, registrationFile.size, 'bytes');
      }

    } catch (formError) {
      console.error('üß™ –ü–æ–º–∏–ª–∫–∞ FormData:', formError);
      return NextResponse.json({
        success: false,
        error: '–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ñ–∞–π–ª—ñ–≤: ' + (formError as Error).message
      }, {
        status: 400,
        headers: { 'Content-Type': 'application/json' }
      });
    }

    return NextResponse.json({
      success: true,
      message: 'Test endpoint –ø—Ä–∞—Ü—é—î –∑ —Ñ–∞–π–ª–∞–º–∏!',
      timestamp: new Date().toISOString()
    }, {
      status: 200,
      headers: { 'Content-Type': 'application/json' }
    });

  } catch (error) {
    console.error('üß™ Test API error:', error);
    return NextResponse.json({
      success: false,
      error: '–°–µ—Ä–≤–µ—Ä–Ω–∞ –ø–æ–º–∏–ª–∫–∞: ' + (error as Error).message
    }, {
      status: 500,
      headers: { 'Content-Type': 'application/json' }
    });
  }
}

export async function GET() {
  return NextResponse.json({
    success: true,
    message: 'Test GET –ø—Ä–∞—Ü—é—î!',
    timestamp: new Date().toISOString()
  });
}
