import { NextRequest, NextResponse } from 'next/server';
import { executeQuery } from '@/lib/mysql';

// GET - –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º–µ–¥—ñ–∞-—Ñ–∞–π–ª—ñ–≤ –∫–ª—É–±—É
export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ clubName: string }> }
) {
  try {
    const resolvedParams = await params;
    const clubName = decodeURIComponent(resolvedParams.clubName);
    console.log(`üì∏ [GET MEDIA] –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–µ–¥—ñ–∞-–≥–∞–ª–µ—Ä–µ—ó –∫–ª—É–±—É: ${clubName}`);

    // –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä–∏–º–æ —á–∏ —ñ—Å–Ω—É—î —Ç–∞–±–ª–∏—Ü—è clubs —Ç–∞ –ø–æ–ª–µ media_files
    try {
      await executeQuery(`
        ALTER TABLE clubs ADD COLUMN media_files LONGTEXT
      `);
      console.log('‚úÖ [GET MEDIA] –ü–æ–ª–µ media_files –¥–æ–¥–∞–Ω–æ –¥–æ —Ç–∞–±–ª–∏—Ü—ñ clubs');
    } catch (alterError) {
      console.log('‚ÑπÔ∏è [GET MEDIA] –ü–æ–ª–µ media_files –≤–∂–µ —ñ—Å–Ω—É—î –∞–±–æ —Ç–∞–±–ª–∏—Ü—è clubs –Ω–µ —ñ—Å–Ω—É—î');
    }

    // –û—Ç—Ä–∏–º—É—î–º–æ –º–µ–¥—ñ–∞-—Ñ–∞–π–ª–∏ –∑ —Ç–∞–±–ª–∏—Ü—ñ clubs
    const clubs = await executeQuery(`
      SELECT media_files, name, id, owner_id, owner_name
      FROM clubs
      WHERE name = ?
      LIMIT 1
    `, [clubName]);

    console.log('üîç [GET MEDIA] –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—à—É–∫—É –∫–ª—É–±—É –≤ —Ç–∞–±–ª–∏—Ü—ñ clubs:', {
      clubName,
      found: clubs.length > 0,
      clubData: clubs.length > 0 ? {
        id: clubs[0].id,
        name: clubs[0].name,
        owner_id: clubs[0].owner_id,
        hasMediaFiles: !!clubs[0].media_files,
        mediaFilesLength: clubs[0].media_files ? clubs[0].media_files.length : 0
      } : null
    });

    if (clubs.length === 0) {
      console.log('‚ö†Ô∏è [GET MEDIA] –ö–ª—É–± –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—ñ clubs, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∞–±–ª–∏—Ü—é users...');

      // –®—É–∫–∞—î–º–æ –∫–ª—É–± –≤ —Ç–∞–±–ª–∏—Ü—ñ users
      const users = await executeQuery(`
        SELECT id, name, email, club
        FROM users
        WHERE club = ? AND roles LIKE '%club_owner%'
        LIMIT 1
      `, [clubName]);

      if (users.length > 0) {
        console.log('‚úÖ [GET MEDIA] –í–ª–∞—Å–Ω–∏–∫ –∫–ª—É–±—É –∑–Ω–∞–π–¥–µ–Ω–∏–π –≤ —Ç–∞–±–ª–∏—Ü—ñ users, —Å—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å –≤ —Ç–∞–±–ª–∏—Ü—ñ clubs');

        // –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å –∫–ª—É–±—É –≤ —Ç–∞–±–ª–∏—Ü—ñ clubs
        const clubId = `club_${clubName.replace(/\s+/g, '_')}_${Date.now()}`;

        try {
          await executeQuery(`
            INSERT INTO clubs (
              id, name, description, owner_id, owner_name,
              media_files, is_active, created_at
            ) VALUES (?, ?, ?, ?, ?, ?, ?, NOW())
          `, [
            clubId,
            clubName,
            `–°–ø–æ—Ä—Ç–∏–≤–Ω–∏–π –∫–ª—É–± "${clubName}"`,
            users[0].email,
            users[0].name,
            '[]', // –ü–æ—Ä–æ–∂–Ω—ñ–π JSON –º–∞—Å–∏–≤ –¥–ª—è –º–µ–¥—ñ–∞
            true
          ]);

          console.log(`‚úÖ [GET MEDIA] –ö–ª—É–± "${clubName}" —Å—Ç–≤–æ—Ä–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—ñ clubs –∑ ID: ${clubId}`);

          // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—é –≥–∞–ª–µ—Ä–µ—é
          return NextResponse.json({
            success: true,
            media: [],
            total: 0,
            clubName: clubName,
            debug: {
              action: 'created_new_club',
              clubId: clubId,
              message: '–ö–ª—É–± —Å—Ç–≤–æ—Ä–µ–Ω–æ, –º–µ–¥—ñ–∞-–≥–∞–ª–µ—Ä–µ—è –ø–æ—Ä–æ–∂–Ω—è'
            }
          });

        } catch (insertError) {
          console.error('‚ùå [GET MEDIA] –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—É–±—É –≤ —Ç–∞–±–ª–∏—Ü—ñ clubs:', insertError);
        }
      }

      return NextResponse.json({
        success: false,
        error: '–ö–ª—É–± –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ',
        debug: {
          action: 'club_not_found',
          message: '–ö–ª—É–± –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —è–∫ –≤ —Ç–∞–±–ª–∏—Ü—ñ clubs, —Ç–∞–∫ —ñ –≤ users'
        }
      }, { status: 404 });
    }

    // –ü–∞—Ä—Å–∏–º–æ JSON –∑ –º–µ–¥—ñ–∞-—Ñ–∞–π–ª–∞–º–∏
    let mediaFiles = [];
    const mediaFilesRaw = clubs[0].media_files;

    console.log('üîç [GET MEDIA] Raw media_files –∑ –ë–î:', {
      type: typeof mediaFilesRaw,
      isNull: mediaFilesRaw === null,
      isUndefined: mediaFilesRaw === undefined,
      isEmpty: mediaFilesRaw === '',
      length: mediaFilesRaw ? mediaFilesRaw.length : 0,
      preview: mediaFilesRaw ? mediaFilesRaw.substring(0, 100) : 'null/undefined'
    });

    if (mediaFilesRaw) {
      try {
        if (typeof mediaFilesRaw === 'string') {
          mediaFiles = JSON.parse(mediaFilesRaw);
          console.log('‚úÖ [GET MEDIA] –£—Å–ø—ñ—à–Ω–æ —Ä–æ–∑–ø–∞—Ä—Å–∏–ª–∏ JSON –º–µ–¥—ñ–∞-—Ñ–∞–π–ª–∏');
        } else if (Array.isArray(mediaFilesRaw)) {
          mediaFiles = mediaFilesRaw;
          console.log('‚úÖ [GET MEDIA] –ú–µ–¥—ñ–∞-—Ñ–∞–π–ª–∏ –≤–∂–µ –º–∞—Å–∏–≤');
        } else {
          console.warn('‚ö†Ô∏è [GET MEDIA] –ù–µ–∑–≤–∏—á–Ω–∏–π —Ç–∏–ø –º–µ–¥—ñ–∞-—Ñ–∞–π–ª—ñ–≤:', typeof mediaFilesRaw);
          mediaFiles = [];
        }
      } catch (parseError) {
        console.error('‚ùå [GET MEDIA] –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –º–µ–¥—ñ–∞-—Ñ–∞–π–ª—ñ–≤:', {
          error: parseError,
          rawData: mediaFilesRaw,
          rawType: typeof mediaFilesRaw
        });
        mediaFiles = [];
      }
    } else {
      console.log('‚ÑπÔ∏è [GET MEDIA] media_files —î null/undefined/empty, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π –º–∞—Å–∏–≤');
      mediaFiles = [];
    }

    console.log(`‚úÖ [GET MEDIA] –§—ñ–Ω–∞–ª—å–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${mediaFiles.length} –º–µ–¥—ñ–∞-—Ñ–∞–π–ª—ñ–≤ –¥–ª—è –∫–ª—É–±—É "${clubName}"`);

    // –õ–æ–≥—É–≤–∞–Ω–Ω—è –∫–æ–∂–Ω–æ–≥–æ –º–µ–¥—ñ–∞-—Ñ–∞–π–ª—É (—Ç—ñ–ª—å–∫–∏ ID —Ç–∞ —Ç–∏–ø –¥–ª—è performance)
    mediaFiles.forEach((media, index) => {
      console.log(`  üìÑ [GET MEDIA] –ú–µ–¥—ñ–∞ ${index + 1}: ID=${media.id}, —Ç–∏–ø=${media.type}, –Ω–∞–∑–≤–∞=${media.title || media.fileName}`);
    });

    return NextResponse.json({
      success: true,
      media: mediaFiles,
      total: mediaFiles.length,
      clubName: clubName,
      debug: {
        action: 'loaded_media',
        clubFound: true,
        clubId: clubs[0].id,
        ownerId: clubs[0].owner_id,
        rawMediaFilesType: typeof mediaFilesRaw,
        rawMediaFilesLength: mediaFilesRaw ? mediaFilesRaw.length : 0,
        parsedMediaCount: mediaFiles.length,
        timestamp: new Date().toISOString()
      }
    });

  } catch (error) {
    console.error('‚ùå [GET MEDIA] –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º–µ–¥—ñ–∞-–≥–∞–ª–µ—Ä–µ—ó:', error);
    return NextResponse.json(
      {
        success: false,
        error: '–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–µ–¥—ñ–∞-–≥–∞–ª–µ—Ä–µ—ó',
        details: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞',
        debug: {
          action: 'critical_error',
          endpoint: 'GET /api/club/[clubName]/media',
          timestamp: new Date().toISOString()
        }
      },
      { status: 500 }
    );
  }
}

// POST - –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –º–µ–¥—ñ–∞-—Ñ–∞–π–ª—É
export async function POST(
  request: NextRequest,
  { params }: { params: Promise<{ clubName: string }> }
) {
  try {
    const resolvedParams = await params;
    const clubName = decodeURIComponent(resolvedParams.clubName);
    const { mediaData, uploaderEmail } = await request.json();

    console.log(`üì§ [POST MEDIA] –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–µ–¥—ñ–∞-—Ñ–∞–π–ª—É –≤ –∫–ª—É–±: ${clubName}`);
    console.log('üîç [POST MEDIA] –û—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ:', {
      clubName,
      uploaderEmail,
      mediaType: mediaData?.type,
      mediaTitle: mediaData?.title,
      hasFileData: !!mediaData?.fileData,
      fileSizeKB: mediaData?.fileData ? Math.round(mediaData.fileData.length / 1024) : 0
    });

    if (!mediaData || !uploaderEmail) {
      return NextResponse.json({
        success: false,
        error: '–î–∞–Ω—ñ –º–µ–¥—ñ–∞-—Ñ–∞–π–ª—É —Ç–∞ email –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ'
      }, { status: 400 });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –≤–ª–∞—Å–Ω–∏–∫–æ–º –∫–ª—É–±—É
    const ownerCheck = await executeQuery(`
      SELECT id, name, email, club
      FROM users
      WHERE email = ? AND club = ? AND roles LIKE '%club_owner%'
      LIMIT 1
    `, [uploaderEmail, clubName]);

    console.log('üîç [POST MEDIA] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–ª–∞—Å–Ω–∏–∫–∞ –∫–ª—É–±—É:', {
      uploaderEmail,
      clubName,
      ownerFound: ownerCheck.length > 0,
      ownerData: ownerCheck.length > 0 ? ownerCheck[0] : null
    });

    if (ownerCheck.length === 0) {
      return NextResponse.json({
        success: false,
        error: '–¢—ñ–ª—å–∫–∏ –≤–ª–∞—Å–Ω–∏–∫ –∫–ª—É–±—É –º–æ–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏ –º–µ–¥—ñ–∞-—Ñ–∞–π–ª–∏'
      }, { status: 403 });
    }

    // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –º–µ–¥—ñ–∞-—Ñ–∞–π–ª–∏
    const clubs = await executeQuery(`
      SELECT media_files, id, name
      FROM clubs
      WHERE name = ?
      LIMIT 1
    `, [clubName]);

    console.log('üîç [POST MEDIA] –ü–æ—à—É–∫ –∫–ª—É–±—É –≤ —Ç–∞–±–ª–∏—Ü—ñ clubs:', {
      clubName,
      found: clubs.length > 0
    });

    if (clubs.length === 0) {
      console.log('‚ö†Ô∏è [POST MEDIA] –ö–ª—É–± –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—ñ clubs, —Å—Ç–≤–æ—Ä—é—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ...');

      // –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å –∫–ª—É–±—É
      const clubId = `club_${clubName.replace(/\s+/g, '_')}_${Date.now()}`;

      try {
        await executeQuery(`
          INSERT INTO clubs (
            id, name, description, owner_id, owner_name,
            media_files, is_active, created_at
          ) VALUES (?, ?, ?, ?, ?, ?, ?, NOW())
        `, [
          clubId,
          clubName,
          `–°–ø–æ—Ä—Ç–∏–≤–Ω–∏–π –∫–ª—É–± "${clubName}"`,
          uploaderEmail,
          ownerCheck[0].name,
          '[]', // –ü–æ—Ä–æ–∂–Ω—ñ–π JSON –º–∞—Å–∏–≤ –¥–ª—è –º–µ–¥—ñ–∞
          true
        ]);

        console.log(`‚úÖ [POST MEDIA] –ö–ª—É–± "${clubName}" –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—ñ clubs`);
      } catch (insertError) {
        console.error('‚ùå [POST MEDIA] –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—É–±—É:', insertError);
        return NextResponse.json({
          success: false,
          error: '–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É –∫–ª—É–±—É'
        }, { status: 500 });
      }
    }

    // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –º–µ–¥—ñ–∞-—Ñ–∞–π–ª–∏ (–ø—ñ—Å–ª—è –º–æ–∂–ª–∏–≤–æ–≥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—É–±—É)
    const updatedClubs = await executeQuery(`
      SELECT media_files
      FROM clubs
      WHERE name = ?
      LIMIT 1
    `, [clubName]);

    if (updatedClubs.length === 0) {
      return NextResponse.json({
        success: false,
        error: '–ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ –∑–∞–ø–∏—Å—É –∫–ª—É–±—É'
      }, { status: 500 });
    }

    // –ü–∞—Ä—Å–∏–º–æ –ø–æ—Ç–æ—á–Ω—ñ –º–µ–¥—ñ–∞-—Ñ–∞–π–ª–∏
    let currentMedia = [];
    const mediaFilesRaw = updatedClubs[0].media_files;

    console.log('üîç [POST MEDIA] –ü–æ—Ç–æ—á–Ω—ñ –º–µ–¥—ñ–∞ –ø–µ—Ä–µ–¥ –¥–æ–¥–∞–≤–∞–Ω–Ω—è–º:', {
      type: typeof mediaFilesRaw,
      raw: mediaFilesRaw ? mediaFilesRaw.substring(0, 100) : 'null',
      length: mediaFilesRaw ? mediaFilesRaw.length : 0
    });

    if (mediaFilesRaw) {
      try {
        if (typeof mediaFilesRaw === 'string') {
          currentMedia = JSON.parse(mediaFilesRaw);
        } else if (Array.isArray(mediaFilesRaw)) {
          currentMedia = mediaFilesRaw;
        }
      } catch (parseError) {
        console.warn('‚ö†Ô∏è [POST MEDIA] –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É —ñ—Å–Ω—É—é—á–∏—Ö –º–µ–¥—ñ–∞-—Ñ–∞–π–ª—ñ–≤:', parseError);
        currentMedia = [];
      }
    }

    // –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –º–µ–¥—ñ–∞-—Ñ–∞–π–ª
    const newMediaFile = {
      id: `media_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      type: mediaData.type, // 'photo' or 'video'
      title: mediaData.title || '',
      description: mediaData.description || '',
      fileName: mediaData.fileName || '',
      fileData: mediaData.fileData, // Base64 string
      uploadedBy: uploaderEmail,
      uploadedAt: new Date().toISOString(),
      category: mediaData.category || 'general' // 'training', 'competition', 'events', 'general'
    };

    currentMedia.push(newMediaFile);

    console.log('üîç [POST MEDIA] –ù–æ–≤–∏–π –º–µ–¥—ñ–∞-—Ñ–∞–π–ª:', {
      id: newMediaFile.id,
      type: newMediaFile.type,
      title: newMediaFile.title,
      hasFileData: !!newMediaFile.fileData,
      fileSizeKB: Math.round(newMediaFile.fileData.length / 1024),
      totalMediaAfter: currentMedia.length
    });

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π —Å–ø–∏—Å–æ–∫ –º–µ–¥—ñ–∞-—Ñ–∞–π–ª—ñ–≤
    const jsonMediaFiles = JSON.stringify(currentMedia);

    await executeQuery(`
      UPDATE clubs
      SET media_files = ?, updated_at = NOW()
      WHERE name = ?
    `, [jsonMediaFiles, clubName]);

    console.log(`‚úÖ [POST MEDIA] –ú–µ–¥—ñ–∞-—Ñ–∞–π–ª –¥–æ–¥–∞–Ω–æ –¥–æ –∫–ª—É–±—É "${clubName}". –ó–∞–≥–∞–ª–æ–º –º–µ–¥—ñ–∞: ${currentMedia.length}`);

    return NextResponse.json({
      success: true,
      message: '–ú–µ–¥—ñ–∞-—Ñ–∞–π–ª —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ',
      mediaId: newMediaFile.id,
      totalMedia: currentMedia.length,
      debug: {
        action: 'media_uploaded',
        clubName,
        newMediaId: newMediaFile.id,
        totalAfterUpload: currentMedia.length,
        timestamp: new Date().toISOString()
      }
    });

  } catch (error) {
    console.error('‚ùå [POST MEDIA] –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–µ–¥—ñ–∞-—Ñ–∞–π–ª—É:', error);
    return NextResponse.json(
      {
        success: false,
        error: '–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–µ–¥—ñ–∞-—Ñ–∞–π–ª—É',
        details: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞',
        debug: {
          action: 'upload_error',
          endpoint: 'POST /api/club/[clubName]/media',
          timestamp: new Date().toISOString()
        }
      },
      { status: 500 }
    );
  }
}

// DELETE - –≤–∏–¥–∞–ª–µ–Ω–Ω—è –º–µ–¥—ñ–∞-—Ñ–∞–π–ª—É
export async function DELETE(
  request: NextRequest,
  { params }: { params: Promise<{ clubName: string }> }
) {
  try {
    const resolvedParams = await params;
    const clubName = decodeURIComponent(resolvedParams.clubName);
    const { searchParams } = new URL(request.url);
    const mediaId = searchParams.get('mediaId');
    const userEmail = searchParams.get('userEmail');

    if (!mediaId || !userEmail) {
      return NextResponse.json({
        success: false,
        error: 'ID –º–µ–¥—ñ–∞-—Ñ–∞–π–ª—É —Ç–∞ email –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ'
      }, { status: 400 });
    }

    console.log(`üóëÔ∏è [DELETE MEDIA] –í–∏–¥–∞–ª–µ–Ω–Ω—è –º–µ–¥—ñ–∞-—Ñ–∞–π–ª—É ${mediaId} –∑ –∫–ª—É–±—É: ${clubName}`);

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø—É
    const ownerCheck = await executeQuery(`
      SELECT id
      FROM users
      WHERE email = ? AND club = ? AND roles LIKE '%club_owner%'
      LIMIT 1
    `, [userEmail, clubName]);

    if (ownerCheck.length === 0) {
      return NextResponse.json({
        success: false,
        error: '–¢—ñ–ª—å–∫–∏ –≤–ª–∞—Å–Ω–∏–∫ –∫–ª—É–±—É –º–æ–∂–µ –≤–∏–¥–∞–ª—è—Ç–∏ –º–µ–¥—ñ–∞-—Ñ–∞–π–ª–∏'
      }, { status: 403 });
    }

    // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –º–µ–¥—ñ–∞-—Ñ–∞–π–ª–∏
    const clubs = await executeQuery(`
      SELECT media_files
      FROM clubs
      WHERE name = ?
      LIMIT 1
    `, [clubName]);

    if (clubs.length === 0) {
      return NextResponse.json({
        success: false,
        error: '–ö–ª—É–± –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
      }, { status: 404 });
    }

    // –ü–∞—Ä—Å–∏–º–æ —Ç–∞ —Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ –º–µ–¥—ñ–∞-—Ñ–∞–π–ª–∏
    let currentMedia = [];
    if (clubs[0].media_files) {
      try {
        currentMedia = JSON.parse(clubs[0].media_files);
        const beforeCount = currentMedia.length;
        currentMedia = currentMedia.filter((media: any) => media.id !== mediaId);
        console.log(`üîç [DELETE MEDIA] –í–∏–¥–∞–ª–µ–Ω–æ –º–µ–¥—ñ–∞: –±—É–ª–æ ${beforeCount}, —Å—Ç–∞–ª–æ ${currentMedia.length}`);
      } catch (parseError) {
        console.warn('‚ö†Ô∏è [DELETE MEDIA] –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –º–µ–¥—ñ–∞-—Ñ–∞–π–ª—ñ–≤:', parseError);
        return NextResponse.json({
          success: false,
          error: '–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –º–µ–¥—ñ–∞-—Ñ–∞–π–ª—ñ–≤'
        }, { status: 500 });
      }
    }

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π —Å–ø–∏—Å–æ–∫
    await executeQuery(`
      UPDATE clubs
      SET media_files = ?, updated_at = NOW()
      WHERE name = ?
    `, [JSON.stringify(currentMedia), clubName]);

    console.log(`‚úÖ [DELETE MEDIA] –ú–µ–¥—ñ–∞-—Ñ–∞–π–ª ${mediaId} –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –∫–ª—É–±—É "${clubName}"`);

    return NextResponse.json({
      success: true,
      message: '–ú–µ–¥—ñ–∞-—Ñ–∞–π–ª —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ',
      totalMedia: currentMedia.length
    });

  } catch (error) {
    console.error('‚ùå [DELETE MEDIA] –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –º–µ–¥—ñ–∞-—Ñ–∞–π–ª—É:', error);
    return NextResponse.json(
      {
        success: false,
        error: '–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –º–µ–¥—ñ–∞-—Ñ–∞–π–ª—É',
        details: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'
      },
      { status: 500 }
    );
  }
}
