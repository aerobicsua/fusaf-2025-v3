import { NextRequest, NextResponse } from 'next/server';
import { executeQuery } from '@/lib/mysql';

export async function GET(request: NextRequest) {
  try {
    console.log('üìä –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è –≥–æ–ª–æ–≤–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏...');

    // –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    let clubsCount = [{ count: 0 }];

    // –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ –Ω–æ–≤—É —Ç–∞–±–ª–∏—Ü—é clubs
    try {
      clubsCount = await executeQuery(`SELECT COUNT(*) as count FROM clubs WHERE is_active = true`);
    } catch (clubsError) {
      console.warn('‚ö†Ô∏è –ù–æ–≤–∞ —Ç–∞–±–ª–∏—Ü—è clubs –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä–æ–±—É—î–º–æ fallback');
      // Fallback –¥–æ —Ç–∞–±–ª–∏—Ü—ñ users
      clubsCount = await executeQuery(`SELECT COUNT(*) as count FROM users WHERE roles LIKE '%club_owner%' AND status = 'approved'`);
    }

    // –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–º–∞–≥–∞–Ω—å —Ç–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    let competitionsCount = [{ count: 0 }];
    let usersCount = [{ count: 0 }];

    try {
      const [compCount, userCount] = await Promise.all([
        executeQuery(`SELECT COUNT(*) as count FROM competitions WHERE status IN ('registration_open', 'published')`).catch(() => [{ count: 0 }]),
        executeQuery(`SELECT COUNT(*) as count FROM users WHERE status = 'active'`)
      ]);
      competitionsCount = compCount;
      usersCount = userCount;
    } catch (error) {
      console.warn('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–º–∞–≥–∞–Ω—å/–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:', error);
      usersCount = await executeQuery(`SELECT COUNT(*) as count FROM users WHERE status = 'active'`);
    }

    // –û—Ç—Ä–∏–º—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –º—ñ—Å—Ç–∞ —É—á–∞—Å–Ω–∏–∫—ñ–≤
    const citiesResult = await executeQuery(`
      SELECT COUNT(DISTINCT city) as count FROM users
      WHERE status = 'active' AND city IS NOT NULL AND city != ''
    `);

    // –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–π–±–ª–∏–∂—á—ñ –∑–º–∞–≥–∞–Ω–Ω—è (–º–∞–∫—Å–∏–º—É–º 4)
    let upcomingCompetitions = [];
    try {
      upcomingCompetitions = await executeQuery(`
        SELECT
          id, title, date, time,
          location, city, status,
          (SELECT COUNT(*) FROM registrations WHERE competition_id = competitions.id) as participants_count
        FROM competitions
        WHERE status IN ('registration_open', 'published')
          AND date >= CURDATE()
        ORDER BY date ASC
        LIMIT 4
      `);
    } catch (competitionsError) {
      console.warn('‚ö†Ô∏è –¢–∞–±–ª–∏—Ü—è competitions –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–º–∞–≥–∞–Ω–Ω—è');
      upcomingCompetitions = [];
    }

    // –§–æ—Ä–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = {
      activeCompetitions: competitionsCount[0]?.count || 0,
      registeredAthletes: usersCount[0]?.count || 0,
      clubsCount: clubsCount[0]?.count || 0,
      citiesCount: citiesResult[0]?.count || 0
    };

    // –§–æ—Ä–º—É—î–º–æ –∑–º–∞–≥–∞–Ω–Ω—è –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—é —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é
    const competitions = upcomingCompetitions.map((comp: any) => ({
      id: comp.id,
      title: comp.title,
      date: comp.date,
      time: comp.time,
      location: comp.location + (comp.city ? `, ${comp.city}` : ''),
      status: comp.status === 'registration_open' ? '–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤—ñ–¥–∫—Ä–∏—Ç–∞' : '–û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ',
      participants: comp.participants_count || 0
    }));

    console.log('‚úÖ –î–∞–Ω—ñ –¥–ª—è –≥–æ–ª–æ–≤–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ:', {
      stats,
      competitionsCount: competitions.length
    });

    return NextResponse.json({
      success: true,
      data: {
        stats,
        competitions
      }
    });

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –≥–æ–ª–æ–≤–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏:', error);

    return NextResponse.json({
      success: false,
      error: '–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö',
      data: {
        stats: {
          activeCompetitions: 0,
          registeredAthletes: 0,
          clubsCount: 0,
          citiesCount: 0
        },
        competitions: []
      }
    });
  }
}
