import { NextResponse } from 'next/server';
import { createPool } from '@/lib/mysql';

export async function POST() {
  try {
    console.log('üßπ –û—á–∏—â–µ–Ω–Ω—è –¥–µ–º–æ –¥–∞–Ω–∏—Ö...');

    const pool = createPool();
    const connection = await pool.getConnection();

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —è–∫—ñ —Ç–∞–±–ª–∏—Ü—ñ —ñ—Å–Ω—É—é—Ç—å
    const [tables] = await connection.execute('SHOW TABLES') as any[];
    const existingTables = tables.map((table: any) => Object.values(table)[0]);
    console.log('üìã –Ü—Å–Ω—É—é—á—ñ —Ç–∞–±–ª–∏—Ü—ñ:', existingTables);

    // –í—ñ–¥–∫–ª—é—á–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É foreign keys
    await connection.execute('SET FOREIGN_KEY_CHECKS = 0');

    // –û—á–∏—â–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ —ñ—Å–Ω—É—é—á—ñ —Ç–∞–±–ª–∏—Ü—ñ
    console.log('üóëÔ∏è –û—á–∏—â–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å...');

    const tablesToClear = [
      'club_requests',
      'registrations',
      'competitions',
      'clubs',
      'users'
    ];

    for (const tableName of tablesToClear) {
      if (existingTables.includes(tableName)) {
        await connection.execute(`DELETE FROM ${tableName}`);
        console.log(`‚úÖ –¢–∞–±–ª–∏—Ü—é ${tableName} –æ—á–∏—â–µ–Ω–æ`);
      } else {
        console.log(`‚è≠Ô∏è –¢–∞–±–ª–∏—Ü—è ${tableName} –Ω–µ —ñ—Å–Ω—É—î, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ`);
      }
    }

    console.log('‚úÖ –í—Å—ñ –¥–µ–º–æ –¥–∞–Ω—ñ –≤–∏–¥–∞–ª–µ–Ω–æ');

    // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç—ñ–ª—å–∫–∏ —Å—É–ø–µ—Ä–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    console.log('üëë –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—É–ø–µ—Ä–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞...');

    // –°–ø—Ä–æ–±—É—î–º–æ —Å–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ—Å—Ç–∏–π INSERT –∑ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–º–∏ –ø–æ–ª—è–º–∏
    try {
      await connection.execute(`
        INSERT INTO users (
          id,
          email,
          name
        ) VALUES (
          '550e8400-e29b-41d4-a716-446655440000',
          'aerobicsua@gmail.com',
          '–°—É–ø–µ—Ä–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –§–£–°–ê–§'
        )
      `);
    } catch (insertError) {
      console.log('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID:', insertError);

      // –°–ø—Ä–æ–±—É—î–º–æ –±–µ–∑ ID
      await connection.execute(`
        INSERT INTO users (email, name) VALUES ('aerobicsua@gmail.com', '–°—É–ø–µ—Ä–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –§–£–°–ê–§')
      `);
    }

    console.log('‚úÖ –°—É–ø–µ—Ä–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä —Å—Ç–≤–æ—Ä–µ–Ω–∏–π: aerobicsua@gmail.com');

    // –í–∫–ª—é—á–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É foreign keys
    await connection.execute('SET FOREIGN_KEY_CHECKS = 1');

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞–Ω –±–∞–∑–∏ –ø—ñ—Å–ª—è –æ—á–∏—â–µ–Ω–Ω—è
    const [userCount] = await connection.execute('SELECT COUNT(*) as count FROM users') as any[];
    const [clubCount] = await connection.execute(
      existingTables.includes('clubs') ? 'SELECT COUNT(*) as count FROM clubs' : 'SELECT 0 as count'
    ) as any[];
    const [requestCount] = await connection.execute(
      existingTables.includes('club_requests') ? 'SELECT COUNT(*) as count FROM club_requests' : 'SELECT 0 as count'
    ) as any[];

    connection.release();

    return NextResponse.json({
      success: true,
      message: '–î–µ–º–æ –¥–∞–Ω—ñ –æ—á–∏—â–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ',
      data: {
        users: userCount[0].count,
        clubs: clubCount[0].count,
        club_requests: requestCount[0].count,
        superadmin: {
          email: 'aerobicsua@gmail.com',
          password: 'fusaf2025',
          note: '–Ñ–¥–∏–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤ —Å–∏—Å—Ç–µ–º—ñ'
        },
        existingTables: existingTables
      }
    });

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –¥–µ–º–æ –¥–∞–Ω–∏—Ö:', error);
    return NextResponse.json({
      success: false,
      error: '–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –¥–µ–º–æ –¥–∞–Ω–∏—Ö',
      details: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'
    }, { status: 500 });
  }
}
