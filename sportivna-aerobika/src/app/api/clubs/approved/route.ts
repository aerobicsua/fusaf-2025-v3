import { NextRequest, NextResponse } from 'next/server';
import { executeQuery } from '@/lib/mysql';

// Helper —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É –∞–¥—Ä–µ—Å–∏
function extractCityFromAddress(address: string): string {
  if (!address) return '';
  const parts = address.split(',').map(p => p.trim());
  return parts[0] || '';
}

function extractRegionFromAddress(address: string): string {
  if (!address) return '';
  const parts = address.split(',').map(p => p.trim());
  return parts[1] || '';
}

export async function GET() {
  try {
    console.log('üè¢ GET /api/clubs/approved - –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ MySQL...');

    // –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ –Ω–æ–≤—É —Ç–∞–±–ª–∏—Ü—é clubs
    try {
      const clubs = await executeQuery(`
        SELECT
          c.id,
          c.name,
          c.description,
          c.address,
          c.phone,
          c.email,
          c.website,
          c.founded,
          c.avatar,
          c.owner_id,
          c.owner_name,
          c.members_count,
          c.achievements,
          c.is_active,
          c.created_at,
          c.updated_at
        FROM clubs c
        WHERE c.is_active = true
        ORDER BY c.created_at DESC
      `);

      if (clubs.length > 0) {
        console.log(`‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${clubs.length} —Å—Ö–≤–∞–ª–µ–Ω–∏—Ö –∫–ª—É–±—ñ–≤ –∑ –Ω–æ–≤–æ—ó —Ç–∞–±–ª–∏—Ü—ñ clubs`);
        console.log('üîç –ü–µ—Ä—à–∏–π –∫–ª—É–±:', clubs[0]);

        // –§–æ—Ä–º–∞—Ç—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É
        const formattedClubs = clubs.map((club: any) => {
          console.log('üîÑ –§–æ—Ä–º–∞—Ç—É—î–º–æ –∫–ª—É–±:', club.name);
          try {
            const result = {
              id: club.id,
              name: club.name,
              type: 'club',
              address: club.address || '',
              city: extractCityFromAddress(club.address || ''),
              region: extractRegionFromAddress(club.address || ''),
              zipCode: '',
              description: club.description || '',
              legalStatus: 'active',
              website: club.website || '',
              founded: club.founded || club.created_at, // –î–∞—Ç–∞ –∑–∞—Å–Ω—É–≤–∞–Ω–Ω—è
              avatar: club.avatar || '', // –ê–≤–∞—Ç–∞—Ä –∫–ª—É–±—É
              owner: {
                name: club.owner_name || '',
                email: club.owner_id || '',
                phone: club.phone || ''
              },
              approvedAt: club.created_at,
              status: club.is_active ? 'active' : 'inactive'
            };
            console.log('‚úÖ –ö–ª—É–± —Å—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–æ:', result.name);
            return result;
          } catch (formatError) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∫–ª—É–±—É:', formatError);
            throw formatError;
          }
        });

        console.log('‚úÖ –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç');
        return NextResponse.json({
          success: true,
          clubs: formattedClubs,
          total: formattedClubs.length,
          timestamp: new Date().toISOString()
        });
      }
    } catch (newTableError) {
      console.warn('‚ö†Ô∏è –ù–æ–≤–∞ —Ç–∞–±–ª–∏—Ü—è clubs –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä–æ–±—É—î–º–æ fallback');
    }

    // Fallback –¥–æ —Å—Ç–∞—Ä–æ—ó –ª–æ–≥—ñ–∫–∏ —á–µ—Ä–µ–∑ —Ç–∞–±–ª–∏—Ü—é users
    const clubOwners = await executeQuery(`
      SELECT
        id,
        name,
        email,
        phone,
        club,
        roles,
        city,
        region,
        address,
        website,
        created_at,
        status
      FROM users
      WHERE roles LIKE '%club_owner%' AND status = 'approved'
      ORDER BY created_at DESC
    `);

    console.log(`‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${clubOwners.length} —Å—Ö–≤–∞–ª–µ–Ω–∏—Ö –∫–ª—É–±—ñ–≤ –∑ fallback (users)`);

    // –§–æ—Ä–º–∞—Ç—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É
    const formattedClubs = clubOwners.map((owner: any) => ({
      id: owner.id,
      name: owner.club || `–ö–ª—É–± ${owner.name}`,
      type: 'club',
      address: owner.address || '',
      city: owner.city || '',
      region: owner.region || '',
      zipCode: '',
      description: `–°–ø–æ—Ä—Ç–∏–≤–Ω–∏–π –∫–ª—É–± –ø—ñ–¥ –∫–µ—Ä—ñ–≤–Ω–∏—Ü—Ç–≤–æ–º ${owner.name}`,
      legalStatus: 'active',
      website: owner.website || '',
      owner: {
        name: owner.name,
        email: owner.email,
        phone: owner.phone || ''
      },
      approvedAt: owner.created_at,
      status: 'active'
    }));

    return NextResponse.json({
      success: true,
      clubs: formattedClubs,
      total: formattedClubs.length,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ö–≤–∞–ª–µ–Ω–∏—Ö –∫–ª—É–±—ñ–≤ –∑ MySQL:', error);
    return NextResponse.json(
      {
        success: false,
        error: '–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–ª—É–±—ñ–≤ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö',
        details: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'
      },
      { status: 500 }
    );
  }
}
