import { NextRequest, NextResponse } from 'next/server';
import { executeQuery } from '@/lib/mysql';

export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const { id: clubId } = await params;
    console.log(`üè¢ GET /api/clubs/${clubId} - –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ MySQL...`);

    // –û—Ç—Ä–∏–º—É—î–º–æ –∫–ª—É–± –∑ MySQL
    const clubs = await executeQuery(`
      SELECT
        c.id,
        c.name,
        c.full_name,
        c.address,
        c.city,
        c.region,
        c.description,
        c.legal_status as legalStatus,
        c.website,
        c.status,
        c.created_at as approvedAt,
        u.name as ownerName,
        u.email as ownerEmail,
        u.phone as ownerPhone
      FROM clubs c
      LEFT JOIN users u ON c.owner_id = u.id
      WHERE c.id = ? AND c.status = 'active'
      LIMIT 1
    `, [clubId]);

    if (clubs.length === 0) {
      console.log(`‚ùå –ö–ª—É–± ${clubId} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ MySQL`);
      return NextResponse.json({
        success: false,
        error: '–ö–ª—É–± –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
      }, { status: 404 });
    }

    const club = clubs[0];

    // –§–æ—Ä–º–∞—Ç—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É
    const formattedClub = {
      id: club.id,
      name: club.name,
      type: 'club', // –ó–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
      address: club.address || '',
      city: club.city || '',
      region: club.region || '',
      description: club.description || '',
      legalStatus: club.legalStatus || '',
      website: club.website || '',
      owner: {
        name: club.ownerName || '',
        email: club.ownerEmail || '',
        phone: club.ownerPhone || ''
      },
      approvedAt: club.approvedAt,
      status: club.status
    };

    console.log(`‚úÖ –ö–ª—É–± ${clubId} –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ MySQL`);

    return NextResponse.json({
      success: true,
      club: formattedClub
    });

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–ª—É–±—É:', error);
    return NextResponse.json({
      success: false,
      error: '–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–ª—É–±—É –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö',
      details: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'
    }, { status: 500 });
  }
}
