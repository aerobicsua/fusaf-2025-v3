import { type NextRequest, NextResponse } from 'next/server';
import { getApiSession } from '@/lib/auth';
// authOptions removed

// –°–∏–º—É–ª—è—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∑–∞—è–≤–æ–∫
const membershipRequests = new Map<string, {
  id: string;
  clubId: string;
  clubName: string;
  athleteId: string;
  athleteName: string;
  athleteEmail: string;
  status: 'pending' | 'approved' | 'rejected';
  requestDate: string;
  responseDate?: string;
  message: string;
  response?: string;
}>();

export async function POST(request: NextRequest) {
  try {
    const session = await getApiSession(request);

    if (!session?.user?.email) {
      return NextResponse.json({
        success: false,
        error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π'
      }, { status: 401 });
    }

    const { clubId, message } = await request.json();

    if (!clubId || !message?.trim()) {
      return NextResponse.json({
        success: false,
        error: '–ù–µ –≤–∫–∞–∑–∞–Ω–æ –∫–ª—É–± –∞–±–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è'
      }, { status: 400 });
    }

    // –î–µ–º–æ-–¥–∞–Ω—ñ –∫–ª—É–±—ñ–≤ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–∑–≤–∏
    const clubs = new Map([
      ['club-1', '–°–ö "–ì—Ä–∞—Ü—ñ—è"'],
      ['club-2', '–ê–µ—Ä–æ–±—ñ–∫–∞ –õ—å–≤—ñ–≤'],
      ['club-3', '–§—ñ—Ç–Ω–µ—Å-–î–∏–Ω–∞–º—ñ–∫–∞'],
      ['club-4', '–°–ø–æ—Ä—Ç-–ê—Ä–µ–Ω–∞']
    ]);

    const clubName = clubs.get(clubId);
    if (!clubName) {
      return NextResponse.json({
        success: false,
        error: '–ö–ª—É–± –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
      }, { status: 404 });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó –∑–∞—è–≤–∫–∏
    const existingRequest = Array.from(membershipRequests.values()).find(req =>
      req.athleteEmail === session.user.email &&
      req.clubId === clubId &&
      req.status === 'pending'
    );

    if (existingRequest) {
      return NextResponse.json({
        success: false,
        error: '–£ –≤–∞—Å –≤–∂–µ —î –∞–∫—Ç–∏–≤–Ω–∞ –∑–∞—è–≤–∫–∞ –¥–æ —Ü—å–æ–≥–æ –∫–ª—É–±—É'
      }, { status: 400 });
    }

    // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É –∑–∞—è–≤–∫—É
    const requestId = `req-${Date.now()}`;
    const newRequest = {
      id: requestId,
      clubId,
      clubName,
      athleteId: session.user.email,
      athleteName: session.user.name || session.user.email,
      athleteEmail: session.user.email,
      status: 'pending' as const,
      requestDate: new Date().toISOString(),
      message: message.trim()
    };

    membershipRequests.set(requestId, newRequest);

    console.log('üèõÔ∏è –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø –¥–æ –∫–ª—É–±—É:', {
      requestId,
      clubName,
      athleteName: newRequest.athleteName,
      message: message.substring(0, 50) + '...'
    });

    // –í —Ä–µ–∞–ª—å–Ω—ñ–π —Å–∏—Å—Ç–µ–º—ñ —Ç—É—Ç –±–∏ –±—É–ª–æ:
    // 1. –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
    // 2. –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤–ª–∞—Å–Ω–∏–∫—É –∫–ª—É–±—É
    // 3. –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥—ñ—ó

    return NextResponse.json({
      success: true,
      request: newRequest,
      message: '–ó–∞—è–≤–∫—É —É—Å–ø—ñ—à–Ω–æ –ø–æ–¥–∞–Ω–æ! –û—á—ñ–∫—É–π—Ç–µ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –≤–ª–∞—Å–Ω–∏–∫–∞ –∫–ª—É–±—É.'
    });

  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø–æ–¥–∞—á—ñ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø:', error);
    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    }, { status: 500 });
  }
}

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞—è–≤–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
export async function GET(request: NextRequest) {
  try {
    const session = await getApiSession(request);

    if (!session?.user?.email) {
      return NextResponse.json({
        success: false,
        error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π'
      }, { status: 401 });
    }

    // –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∑–∞—è–≤–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const userRequests = Array.from(membershipRequests.values()).filter(
      req => req.athleteEmail === session.user.email
    );

    return NextResponse.json({
      success: true,
      requests: userRequests
    });

  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞—è–≤–æ–∫:', error);
    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    }, { status: 500 });
  }
}
