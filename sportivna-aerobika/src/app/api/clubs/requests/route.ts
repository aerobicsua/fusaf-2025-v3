import { NextRequest, NextResponse } from 'next/server';
import { ClubRequestsStorage } from '@/lib/club-requests-storage';

export async function GET() {
  try {
    const requests = await ClubRequestsStorage.getAll();
    const stats = await ClubRequestsStorage.getStats();

    console.log('üìã GET /api/clubs/requests - –ø–æ—Ç–æ—á–Ω—ñ –∑–∞—è–≤–∫–∏:', stats.total);
    console.log('üìã –ó–∞—è–≤–∫–∏ –≤ storage:', requests.map(r => ({ id: r.id, club: r.club.name, status: r.status })));

    return NextResponse.json({
      success: true,
      requests: requests.sort((a, b) =>
        new Date(b.submittedAt).getTime() - new Date(a.submittedAt).getTime()
      ),
      total: stats.total,
      stats: stats,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞—è–≤–æ–∫:', error);
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}

export async function POST(request: NextRequest) {
  try {
    const requestData = await request.json();
    console.log('üìù POST /api/clubs/requests - –û–¢–†–ò–ú–ê–ù–û –Ω–æ–≤—É –∑–∞—è–≤–∫—É:', requestData.id || 'no-id');
    console.log('üìù –î–µ—Ç–∞–ª—ñ –∑–∞—è–≤–∫–∏:', {
      id: requestData.id,
      clubName: requestData.club?.name,
      userEmail: requestData.user?.email,
      status: requestData.status
    });

    // –î–æ–¥–∞—î–º–æ –∑–∞—è–≤–∫—É –¥–æ —Å–ø—ñ–ª—å–Ω–æ–≥–æ —Å—Ö–æ–≤–∏—â–∞
    await ClubRequestsStorage.add(requestData);

    const stats = await ClubRequestsStorage.getStats();
    console.log('üìä –ü—ñ—Å–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', stats);

    return NextResponse.json({
      success: true,
      message: '–ó–∞—è–≤–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ',
      requestId: requestData.id,
      totalRequests: stats.total,
      stats: stats
    });
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏:', error);
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}

export async function PATCH(request: NextRequest) {
  try {
    const { requestId, status, reviewNotes, reviewedBy } = await request.json();

    // –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ —Å–ø—ñ–ª—å–Ω–µ —Å—Ö–æ–≤–∏—â–µ
    const updatedRequest = await ClubRequestsStorage.update(requestId, {
      status,
      reviewNotes,
      reviewedBy,
      reviewedAt: new Date().toISOString()
    });

    if (!updatedRequest) {
      return NextResponse.json(
        { error: '–ó–∞—è–≤–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' },
        { status: 404 }
      );
    }

    return NextResponse.json({
      success: true,
      message: '–ó–∞—è–≤–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ',
      request: updatedRequest
    });
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏:', error);
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}
