import { NextRequest, NextResponse } from 'next/server';
import { executeQuery } from '@/lib/mysql';
import { v4 as uuidv4 } from 'uuid';
import bcrypt from 'bcryptjs';

export async function POST(request: NextRequest) {
  try {
    const data = await request.json();

    console.log('üèÉ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞ –≤ MySQL —Ä–æ–∑–ø–æ—á–∞—Ç–∞');
    console.log('üìù –û—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ:', Object.keys(data));

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
    const requiredFields = ['firstName', 'lastName', 'email', 'phone', 'dateOfBirth'];
    const missingFields = requiredFields.filter(field => !data[field]);

    if (missingFields.length > 0) {
      return NextResponse.json({
        success: false,
        error: `–í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è: ${missingFields.join(', ')}`
      }, { status: 400 });
    }

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(data.email)) {
      return NextResponse.json({
        success: false,
        error: '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π email –∞–¥—Ä–µ—Å'
      }, { status: 400 });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î
    const existingUsers = await executeQuery(`
      SELECT id FROM users WHERE email = ?
    `, [data.email.toLowerCase()]);

    if (existingUsers.length > 0) {
      return NextResponse.json({
        success: false,
        error: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º email –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π'
      }, { status: 409 });
    }

    // –ì–µ–Ω–µ—Ä—É—î–º–æ –ø–∞—Ä–æ–ª—å —Ç–∞ —Ö–µ—à—É—î–º–æ –π–æ–≥–æ
    const generatedPassword = Math.random().toString(36).slice(-8);
    const passwordHash = await bcrypt.hash(generatedPassword, 12);

    // –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ ID
    const userId = uuidv4();
    const registrationId = uuidv4();

    // –§–æ—Ä–º—É—î–º–æ –ø–æ–≤–Ω–µ —ñ–º'—è
    const fullName = `${data.firstName} ${data.lastName} ${data.middleName || ''}`.trim();

    console.log('üë§ –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', data.email);

    // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –ë–î (—Å–ø—Ä–æ—â–µ–Ω–∏–π –∑–∞–ø–∏—Ç)
    await executeQuery(`
      INSERT INTO users (
        id, email, password_hash, name, roles,
        first_name, last_name, middle_name,
        date_of_birth, gender, phone,
        country, region, city,
        status, email_verified, membership_paid
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    `, [
      userId,
      data.email.toLowerCase(),
      passwordHash,
      fullName,
      '["athlete", "user"]',
      data.firstName,
      data.lastName,
      data.middleName || '',
      data.dateOfBirth,
      data.gender || 'female',
      data.phone,
      data.country || '–£–∫—Ä–∞—ó–Ω–∞',
      data.region || '',
      data.city || '',
      'pending', // —Å–ø–æ—á–∞—Ç–∫—É –æ—á—ñ–∫—É—î –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó
      false, // email –Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ
      false // —á–ª–µ–Ω—Å—Ç–≤–æ –Ω–µ –æ–ø–ª–∞—á–µ–Ω–æ
    ]);

    console.log('‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –≤ –ë–î');

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é
    await executeQuery(`
      INSERT INTO registrations (
        id, participant_id, registration_type,
        program, category, participants_data,
        club_name, coach_name, coach_phone,
        registration_fee, entry_fee, total_fee,
        payment_status, notes, status,
        created_at, updated_at
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, NOW(), NOW())
    `, [
      registrationId,
      userId,
      'athlete_profile', // —Ç–∏–ø —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
      data.discipline || '–°–ø–æ—Ä—Ç–∏–≤–Ω–∞ –∞–µ—Ä–æ–±—ñ–∫–∞',
      data.category || '',
      JSON.stringify({
        emergencyContact: data.emergencyContact || {},
        medicalInfo: data.medicalInfo || {},
        preferences: data.preferences || {}
      }),
      data.club || '',
      data.coach || '',
      data.coachPhone || '',
      0, // –ø–æ–∫–∏ –±–µ–∑ –ø–ª–∞—Ç–∏
      0,
      0,
      'pending',
      data.notes || '',
      'pending'
    ]);

    console.log('‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑–±–µ—Ä–µ–∂–µ–Ω–∞ –≤ –ë–î');

    // –§–æ—Ä–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    const response = {
      success: true,
      message: '–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!',
      data: {
        userId: userId,
        registrationId: registrationId,
        registrationNumber: `FUSAF-A-${new Date().getFullYear()}-${registrationId.slice(-6).toUpperCase()}`,
        email: data.email,
        name: fullName,
        temporaryPassword: generatedPassword,
        status: 'pending',
        nextSteps: [
          '–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó',
          '–£–≤—ñ–π–¥—ñ—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –∑ —Ç–∏–º—á–∞—Å–æ–≤–∏–º –ø–∞—Ä–æ–ª–µ–º',
          '–ó–∞–ø–æ–≤–Ω—ñ—Ç—å –¥–æ–¥–∞—Ç–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –≤ –ø—Ä–æ—Ñ—ñ–ª—ñ',
          '–û–ø–ª–∞—Ç—ñ—Ç—å —á–ª–µ–Ω—Å—å–∫–∏–π –≤–Ω–µ—Å–æ–∫'
        ]
      },
      warnings: [
        '–¢–∏–º—á–∞—Å–æ–≤–∏–π –ø–∞—Ä–æ–ª—å –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É',
        '–ó–º—ñ–Ω—ñ—Ç—å –ø–∞—Ä–æ–ª—å –ø—ñ—Å–ª—è –ø–µ—Ä—à–æ–≥–æ –≤—Ö–æ–¥—É –≤ —Å–∏—Å—Ç–µ–º—É'
      ]
    };

    // TODO: –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ email –∑ —Ç–∏–º—á–∞—Å–æ–≤–∏–º –ø–∞—Ä–æ–ª–µ–º
    console.log('üìß Email –∑ –ø–∞—Ä–æ–ª–µ–º:', generatedPassword, '–¥–ª—è', data.email);

    // TODO: –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ –ø–ª–∞—Ç—ñ–∂–Ω–æ—é —Å–∏—Å—Ç–µ–º–æ—é –¥–ª—è —á–ª–µ–Ω—Å—å–∫–∏—Ö –≤–Ω–µ—Å–∫—ñ–≤

    console.log('üéâ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ');

    return NextResponse.json(response);

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞:', error);

    return NextResponse.json({
      success: false,
      error: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó',
      details: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'
    }, { status: 500 });
  }
}

export async function GET(request: NextRequest) {
  try {
    // –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ–π —Å–ø–æ—Ä—Ç—Å–º–µ–Ω—ñ–≤
    const totalRegistrations = await executeQuery(`
      SELECT COUNT(*) as count FROM registrations
      WHERE registration_type = 'athlete_profile'
    `);

    const pendingRegistrations = await executeQuery(`
      SELECT COUNT(*) as count FROM registrations
      WHERE registration_type = 'athlete_profile' AND status = 'pending'
    `);

    const recentRegistrations = await executeQuery(`
      SELECT
        r.id, r.created_at, r.status,
        u.name, u.email, u.city, u.club
      FROM registrations r
      JOIN users u ON r.participant_id = u.id
      WHERE r.registration_type = 'athlete_profile'
      ORDER BY r.created_at DESC
      LIMIT 10
    `);

    return NextResponse.json({
      success: true,
      statistics: {
        total: totalRegistrations[0]?.count || 0,
        pending: pendingRegistrations[0]?.count || 0,
        recent: recentRegistrations
      },
      message: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ–π —Å–ø–æ—Ä—Ç—Å–º–µ–Ω—ñ–≤'
    });

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);

    return NextResponse.json({
      success: false,
      error: '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ–π'
    }, { status: 500 });
  }
}
