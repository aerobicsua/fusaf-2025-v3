import { NextRequest, NextResponse } from 'next/server';
import { executeQuery } from '@/lib/mysql';
import { v4 as uuidv4 } from 'uuid';

export async function POST(request: NextRequest) {
  try {
    console.log('üìä –ü–æ—á–∞—Ç–æ–∫ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–µ–º–æ –∑–º–∞–≥–∞–Ω—å –≤ MySQL...');

    // –î–µ–º–æ –∑–º–∞–≥–∞–Ω–Ω—è –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤ –ë–î
    const demoCompetitions = [
      {
        id: uuidv4(),
        title: '–ö—É–±–æ–∫ –£–∫—Ä–∞—ó–Ω–∏ –∑—ñ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ—ó –∞–µ—Ä–æ–±—ñ–∫–∏ 2025',
        description: '–û—Ñ—ñ—Ü—ñ–π–Ω—ñ –∑–º–∞–≥–∞–Ω–Ω—è —Ñ–µ–¥–µ—Ä–∞—Ü—ñ—ó –£–∫—Ä–∞—ó–Ω–∏ –∑—ñ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ—ó –∞–µ—Ä–æ–±—ñ–∫–∏ —Ç–∞ —Ñ—ñ—Ç–Ω–µ—Å—É. –ó–º–∞–≥–∞–Ω–Ω—è –ø—Ä–æ–≤–æ–¥—è—Ç—å—Å—è –∑–≥—ñ–¥–Ω–æ –∑ –º—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏ FIG.',
        date: '2025-04-15',
        time: '10:00:00',
        registration_deadline: '2025-03-15',
        location: '–ü–∞–ª–∞—Ü —Å–ø–æ—Ä—Ç—É "–£–∫—Ä–∞—ó–Ω–∞"',
        address: '–≤—É–ª. –í–µ–ª–∏–∫–∞ –í–∞—Å–∏–ª—å–∫—ñ–≤—Å—å–∫–∞, 55, –ö–∏—ó–≤, 03150',
        city: '–ö–∏—ó–≤',
        region: '–º. –ö–∏—ó–≤',
        organizing_club: '–°–ö "–ì—Ä–∞—Ü—ñ—è"',
        organizer_id: '1', // admin user
        contact_person: JSON.stringify({
          name: '–Ü–≤–∞–Ω–µ–Ω–∫–æ –ú–∞—Ä—ñ—è –ü–µ—Ç—Ä—ñ–≤–Ω–∞',
          phone: '+380 67 123 45 67',
          email: 'competitions@fusaf.org.ua'
        }),
        program_fees: JSON.stringify({
          individual: 200,
          pairs: 300,
          group: 500
        }),
        max_participants_by_program: JSON.stringify({
          individual: 100,
          pairs: 50,
          group: 20
        }),
        categories: JSON.stringify([
          'YOUTH / 12-14 YEARS',
          'JUNIORS / 15-17 YEARS',
          'SENIORS 18+ YEARS',
          'ND (–∑–∞ –ø–æ—Ç—Ä–µ–±–æ—é)',
          'NDmini (–∑–∞ –ø–æ—Ç—Ä–µ–±–æ—é)'
        ]),
        rules: '–ó–º–∞–≥–∞–Ω–Ω—è –ø—Ä–æ–≤–æ–¥—è—Ç—å—Å—è –∑–≥—ñ–¥–Ω–æ –∑ –ø—Ä–∞–≤–∏–ª–∞–º–∏ FIG —Ç–∞ –§–£–°–ê–§. –í—ñ–∫ —É—á–∞—Å–Ω–∏–∫—ñ–≤ –≤–∏–∑–Ω–∞—á–∞—î—Ç—å—Å—è –Ω–∞ 31 –≥—Ä—É–¥–Ω—è 2025 —Ä–æ–∫—É.',
        status: 'registration_open'
      },
      {
        id: uuidv4(),
        title: '–ß–µ–º–ø—ñ–æ–Ω–∞—Ç –õ—å–≤—ñ–≤—Å—å–∫–æ—ó –æ–±–ª–∞—Å—Ç—ñ',
        description: '–†–µ–≥—ñ–æ–Ω–∞–ª—å–Ω–∏–π —á–µ–º–ø—ñ–æ–Ω–∞—Ç –∑ —Ä—ñ–∑–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π —Ç–∞ –≤—ñ–∫–æ–≤–∏—Ö –≥—Ä—É–ø.',
        date: '2025-03-20',
        time: '09:30:00',
        registration_deadline: '2025-02-28',
        location: '–°–ø–æ—Ä—Ç–∫–æ–º–ø–ª–µ–∫—Å "–ê—Ä–µ–Ω–∞ –õ—å–≤—ñ–≤"',
        address: '–≤—É–ª. –°—Ç—Ä–∏–π—Å—å–∫–∞, 199, –õ—å–≤—ñ–≤',
        city: '–õ—å–≤—ñ–≤',
        region: '–õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
        organizing_club: '–ê–µ—Ä–æ–±—ñ–∫–∞ –õ—å–≤—ñ–≤',
        organizer_id: '1',
        contact_person: JSON.stringify({
          name: '–ö–æ–≤–∞–ª–µ–Ω–∫–æ –ê–Ω–¥—Ä—ñ–π –í–∞—Å–∏–ª—å–æ–≤–∏—á',
          phone: '+380 32 123 45 67',
          email: 'lviv@fusaf.org.ua'
        }),
        program_fees: JSON.stringify({
          individual: 150,
          pairs: 250,
          group: 400
        }),
        max_participants_by_program: JSON.stringify({
          individual: 80,
          pairs: 40,
          group: 15
        }),
        categories: JSON.stringify([
          'YOUTH / 12-14 YEARS',
          'JUNIORS / 15-17 YEARS',
          'SENIORS 18+ YEARS'
        ]),
        rules: '–†–µ–≥—ñ–æ–Ω–∞–ª—å–Ω–∏–π —á–µ–º–ø—ñ–æ–Ω–∞—Ç –¥–ª—è —Å–ø–æ—Ä—Ç—Å–º–µ–Ω—ñ–≤ –õ—å–≤—ñ–≤—Å—å–∫–æ—ó –æ–±–ª–∞—Å—Ç—ñ.',
        status: 'registration_open'
      },
      {
        id: uuidv4(),
        title: '–ü–µ—Ä—à—ñ—Å—Ç—å –î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–æ—ó –æ–±–ª–∞—Å—Ç—ñ',
        description: '–í—ñ–¥–∫—Ä–∏—Ç–∞ –ø–µ—Ä—à—ñ—Å—Ç—å –¥–ª—è –≤—Å—ñ—Ö –≤—ñ–∫–æ–≤–∏—Ö –≥—Ä—É–ø —Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π.',
        date: '2025-05-10',
        time: '11:00:00',
        registration_deadline: '2025-04-25',
        location: '–ü–ö "–ú–µ—Ç–µ–æ—Ä"',
        address: '–ø—Ä. –ì–∞–≥–∞—Ä—ñ–Ω–∞, 99, –î–Ω—ñ–ø—Ä–æ',
        city: '–î–Ω—ñ–ø—Ä–æ',
        region: '–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
        organizing_club: '–§—ñ—Ç–Ω–µ—Å-–î–∏–Ω–∞–º—ñ–∫–∞',
        organizer_id: '1',
        contact_person: JSON.stringify({
          name: '–ü–µ—Ç—Ä–µ–Ω–∫–æ –°–≤—ñ—Ç–ª–∞–Ω–∞ –û–ª–µ–∫—Å–∞–Ω–¥—Ä—ñ–≤–Ω–∞',
          phone: '+380 56 789 01 23',
          email: 'dnipro@fusaf.org.ua'
        }),
        program_fees: JSON.stringify({
          individual: 100,
          pairs: 200,
          group: 300
        }),
        max_participants_by_program: JSON.stringify({
          individual: 60,
          pairs: 30,
          group: 10
        }),
        categories: JSON.stringify([
          'YOUTH / 12-14 YEARS',
          'JUNIORS / 15-17 YEARS',
          'SENIORS 18+ YEARS',
          'ND',
          'NDmini'
        ]),
        rules: '–í—ñ–¥–∫—Ä–∏—Ç–∞ –ø–µ—Ä—à—ñ—Å—Ç—å –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é —É—á–∞—Å—Ç—ñ –¥–ª—è –≤—Å—ñ—Ö –∫–ª—É–±—ñ–≤ –£–∫—Ä–∞—ó–Ω–∏.',
        status: 'published'
      }
    ];

    let successCount = 0;
    let errorCount = 0;

    // –î–æ–¥–∞—î–º–æ –∫–æ–∂–Ω–µ –∑–º–∞–≥–∞–Ω–Ω—è
    for (const competition of demoCompetitions) {
      try {
        await executeQuery(`
          INSERT INTO competitions (
            id, title, description, date, time, registration_deadline,
            location, address, city, region,
            organizing_club, organizer_id,
            contact_person, program_fees, max_participants_by_program,
            categories, rules, status,
            created_at, updated_at
          ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, NOW(), NOW())
        `, [
          competition.id,
          competition.title,
          competition.description,
          competition.date,
          competition.time,
          competition.registration_deadline,
          competition.location,
          competition.address,
          competition.city,
          competition.region,
          competition.organizing_club,
          competition.organizer_id,
          competition.contact_person,
          competition.program_fees,
          competition.max_participants_by_program,
          competition.categories,
          competition.rules,
          competition.status
        ]);

        console.log('‚úÖ –î–æ–¥–∞–Ω–æ –∑–º–∞–≥–∞–Ω–Ω—è:', competition.title);
        successCount++;

      } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–º–∞–≥–∞–Ω–Ω—è:', competition.title, error);
        errorCount++;
      }
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const competitions = await executeQuery(`
      SELECT COUNT(*) as count FROM competitions
    `);

    console.log('‚úÖ –î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–µ–º–æ –∑–º–∞–≥–∞–Ω—å –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log(`üìä –£—Å–ø—ñ—à–Ω–æ: ${successCount}, –ü–æ–º–∏–ª–æ–∫: ${errorCount}`);

    return NextResponse.json({
      success: true,
      message: '‚úÖ –î–µ–º–æ –∑–º–∞–≥–∞–Ω–Ω—è –¥–æ–¥–∞–Ω–æ –≤ MySQL!',
      statistics: {
        added: successCount,
        errors: errorCount,
        totalInDb: competitions[0]?.count || 0
      },
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–º–∞–≥–∞–Ω—å:', error);

    return NextResponse.json({
      success: false,
      error: '–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–º–∞–≥–∞–Ω—å',
      details: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞',
      timestamp: new Date().toISOString()
    }, { status: 500 });
  }
}
