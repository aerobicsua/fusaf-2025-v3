import { type NextRequest, NextResponse } from 'next/server';
import { getApiSession } from '@/lib/auth';
// authOptions removed

// –°–∏–º—É–ª—è—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –ø—ñ–¥–ø–∏—Å–æ–∫
const subscriptions = new Map<string, {
  email: string;
  settings: {
    newCompetitions: boolean;
    registrationReminders: boolean;
    competitionUpdates: boolean;
    results: boolean;
    emailFrequency: 'immediate' | 'daily' | 'weekly';
  };
  subscribedAt: string;
}>();

export async function POST(request: NextRequest) {
  try {
    const session = await getApiSession(request);

    if (!session?.user?.email) {
      return NextResponse.json({
        success: false,
        error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π'
      }, { status: 401 });
    }

    const { email, settings } = await request.json();

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è email
    if (!email || email !== session.user.email) {
      return NextResponse.json({
        success: false,
        error: '–ù–µ–≤—ñ—Ä–Ω–∏–π email'
      }, { status: 400 });
    }

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
    if (!settings || typeof settings !== 'object') {
      return NextResponse.json({
        success: false,
        error: '–ù–µ–≤—ñ—Ä–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è'
      }, { status: 400 });
    }

    // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–∏ (–≤ —Ä–µ–∞–ª—å–Ω—ñ–π —Å–∏—Å—Ç–µ–º—ñ —Ü–µ –±—É–¥–µ –±–∞–∑–∞ –¥–∞–Ω–∏—Ö)
    subscriptions.set(email, {
      email,
      settings,
      subscribedAt: new Date().toISOString()
    });

    console.log('üìß –ù–æ–≤–∞ –ø—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è:', {
      email,
      settings,
      timestamp: new Date().toISOString()
    });

    // –í —Ä–µ–∞–ª—å–Ω—ñ–π —Å–∏—Å—Ç–µ–º—ñ —Ç—É—Ç –±–∏ –±—É–ª–æ:
    // 1. –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
    // 2. –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤—ñ—Ç–∞–ª—å–Ω–æ–≥–æ email
    // 3. –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ email-—Å–µ—Ä–≤—ñ—Å–æ–º

    return NextResponse.json({
      success: true,
      message: '–ü—ñ–¥–ø–∏—Å–∫–∞ —É—Å–ø—ñ—à–Ω–æ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞',
      subscription: {
        email,
        settings,
        subscribedAt: new Date().toISOString()
      }
    });

  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è:', error);
    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    }, { status: 500 });
  }
}

export async function GET(request: NextRequest) {
  try {
    const session = await getApiSession(request);

    if (!session?.user?.email) {
      return NextResponse.json({
        success: false,
        error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π'
      }, { status: 401 });
    }

    const subscription = subscriptions.get(session.user.email);

    return NextResponse.json({
      success: true,
      subscription: subscription || null,
      isSubscribed: !!subscription
    });

  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–∏:', error);
    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    }, { status: 500 });
  }
}
