import { type NextRequest, NextResponse } from 'next/server';
import { getApiSession } from '@/lib/auth';
// authOptions removed
import { sendEmail, EmailType } from '@/lib/email';

// –°–∏–º—É–ª—è—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –ø—ñ–¥–ø–∏—Å–æ–∫ (–º–∞—î –±—É—Ç–∏ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–∞ –∑ —ñ–Ω—à–∏–º–∏ API)
const subscriptions = new Map<string, any>();

export async function POST(request: NextRequest) {
  try {
    const session = await getApiSession(request);

    if (!session?.user?.email) {
      return NextResponse.json({
        success: false,
        error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π'
      }, { status: 401 });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∞ - —Ç—ñ–ª—å–∫–∏ –≤–ª–∞—Å–Ω–∏–∫–∏ –∫–ª—É–±—ñ–≤ —Ç–∞ –∞–¥–º—ñ–Ω–∏ –º–æ–∂—É—Ç—å –≤–∏–∫–ª–∏–∫–∞—Ç–∏ —Ü–µ–π API
    const canSendNotifications = session.user.roles?.some((role: string) =>
      ['admin', 'club_owner'].includes(role)
    );

    if (!canSendNotifications) {
      return NextResponse.json({
        success: false,
        error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω—å'
      }, { status: 403 });
    }

    const { competition } = await request.json();

    if (!competition) {
      return NextResponse.json({
        success: false,
        error: '–î–∞–Ω—ñ –∑–º–∞–≥–∞–Ω–Ω—è –Ω–µ –Ω–∞–¥–∞–Ω–æ'
      }, { status: 400 });
    }

    // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ—Ö –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤, —è–∫—ñ —Ö–æ—á—É—Ç—å –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤—ñ –∑–º–∞–≥–∞–Ω–Ω—è
    const subscribersToNotify = Array.from(subscriptions.values()).filter(
      sub => sub.settings.newCompetitions && sub.settings.emailFrequency === 'immediate'
    );

    console.log(`üìß –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω—å –ø—Ä–æ –Ω–æ–≤–µ –∑–º–∞–≥–∞–Ω–Ω—è "${competition.title}" –¥–ª—è ${subscribersToNotify.length} –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤`);

    // –°–∏–º—É–ª—è—Ü—ñ—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ email-—ñ–≤
    const emailResults = [];

    for (const subscriber of subscribersToNotify) {
      try {
        // –í —Ä–µ–∞–ª—å–Ω—ñ–π —Å–∏—Å—Ç–µ–º—ñ —Ç—É—Ç –±–∏ –±—É–ª–∞ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ email-—Å–µ—Ä–≤—ñ—Å–æ–º
        const emailResult = await sendEmailSimulation({
          to: subscriber.email,
          subject: `üèÜ –ù–æ–≤–µ –∑–º–∞–≥–∞–Ω–Ω—è: ${competition.title}`,
          template: 'newCompetition',
          data: {
            competitionTitle: competition.title,
            competitionDate: competition.date,
            competitionLocation: competition.location,
            registrationDeadline: competition.registration_deadline,
            organizingClub: competition.organizing_club,
            competitionUrl: `${process.env.NEXTAUTH_URL}/competitions`,
            unsubscribeUrl: `${process.env.NEXTAUTH_URL}/api/notifications/unsubscribe`
          }
        });

        emailResults.push({
          email: subscriber.email,
          success: emailResult.success,
          error: emailResult.error
        });

      } catch (error) {
        emailResults.push({
          email: subscriber.email,
          success: false,
          error: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'
        });
      }
    }

    const successCount = emailResults.filter(result => result.success).length;
    const failureCount = emailResults.filter(result => !result.success).length;

    return NextResponse.json({
      success: true,
      message: `–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ: ${successCount} —É—Å–ø—ñ—à–Ω–æ, ${failureCount} –ø–æ–º–∏–ª–æ–∫`,
      stats: {
        totalSubscribers: subscribersToNotify.length,
        successCount,
        failureCount,
        results: emailResults
      },
      competition: {
        id: competition.id,
        title: competition.title,
        date: competition.date
      }
    });

  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω—å –ø—Ä–æ –∑–º–∞–≥–∞–Ω–Ω—è:', error);
    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    }, { status: 500 });
  }
}

// –°–∏–º—É–ª—è—Ü—ñ—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ email
async function sendEmailSimulation(emailData: {
  to: string;
  subject: string;
  template: string;
  data: any;
}): Promise<{ success: boolean; error?: string }> {

  // –õ–æ–≥—É–≤–∞–Ω–Ω—è email –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó
  console.log('üìß –í—ñ–¥–ø—Ä–∞–≤–∫–∞ email:', {
    to: emailData.to,
    subject: emailData.subject,
    template: emailData.template,
    timestamp: new Date().toISOString()
  });

  // –°–∏–º—É–ª—è—Ü—ñ—è –∑–∞—Ç—Ä–∏–º–∫–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
  await new Promise(resolve => setTimeout(resolve, 100));

  // –°–∏–º—É–ª—è—Ü—ñ—è —É—Å–ø—ñ—à–Ω–æ—ó –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ (95% —É—Å–ø—ñ—Ö—É)
  if (Math.random() > 0.05) {
    return { success: true };
  } else {
    return {
      success: false,
      error: '–°–∏–º—É–ª—è—Ü—ñ—è –ø–æ–º–∏–ª–∫–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ email'
    };
  }
}
