import { NextRequest, NextResponse } from 'next/server';
import { executeQuery } from '@/lib/mysql';
import bcrypt from 'bcryptjs';

export async function POST(request: NextRequest) {
  try {
    const { email, password } = await request.json();

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö
    if (!email || !password) {
      return NextResponse.json({
        success: false,
        error: 'Email —Ç–∞ –ø–∞—Ä–æ–ª—å –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ'
      }, { status: 400 });
    }

    console.log('üîê –°–ø—Ä–æ–±–∞ –ª–æ–≥—ñ–Ω—É –¥–ª—è:', email);

    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –ë–î
    const users = await executeQuery<any>(`
      SELECT
        id, email, password_hash, name, roles,
        first_name, last_name, middle_name,
        date_of_birth, gender, phone,
        country, region, city, address, zip_code,
        club, coach, sport_category, experience, specialization,
        bio, website, social_media, achievements,
        is_public_profile, show_email, show_phone, email_notifications,
        avatar, documents,
        email_verified, membership_paid, membership_expiry_date, status,
        created_at, last_login
      FROM users
      WHERE email = ? AND status IN ('active', 'pending')
    `, [email.toLowerCase()]);

    if (users.length === 0) {
      console.log('‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ:', email);
      return NextResponse.json({
        success: false,
        error: '–ù–µ–≤—ñ—Ä–Ω–∏–π email –∞–±–æ –ø–∞—Ä–æ–ª—å'
      }, { status: 401 });
    }

    const user = users[0];
    console.log('‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–Ω–∞–π–¥–µ–Ω–∏–π:', user.email);

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–∞—Ä–æ–ª—å
    const isPasswordValid = await bcrypt.compare(password, user.password_hash);

    if (!isPasswordValid) {
      console.log('‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å –¥–ª—è:', email);
      return NextResponse.json({
        success: false,
        error: '–ù–µ–≤—ñ—Ä–Ω–∏–π email –∞–±–æ –ø–∞—Ä–æ–ª—å'
      }, { status: 401 });
    }

    console.log('‚úÖ –ü–∞—Ä–æ–ª—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –¥–ª—è:', email);
    console.log('üéâ –£—Å–ø—ñ—à–Ω–∏–π –ª–æ–≥—ñ–Ω –¥–ª—è:', email);

    // –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –≤—Ö–æ–¥—É
    await executeQuery(`
      UPDATE users
      SET last_login = NOW()
      WHERE id = ?
    `, [user.id]);

    // –ü–∞—Ä—Å–∏–º–æ JSON –ø–æ–ª—è
    let roles = [];
    let socialMedia = { instagram: '', facebook: '', telegram: '' };
    let documents = [];

    try {
      // –û–±—Ä–æ–±–ª—è—î–º–æ —Ä—ñ–∑–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏ —Ä–æ–ª–µ–π
      if (typeof user.roles === 'string') {
        roles = JSON.parse(user.roles);
      } else if (Array.isArray(user.roles)) {
        roles = user.roles;
      } else {
        roles = ['user'];
      }
    } catch (e) {
      console.warn('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É —Ä–æ–ª–µ–π, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ default:', e);
      roles = ['user'];
    }

    try {
      socialMedia = JSON.parse(user.social_media || '{"instagram":"","facebook":"","telegram":""}');
    } catch (e) {
      console.warn('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É —Å–æ—Ü—ñ–∞–ª—å–Ω–∏—Ö –º–µ—Ä–µ–∂:', e);
    }

    try {
      documents = JSON.parse(user.documents || '[]');
    } catch (e) {
      console.warn('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤:', e);
    }

    // –§–æ—Ä–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –±–µ–∑ –ø–∞—Ä–æ–ª—è
    const userResponse = {
      id: user.id,
      email: user.email,
      name: user.name,
      roles: roles,
      createdAt: user.created_at,
      lastLogin: new Date().toISOString(),
      emailVerified: user.email_verified,

      // –†–æ–∑—à–∏—Ä–µ–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ—Ñ—ñ–ª—é
      profile: {
        firstName: user.first_name || '',
        lastName: user.last_name || '',
        middleName: user.middle_name || '',
        dateOfBirth: user.date_of_birth || '',
        gender: user.gender || '',
        phone: user.phone || '',

        // –ê–¥—Ä–µ—Å–∞
        country: user.country || '–£–∫—Ä–∞—ó–Ω–∞',
        region: user.region || '',
        city: user.city || '',
        address: user.address || '',
        zipCode: user.zip_code || '',

        // –°–ø–æ—Ä—Ç–∏–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
        club: user.club || '',
        coach: user.coach || '',
        sportCategory: user.sport_category || '',
        experience: user.experience || '',
        specialization: user.specialization || '',

        // –û—Å–æ–±–∏—Å—Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
        bio: user.bio || '',
        website: user.website || '',
        socialMedia: socialMedia,

        // –î–æ—Å—è–≥–Ω–µ–Ω–Ω—è
        achievements: user.achievements || '',
        competitions: [], // TODO: –∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏ –∑ –æ–∫—Ä–µ–º–æ—ó —Ç–∞–±–ª–∏—Ü—ñ

        // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        isPublicProfile: user.is_public_profile || false,
        showEmail: user.show_email || false,
        showPhone: user.show_phone || false,
        emailNotifications: user.email_notifications !== false,

        // –§–∞–π–ª–∏
        avatar: user.avatar || '',
        documents: documents
      }
    };

    console.log('üéâ –£—Å–ø—ñ—à–Ω–∏–π –ª–æ–≥—ñ–Ω –¥–ª—è:', email);

    return NextResponse.json({
      success: true,
      message: '–£—Å–ø—ñ—à–Ω–∏–π –≤—Ö—ñ–¥ –≤ —Å–∏—Å—Ç–µ–º—É',
      user: userResponse
    });

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ª–æ–≥—ñ–Ω—É:', error);

    return NextResponse.json({
      success: false,
      error: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      details: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'
    }, { status: 500 });
  }
}
