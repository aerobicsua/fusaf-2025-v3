import { NextRequest, NextResponse } from 'next/server';

export async function POST(request: NextRequest) {
  try {
    const { clubId, format, userEmail, clubData, trainersData, athletesData, applicationsData } = await request.json();

    console.log(`üìä –ï–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–ª—É–±—É ${clubId} —É —Ñ–æ—Ä–º–∞—Ç—ñ ${format} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${userEmail}`);

    // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ –∑–∞–ø–∏—Ç—É (–ø–µ—Ä–µ–¥–∞–Ω—ñ –∑ –∫–ª—ñ—î–Ω—Ç–∞)
    const club = clubData;
    const clubTrainers = trainersData || [];
    const clubAthletes = athletesData || [];
    const applications = applicationsData || [];

    if (!club) {
      return NextResponse.json({
        success: false,
        error: '–î–∞–Ω—ñ –∫–ª—É–±—É –Ω–µ –Ω–∞–¥–∞–Ω–æ'
      }, { status: 404 });
    }

    // –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É
    const exportData = {
      club: {
        name: club.name,
        address: club.address,
        city: club.city,
        region: club.region,
        owner: club.owner,
        approvedAt: club.approvedAt
      },
      statistics: {
        totalTrainers: clubTrainers.length,
        totalAthletes: clubAthletes.length,
        totalApplications: applications.length,
        pendingApplications: applications.filter((app: any) => app.status === 'pending').length,
        approvedApplications: applications.filter((app: any) => app.status === 'approved').length,
        rejectedApplications: applications.filter((app: any) => app.status === 'rejected').length
      },
      trainers: clubTrainers.map((trainer: any) => ({
        name: trainer.name,
        email: trainer.email,
        phone: trainer.phone,
        specialization: trainer.specialization,
        roles: trainer.roles.join(', '),
        approvedAt: new Date(trainer.approvedAt).toLocaleDateString('uk-UA'),
        judgeInfo: trainer.judgeInfo ? `${trainer.judgeInfo.category} (${trainer.judgeInfo.license})` : '–ù/–î'
      })),
      athletes: clubAthletes.map((athlete: any) => ({
        name: athlete.name,
        email: athlete.email,
        phone: athlete.phone,
        dateOfBirth: athlete.dateOfBirth || '–ù/–î',
        city: athlete.city,
        registeredAt: new Date(athlete.registeredAt).toLocaleDateString('uk-UA')
      })),
      applications: applications.map((app: any) => ({
        name: app.name,
        email: app.email,
        status: app.status === 'pending' ? '–ù–∞ —Ä–æ–∑–≥–ª—è–¥—ñ' :
                app.status === 'approved' ? '–°—Ö–≤–∞–ª–µ–Ω–æ' : '–í—ñ–¥—Ö–∏–ª–µ–Ω–æ',
        submittedAt: new Date(app.submittedAt).toLocaleDateString('uk-UA'),
        reviewedAt: app.reviewedAt ? new Date(app.reviewedAt).toLocaleDateString('uk-UA') : '–ù/–î'
      }))
    };

    if (format === 'excel') {
      // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è Excel —Ñ–∞–π–ª—É (CSV —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏)
      const csvData = generateCSV(exportData);

      return NextResponse.json({
        success: true,
        message: 'Excel —Ñ–∞–π–ª –≥–æ—Ç–æ–≤–∏–π –¥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è',
        data: csvData,
        filename: `club_${club.name}_stats_${new Date().toISOString().split('T')[0]}.csv`,
        mimeType: 'text/csv'
      });
    } else if (format === 'pdf') {
      // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è PDF (HTML –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏ - –º–æ–∂–Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ –≤ PDF)
      const htmlData = generateHTML(exportData);

      return NextResponse.json({
        success: true,
        message: 'PDF —Ñ–∞–π–ª –≥–æ—Ç–æ–≤–∏–π –¥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è',
        data: htmlData,
        filename: `club_${club.name}_stats_${new Date().toISOString().split('T')[0]}.html`,
        mimeType: 'text/html'
      });
    }

    return NextResponse.json({
      success: false,
      error: '–ù–µ–≤—ñ–¥–æ–º–∏–π —Ñ–æ—Ä–º–∞—Ç –µ–∫—Å–ø–æ—Ä—Ç—É'
    }, { status: 400 });

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);

    return NextResponse.json({
      success: false,
      error: '–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫—Å–ø–æ—Ä—Ç—É'
    }, { status: 500 });
  }
}

function generateCSV(data: any): string {
  const { club, statistics, trainers, athletes, applications } = data;

  let csv = '';

  // –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–ª—É–±
  csv += '–Ü–ù–§–û–†–ú–ê–¶–Ü–Ø –ü–†–û –ö–õ–£–ë\n';
  csv += `–ù–∞–∑–≤–∞,${club.name}\n`;
  csv += `–ê–¥—Ä–µ—Å–∞,"${club.address}, ${club.city}, ${club.region}"\n`;
  csv += `–ö–µ—Ä—ñ–≤–Ω–∏–∫,${club.owner.name}\n`;
  csv += `Email –∫–µ—Ä—ñ–≤–Ω–∏–∫–∞,${club.owner.email}\n`;
  csv += `–î–∞—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó,${new Date(club.approvedAt).toLocaleDateString('uk-UA')}\n\n`;

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  csv += '–°–¢–ê–¢–ò–°–¢–ò–ö–ê\n';
  csv += `–¢—Ä–µ–Ω–µ—Ä—ñ–≤,${statistics.totalTrainers}\n`;
  csv += `–°–ø–æ—Ä—Ç—Å–º–µ–Ω—ñ–≤,${statistics.totalAthletes}\n`;
  csv += `–ó–∞—è–≤–æ–∫ –∑–∞–≥–∞–ª–æ–º,${statistics.totalApplications}\n`;
  csv += `–ù–∞ —Ä–æ–∑–≥–ª—è–¥—ñ,${statistics.pendingApplications}\n`;
  csv += `–°—Ö–≤–∞–ª–µ–Ω–æ,${statistics.approvedApplications}\n`;
  csv += `–í—ñ–¥—Ö–∏–ª–µ–Ω–æ,${statistics.rejectedApplications}\n\n`;

  // –¢—Ä–µ–Ω–µ—Ä–∏
  if (trainers.length > 0) {
    csv += '–¢–†–ï–ù–ï–†–ò\n';
    csv += '–Ü–º\'—è,Email,–¢–µ–ª–µ—Ñ–æ–Ω,–°–ø–µ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è,–†–æ–ª—ñ,–î–∞—Ç–∞ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è,–°—É–¥–¥—ñ–≤—Å—å–∫–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è\n';
    trainers.forEach((trainer: any) => {
      csv += `"${trainer.name}",${trainer.email},${trainer.phone},"${trainer.specialization}","${trainer.roles}",${trainer.approvedAt},"${trainer.judgeInfo}"\n`;
    });
    csv += '\n';
  }

  // –°–ø–æ—Ä—Ç—Å–º–µ–Ω–∏
  if (athletes.length > 0) {
    csv += '–°–ü–û–†–¢–°–ú–ï–ù–ò\n';
    csv += '–Ü–º\'—è,Email,–¢–µ–ª–µ—Ñ–æ–Ω,–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è,–ú—ñ—Å—Ç–æ,–î–∞—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó\n';
    athletes.forEach((athlete: any) => {
      csv += `"${athlete.name}",${athlete.email},${athlete.phone},${athlete.dateOfBirth},"${athlete.city}",${athlete.registeredAt}\n`;
    });
    csv += '\n';
  }

  // –ó–∞—è–≤–∫–∏
  if (applications.length > 0) {
    csv += '–ó–ê–Ø–í–ö–ò –¢–†–ï–ù–ï–†–Ü–í\n';
    csv += '–Ü–º\'—è,Email,–°—Ç–∞—Ç—É—Å,–î–∞—Ç–∞ –ø–æ–¥–∞—á—ñ,–î–∞—Ç–∞ —Ä–æ–∑–≥–ª—è–¥—É\n';
    applications.forEach((app: any) => {
      csv += `"${app.name}",${app.email},"${app.status}",${app.submittedAt},${app.reviewedAt}\n`;
    });
  }

  return csv;
}

function generateHTML(data: any): string {
  const { club, statistics, trainers, athletes, applications } = data;

  return `
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª—É–±—É ${club.name}</title>
  <style>
    body { font-family: Arial, sans-serif; margin: 20px; color: #333; }
    .header { text-align: center; margin-bottom: 30px; border-bottom: 2px solid #007bff; padding-bottom: 20px; }
    .section { margin-bottom: 30px; }
    .section h2 { color: #007bff; border-bottom: 1px solid #ddd; padding-bottom: 10px; }
    table { width: 100%; border-collapse: collapse; margin-top: 10px; }
    th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
    th { background-color: #f8f9fa; font-weight: bold; }
    .stats-grid { display: grid; grid-template-columns: repeat(3, 1fr); gap: 20px; margin: 20px 0; }
    .stat-card { background: #f8f9fa; padding: 15px; border-radius: 8px; text-align: center; }
    .stat-number { font-size: 24px; font-weight: bold; color: #007bff; }
    .club-info { background: #e7f3ff; padding: 15px; border-radius: 8px; margin-bottom: 20px; }
  </style>
</head>
<body>
  <div class="header">
    <h1>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª—É–±—É "${club.name}"</h1>
    <p>–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ: ${new Date().toLocaleDateString('uk-UA')} ${new Date().toLocaleTimeString('uk-UA')}</p>
  </div>

  <div class="section">
    <h2>üè¢ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–ª—É–±</h2>
    <div class="club-info">
      <p><strong>–ù–∞–∑–≤–∞:</strong> ${club.name}</p>
      <p><strong>–ê–¥—Ä–µ—Å–∞:</strong> ${club.address}, ${club.city}, ${club.region}</p>
      <p><strong>–ö–µ—Ä—ñ–≤–Ω–∏–∫:</strong> ${club.owner.name}</p>
      <p><strong>Email –∫–µ—Ä—ñ–≤–Ω–∏–∫–∞:</strong> ${club.owner.email}</p>
      <p><strong>–î–∞—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:</strong> ${new Date(club.approvedAt).toLocaleDateString('uk-UA')}</p>
    </div>
  </div>

  <div class="section">
    <h2>üìà –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2>
    <div class="stats-grid">
      <div class="stat-card">
        <div class="stat-number">${statistics.totalTrainers}</div>
        <div>–¢—Ä–µ–Ω–µ—Ä—ñ–≤</div>
      </div>
      <div class="stat-card">
        <div class="stat-number">${statistics.totalAthletes}</div>
        <div>–°–ø–æ—Ä—Ç—Å–º–µ–Ω—ñ–≤</div>
      </div>
      <div class="stat-card">
        <div class="stat-number">${statistics.totalApplications}</div>
        <div>–ó–∞—è–≤–æ–∫</div>
      </div>
    </div>
  </div>

  ${trainers.length > 0 ? `
  <div class="section">
    <h2>üë®‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä–∏ (${trainers.length})</h2>
    <table>
      <thead>
        <tr>
          <th>–Ü–º'—è</th>
          <th>Email</th>
          <th>–°–ø–µ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è</th>
          <th>–†–æ–ª—ñ</th>
          <th>–î–∞—Ç–∞ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è</th>
        </tr>
      </thead>
      <tbody>
        ${trainers.map((trainer: any) => `
          <tr>
            <td>${trainer.name}</td>
            <td>${trainer.email}</td>
            <td>${trainer.specialization}</td>
            <td>${trainer.roles}</td>
            <td>${trainer.approvedAt}</td>
          </tr>
        `).join('')}
      </tbody>
    </table>
  </div>
  ` : ''}

  ${athletes.length > 0 ? `
  <div class="section">
    <h2>üèÉ‚Äç‚ôÇÔ∏è –°–ø–æ—Ä—Ç—Å–º–µ–Ω–∏ (${athletes.length})</h2>
    <table>
      <thead>
        <tr>
          <th>–Ü–º'—è</th>
          <th>Email</th>
          <th>–ú—ñ—Å—Ç–æ</th>
          <th>–î–∞—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó</th>
        </tr>
      </thead>
      <tbody>
        ${athletes.map((athlete: any) => `
          <tr>
            <td>${athlete.name}</td>
            <td>${athlete.email}</td>
            <td>${athlete.city}</td>
            <td>${athlete.registeredAt}</td>
          </tr>
        `).join('')}
      </tbody>
    </table>
  </div>
  ` : ''}

  ${applications.length > 0 ? `
  <div class="section">
    <h2>üìã –ó–∞—è–≤–∫–∏ —Ç—Ä–µ–Ω–µ—Ä—ñ–≤ (${applications.length})</h2>
    <table>
      <thead>
        <tr>
          <th>–Ü–º'—è</th>
          <th>Email</th>
          <th>–°—Ç–∞—Ç—É—Å</th>
          <th>–î–∞—Ç–∞ –ø–æ–¥–∞—á—ñ</th>
          <th>–î–∞—Ç–∞ —Ä–æ–∑–≥–ª—è–¥—É</th>
        </tr>
      </thead>
      <tbody>
        ${applications.map((app: any) => `
          <tr>
            <td>${app.name}</td>
            <td>${app.email}</td>
            <td>${app.status}</td>
            <td>${app.submittedAt}</td>
            <td>${app.reviewedAt}</td>
          </tr>
        `).join('')}
      </tbody>
    </table>
  </div>
  ` : ''}

  <div style="margin-top: 50px; text-align: center; color: #666; border-top: 1px solid #ddd; padding-top: 20px;">
    <p>–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ —Å–∏—Å—Ç–µ–º–æ—é –§–£–°–ê–§ ‚Ä¢ ${new Date().getFullYear()}</p>
  </div>
</body>
</html>`;
}

export async function GET() {
  return NextResponse.json({
    message: 'API –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–ª—É–±—É. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ POST –∑–∞–ø–∏—Ç –∑ clubId —Ç–∞ format.'
  });
}
