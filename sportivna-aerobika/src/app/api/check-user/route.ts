import { NextRequest, NextResponse } from 'next/server';
import { executeQuery } from '@/lib/mysql';
import bcrypt from 'bcryptjs';

export async function GET(request: NextRequest) {
  try {
    console.log('üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ andfedos@gmail.com...');

    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const users = await executeQuery(`
      SELECT id, email, name, roles, status, password_hash, created_at
      FROM users
      WHERE email = ?
    `, ['andfedos@gmail.com']);

    if (users.length === 0) {
      return NextResponse.json({
        success: false,
        message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á andfedos@gmail.com –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π',
        found: false
      });
    }

    const user = users[0];

    return NextResponse.json({
      success: true,
      message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–Ω–∞–π–¥–µ–Ω–∏–π',
      found: true,
      user: {
        id: user.id,
        email: user.email,
        name: user.name,
        roles: user.roles,
        status: user.status,
        created_at: user.created_at,
        hasPassword: !!user.password_hash
      }
    });

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', error);
    return NextResponse.json({
      success: false,
      error: '–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞',
      details: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'
    }, { status: 500 });
  }
}

export async function POST(request: NextRequest) {
  try {
    console.log('üîß –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è –¥–ª—è andfedos@gmail.com...');

    // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π —Ö–µ—à –ø–∞—Ä–æ–ª—è
    const newPassword = 'password123';
    const hashedPassword = await bcrypt.hash(newPassword, 10);

    // –û–Ω–æ–≤–ª—é—î–º–æ –ø–∞—Ä–æ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    await executeQuery(`
      UPDATE users
      SET password_hash = ?, status = 'active', email_verified = TRUE
      WHERE email = ?
    `, [hashedPassword, 'andfedos@gmail.com']);

    console.log('‚úÖ –ü–∞—Ä–æ–ª—å –æ–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ');

    return NextResponse.json({
      success: true,
      message: '–ü–∞—Ä–æ–ª—å –¥–ª—è andfedos@gmail.com –æ–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ',
      newPassword: newPassword
    });

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è:', error);
    return NextResponse.json({
      success: false,
      error: '–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è',
      details: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'
    }, { status: 500 });
  }
}
