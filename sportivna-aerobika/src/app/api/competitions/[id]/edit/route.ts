import { type NextRequest, NextResponse } from 'next/server';
import { getApiSession } from '@/lib/auth';
// authOptions removed

export async function PUT(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const session = await getApiSession(request);

    if (!session?.user?.email) {
      return NextResponse.json({
        success: false,
        error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π'
      }, { status: 401 });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∞ - —Ç—ñ–ª—å–∫–∏ –≤–ª–∞—Å–Ω–∏–∫–∏ –∫–ª—É–±—ñ–≤ —Ç–∞ –∞–¥–º—ñ–Ω–∏ –º–æ–∂—É—Ç—å —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∑–º–∞–≥–∞–Ω–Ω—è
    const canEdit = (session.user as any)?.roles?.some((role: string) =>
      ['admin', 'club_owner'].includes(role)
    );

    if (!canEdit) {
      return NextResponse.json({
        success: false,
        error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∑–º–∞–≥–∞–Ω—å'
      }, { status: 403 });
    }

    const { id: competitionId } = await params;
    const updatedData = await request.json();

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
    if (!updatedData.title?.trim()) {
      return NextResponse.json({
        success: false,
        error: '–ù–∞–∑–≤–∞ –∑–º–∞–≥–∞–Ω–Ω—è —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–æ—é'
      }, { status: 400 });
    }

    if (!updatedData.date) {
      return NextResponse.json({
        success: false,
        error: '–î–∞—Ç–∞ –∑–º–∞–≥–∞–Ω–Ω—è —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–æ—é'
      }, { status: 400 });
    }

    if (!updatedData.location?.trim()) {
      return NextResponse.json({
        success: false,
        error: '–ú—ñ—Å—Ü–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º'
      }, { status: 400 });
    }

    if (!updatedData.contact_person?.name?.trim()) {
      return NextResponse.json({
        success: false,
        error: '–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ –æ—Å–æ–±–∞ —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–æ—é'
      }, { status: 400 });
    }

    if (!updatedData.categories || updatedData.categories.length === 0) {
      return NextResponse.json({
        success: false,
        error: '–û–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é'
      }, { status: 400 });
    }

    // –í —Ä–µ–∞–ª—å–Ω—ñ–π —Å–∏—Å—Ç–µ–º—ñ —Ç—É—Ç –±–∏ –±—É–ª–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤ –ë–î
    // –ó–∞—Ä–∞–∑ —Å–∏–º—É–ª—é—î–º–æ —É—Å–ø—ñ—à–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
    const updatedCompetition = {
      id: competitionId,
      ...updatedData,
      updated_by: session.user.email,
      updated_at: new Date().toISOString()
    };

    console.log('üèÜ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–º–∞–≥–∞–Ω–Ω—è:', {
      id: competitionId,
      title: updatedData.title,
      status: updatedData.status,
      updatedBy: session.user.email,
      timestamp: new Date().toISOString()
    });

    // –Ø–∫—â–æ —Å—Ç–∞—Ç—É—Å –∑–º—ñ–Ω–∏–≤—Å—è –Ω–∞ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∏–π, –º–æ–∂–µ–º–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
    if (updatedData.status === 'published' || updatedData.status === 'registration_open') {
      try {
        // –í–∏–∫–ª–∏–∫–∞—î–º–æ API —Å–ø–æ–≤—ñ—â–µ–Ω—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        fetch(`${process.env.NEXTAUTH_URL}/api/notifications/send-competition-alert`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Cookie': request.headers.get('cookie') || '',
          },
          body: JSON.stringify({
            competition: updatedCompetition
          })
        }).then(response => {
          if (response.ok) {
            console.log('‚úÖ –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–º–∞–≥–∞–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ');
          } else {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω—å –ø—Ä–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è');
          }
        }).catch(error => {
          console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Å–ø–æ–≤—ñ—â–µ–Ω—å –ø—Ä–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:', error);
        });
      } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞—Ü—ñ—ó –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω—å –ø—Ä–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:', error);
      }
    }

    return NextResponse.json({
      success: true,
      competition: updatedCompetition,
      message: '–ó–º–∞–≥–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!',
      notifications: (updatedData.status === 'published' || updatedData.status === 'registration_open')
        ? '–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∞–º –ø—Ä–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è'
        : '–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –±—É–¥—É—Ç—å –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ –ø—ñ—Å–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó'
    });

  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∑–º–∞–≥–∞–Ω–Ω—è:', error);
    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    }, { status: 500 });
  }
}

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑–º–∞–≥–∞–Ω–Ω—è –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const session = await getApiSession(request);

    if (!session?.user?.email) {
      return NextResponse.json({
        success: false,
        error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π'
      }, { status: 401 });
    }

    const { id: competitionId } = await params;

    // –í —Ä–µ–∞–ª—å–Ω—ñ–π —Å–∏—Å—Ç–µ–º—ñ —Ç—É—Ç –±–∏ –±—É–≤ –∑–∞–ø–∏—Ç –¥–æ –ë–î
    // –ó–∞—Ä–∞–∑ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –¥–µ–º–æ-–¥–∞–Ω—ñ
    const demoCompetition = {
      id: competitionId,
      title: '–ö—É–±–æ–∫ –£–∫—Ä–∞—ó–Ω–∏ –∑—ñ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ—ó –∞–µ—Ä–æ–±—ñ–∫–∏ 2025',
      description: '–û—Ñ—ñ—Ü—ñ–π–Ω—ñ –∑–º–∞–≥–∞–Ω–Ω—è —Ñ–µ–¥–µ—Ä–∞—Ü—ñ—ó –£–∫—Ä–∞—ó–Ω–∏ –∑—ñ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ—ó –∞–µ—Ä–æ–±—ñ–∫–∏ —Ç–∞ —Ñ—ñ—Ç–Ω–µ—Å—É.',
      date: '2025-04-15',
      time: '10:00',
      location: '–ü–∞–ª–∞—Ü —Å–ø–æ—Ä—Ç—É "–£–∫—Ä–∞—ó–Ω–∞"',
      address: '–≤—É–ª. –í–µ–ª–∏–∫–∞ –í–∞—Å—ñ–ª—å–∫—ñ–≤—Å—å–∫–∞, 55, –ö–∏—ó–≤, 03150',
      city: '–ö–∏—ó–≤',
      organizing_club: '–°–ö "–ì—Ä–∞—Ü—ñ—è"',
      status: 'registration_open',
      contact_person: {
        name: '–Ü–≤–∞–Ω–µ–Ω–∫–æ –ú–∞—Ä—ñ—è –ü–µ—Ç—Ä—ñ–≤–Ω–∞',
        position: '–î–∏—Ä–µ–∫—Ç–æ—Ä –∑–º–∞–≥–∞–Ω—å',
        phone: '+380 67 123 45 67',
        email: 'competitions@fusaf.org.ua'
      },
      program_fees: {
        iw_im: 500,
        mp: 600,
        tr: 800,
        gr: 1000,
        ad: 1200,
        as: 1200
      },
      payment_details: {
        bank_name: '–ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫',
        account_number: 'UA123456789012345678901234567',
        account_holder: '–°–ö "–ì—Ä–∞—Ü—ñ—è"',
        swift_code: 'PBANUA2X'
      },
      max_participants_by_program: {
        iw: 3,
        im: 3,
        mp: 2,
        tr: 2,
        gr: 1,
        ad: 1,
        as: 1
      },
      categories: [
        'YOUTH / 12-14 YEARS',
        'JUNIORS / 15-17 YEARS',
        'SENIORS 18+ YEARS'
      ],
      rules: '–ó–º–∞–≥–∞–Ω–Ω—è –ø—Ä–æ–≤–æ–¥—è—Ç—å—Å—è –∑–≥—ñ–¥–Ω–æ –∑ –ø—Ä–∞–≤–∏–ª–∞–º–∏ FIG —Ç–∞ –§–£–°–ê–§.',
      equipment_requirements: '–ú—ñ–Ω—ñ–º—É–º 2 –∫–∏–ª–∏–º–∫–∏ –æ–¥–Ω–æ–≥–æ –≤–∏—Ä–æ–±–Ω–∏–∫–∞',
      accommodation: {
        available: true,
        details: '–ì–æ—Ç–µ–ª—å "–ü—Ä–µ–º\'—î—Ä –ü–∞–ª–∞—Ü"',
        cost_per_night: 800
      },
      meals: {
        available: true,
        details: '–¢—Ä—å–æ—Ö—Ä–∞–∑–æ–≤–µ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è',
        cost_per_meal: 150
      },
      transportation: {
        available: true,
        details: '–¢—Ä–∞–Ω—Å—Ñ–µ—Ä –≤—ñ–¥ –≥–æ—Ç–µ–ª—é'
      },
      medical_requirements: '–û–±–æ–≤\'—è–∑–∫–æ–≤–∞ –º–µ–¥–∏—á–Ω–∞ –¥–æ–≤—ñ–¥–∫–∞',
      insurance_required: true,
      notes: '–î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –¥–ª—è —É—á–∞—Å–Ω–∏–∫—ñ–≤',
      website: 'https://competition.fusaf.org.ua',
      registration_deadline: '2025-03-15'
    };

    return NextResponse.json({
      success: true,
      competition: demoCompetition
    });

  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–º–∞–≥–∞–Ω–Ω—è –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:', error);
    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    }, { status: 500 });
  }
}
