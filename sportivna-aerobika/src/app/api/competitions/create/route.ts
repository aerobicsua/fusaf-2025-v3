import { type NextRequest, NextResponse } from 'next/server';
import { getApiSession } from '@/lib/auth';
// authOptions removed

export async function POST(request: NextRequest) {
  try {
    const session = await getApiSession(request);

    if (!session?.user?.email) {
      return NextResponse.json({
        success: false,
        error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π'
      }, { status: 401 });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∞ - —Ç—ñ–ª—å–∫–∏ –≤–ª–∞—Å–Ω–∏–∫–∏ –∫–ª—É–±—ñ–≤ —Ç–∞ –∞–¥–º—ñ–Ω–∏ –º–æ–∂—É—Ç—å —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –∑–º–∞–≥–∞–Ω–Ω—è
    const canCreate = session.user?.roles?.some((role: string) =>
      ['admin', 'club_owner'].includes(role)
    );

    if (!canCreate) {
      return NextResponse.json({
        success: false,
        error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–º–∞–≥–∞–Ω—å'
      }, { status: 403 });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç—É - FormData –¥–ª—è —Ñ–∞–π–ª—ñ–≤ –∞–±–æ JSON –¥–ª—è –∑–≤–∏—á–∞–π–Ω–∏—Ö –¥–∞–Ω–∏—Ö
    const contentType = request.headers.get('content-type');
    let competitionData: any;
    const uploadedFiles: { [key: string]: File | File[] } = {};

    if (contentType?.includes('multipart/form-data')) {
      // –û–±—Ä–æ–±–∫–∞ —Ñ–∞–π–ª—ñ–≤ —á–µ—Ä–µ–∑ FormData
      const formData = await request.formData();

      // –û—Ç—Ä–∏–º—É—î–º–æ JSON –¥–∞–Ω—ñ –∑–º–∞–≥–∞–Ω–Ω—è
      const jsonData = formData.get('competitionData') as string;
      competitionData = JSON.parse(jsonData);

      // –û–±—Ä–æ–±–ª—è—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ —Ñ–∞–π–ª–∏
      const regulationFile = formData.get('regulation') as File | null;
      const invitationFile = formData.get('invitation') as File | null;
      const additionalFiles = formData.getAll('additional_docs') as File[];

      // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ñ–∞–π–ª—ñ–≤
      const validateFile = (file: File | null, name: string) => {
        if (!file) return null;

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∏–ø —Ñ–∞–π–ª—É
        if (file.type !== 'application/pdf') {
          throw new Error(`${name} –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ PDF —Ñ–∞–π–ª–æ–º`);
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–æ–∑–º—ñ—Ä (–º–∞–∫—Å–∏–º—É–º 10 –ú–ë)
        const maxSize = 10 * 1024 * 1024;
        if (file.size > maxSize) {
          throw new Error(`${name} –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä: 10 –ú–ë`);
        }

        return file;
      };

      // –í–∞–ª—ñ–¥—É—î–º–æ –∫–æ–∂–µ–Ω —Ñ–∞–π–ª
      if (regulationFile) {
        const validatedFile = validateFile(regulationFile, '–†–µ–≥–ª–∞–º–µ–Ω—Ç');
        if (validatedFile) uploadedFiles.regulation = validatedFile;
      }
      if (invitationFile) {
        const validatedFile = validateFile(invitationFile, '–ó–∞–ø—Ä–æ—à–µ–Ω–Ω—è');
        if (validatedFile) uploadedFiles.invitation = validatedFile;
      }
      if (additionalFiles.length > 0) {
        uploadedFiles.additional_docs = additionalFiles.map((file, index) =>
          validateFile(file, `–î–æ–¥–∞—Ç–∫–æ–≤–∏–π –¥–æ–∫—É–º–µ–Ω—Ç ${index + 1}`)
        ).filter(Boolean) as File[];
      }
    } else {
      // –ó–≤–∏—á–∞–π–Ω–∏–π JSON –∑–∞–ø–∏—Ç –±–µ–∑ —Ñ–∞–π–ª—ñ–≤
      competitionData = await request.json();
    }

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
    if (!competitionData.title?.trim()) {
      return NextResponse.json({
        success: false,
        error: '–ù–∞–∑–≤–∞ –∑–º–∞–≥–∞–Ω–Ω—è —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–æ—é'
      }, { status: 400 });
    }

    if (!competitionData.date) {
      return NextResponse.json({
        success: false,
        error: '–î–∞—Ç–∞ –∑–º–∞–≥–∞–Ω–Ω—è —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–æ—é'
      }, { status: 400 });
    }

    if (!competitionData.location?.trim()) {
      return NextResponse.json({
        success: false,
        error: '–ú—ñ—Å—Ü–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º'
      }, { status: 400 });
    }

    if (!competitionData.contact_person?.name?.trim()) {
      return NextResponse.json({
        success: false,
        error: '–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ –æ—Å–æ–±–∞ —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–æ—é'
      }, { status: 400 });
    }

    if (!competitionData.categories || competitionData.categories.length === 0) {
      return NextResponse.json({
        success: false,
        error: '–û–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é'
      }, { status: 400 });
    }

    // –ì–µ–Ω–µ—Ä—É—î–º–æ ID –∑–º–∞–≥–∞–Ω–Ω—è (–≤ —Ä–µ–∞–ª—å–Ω—ñ–π —Å–∏—Å—Ç–µ–º—ñ —Ü–µ –±—É–¥–µ –∑—Ä–æ–±–ª–µ–Ω–æ –ë–î)
    const competitionId = `comp-${Date.now()}`;

    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å–∏–º—É–ª—è—Ü—ñ—ó –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É (–≤ —Ä–µ–∞–ª—å–Ω—ñ–π —Å–∏—Å—Ç–µ–º—ñ —Ü–µ –±—É–¥–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä/—Ö–º–∞—Ä—É)
    const saveFile = async (file: File, type: string): Promise<string> => {
      // –í —Ä–µ–∞–ª—å–Ω—ñ–π —Å–∏—Å—Ç–µ–º—ñ —Ç—É—Ç –±–∏ –±—É–ª–æ:
      // 1. –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä/S3/CloudFlare
      // 2. –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ URL
      // 3. –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –º–µ—Ç–∞–¥–∞–Ω–∏—Ö –≤ –ë–î

      // –î–ª—è –¥–µ–º–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ñ–∞–π–ª
      const timestamp = Date.now();
      const fileName = `${type}_${competitionId}_${timestamp}_${file.name}`;
      const fileUrl = `/api/competitions/${competitionId}/documents/${fileName}`;

      console.log(`üìÅ –ó–±–µ—Ä–µ–∂–µ–Ω–æ —Ñ–∞–π–ª: ${file.name} (${file.size} bytes) —è–∫ ${fileName}`);

      return fileUrl;
    };

    // –û–±—Ä–æ–±–ª—è—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏
    const documents: {
      regulation?: { name: string; url: string; size: number };
      invitation?: { name: string; url: string; size: number };
      additional_docs?: Array<{ name: string; url: string; size: number }>;
    } = {};

    if (uploadedFiles.regulation) {
      const file = uploadedFiles.regulation as File;
      documents.regulation = {
        name: file.name,
        url: await saveFile(file, 'regulation'),
        size: file.size
      };
    }

    if (uploadedFiles.invitation) {
      const file = uploadedFiles.invitation as File;
      documents.invitation = {
        name: file.name,
        url: await saveFile(file, 'invitation'),
        size: file.size
      };
    }

    if (uploadedFiles.additional_docs && Array.isArray(uploadedFiles.additional_docs)) {
      documents.additional_docs = await Promise.all(
        uploadedFiles.additional_docs.map(async (file, index) => ({
          name: file.name,
          url: await saveFile(file, `additional_${index}`),
          size: file.size
        }))
      );
    }

    // –°—Ç–≤–æ—Ä—é—î–º–æ –∑–º–∞–≥–∞–Ω–Ω—è (–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ–π–Ω–∞ –ª–æ–≥—ñ–∫–∞)
    const newCompetition = {
      id: competitionId,
      title: competitionData.title,
      description: competitionData.description || '',
      date: competitionData.date,
      time: competitionData.time || '10:00',
      location: competitionData.location,
      address: competitionData.address || '',
      city: competitionData.city || '',
      // –ù–æ–≤—ñ –ø–æ–ª—è –¥–ª—è —Ñ—ñ–Ω–∞–Ω—Å—ñ–≤ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–∞—Ö
      program_fees: {
        iw_im: competitionData.program_fees?.iw_im || 0,
        mp: competitionData.program_fees?.mp || 0,
        tr: competitionData.program_fees?.tr || 0,
        gr: competitionData.program_fees?.gr || 0,
        ad: competitionData.program_fees?.ad || 0,
        as: competitionData.program_fees?.as || 0
      },
      // –ó–≤–æ—Ä–æ—Ç–Ω–∞ —Å—É–º—ñ—Å–Ω—ñ—Å—Ç—å (—Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Å–µ—Ä–µ–¥–Ω—é –≤–∞—Ä—Ç—ñ—Å—Ç—å)
      registration_fee: Math.round((Object.values(competitionData.program_fees || {}).reduce((sum: number, fee: unknown) => {
        const numericFee = typeof fee === 'number' ? fee : (typeof fee === 'string' ? parseFloat(fee as string) : 0);
        return sum + (isNaN(numericFee) ? 0 : numericFee);
      }, 0 as number) as number) / 6) || 0,
      entry_fee: 0,
      // –ù–æ–≤—ñ –ø–æ–ª—è –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —É—á–∞—Å–Ω–∏–∫—ñ–≤ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–∞—Ö
      max_participants_by_program: {
        iw: competitionData.max_participants_by_program?.iw || 0,
        im: competitionData.max_participants_by_program?.im || 0,
        mp: competitionData.max_participants_by_program?.mp || 0,
        tr: competitionData.max_participants_by_program?.tr || 0,
        gr: competitionData.max_participants_by_program?.gr || 0,
        ad: competitionData.max_participants_by_program?.ad || 0,
        as: competitionData.max_participants_by_program?.as || 0
      },
      // –ó–≤–æ—Ä–æ—Ç–Ω–∞ —Å—É–º—ñ—Å–Ω—ñ—Å—Ç—å (—Å—É–º–∞ –≤—Å—ñ—Ö —É—á–∞—Å–Ω–∏–∫—ñ–≤)
      max_participants: Object.values(competitionData.max_participants_by_program || {}).reduce((sum: number, count: unknown) => sum + Number(count), 0) || 100,
      registration_deadline: competitionData.registration_deadline || competitionData.date,
      status: 'draft', // –ù–æ–≤—ñ –∑–º–∞–≥–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä—é—é—Ç—å—Å—è —è–∫ —á–µ—Ä–Ω–µ—Ç–∫–∞
      organizing_club: competitionData.organizing_club || '',
      contact_person: {
        name: competitionData.contact_person.name,
        position: competitionData.contact_person.position || '',
        phone: competitionData.contact_person.phone,
        email: competitionData.contact_person.email
      },
      payment_details: {
        bank_name: competitionData.payment_details?.bank_name || '',
        account_number: competitionData.payment_details?.account_number || '',
        account_holder: competitionData.payment_details?.account_holder || '',
        swift_code: competitionData.payment_details?.swift_code || ''
      },
      categories: competitionData.categories,
      rules: competitionData.rules || '',
      equipment_requirements: competitionData.equipment_requirements || '',
      accommodation: {
        available: competitionData.accommodation?.available || false,
        details: competitionData.accommodation?.details || '',
        cost_per_night: competitionData.accommodation?.cost_per_night || null
      },
      meals: {
        available: competitionData.meals?.available || false,
        details: competitionData.meals?.details || '',
        cost_per_meal: competitionData.meals?.cost_per_meal || null
      },
      transportation: {
        available: competitionData.transportation?.available || false,
        details: competitionData.transportation?.details || ''
      },
      medical_requirements: competitionData.medical_requirements || '',
      insurance_required: competitionData.insurance_required !== false,
      notes: competitionData.notes || '',
      website: competitionData.website || '',
      // –î–æ–¥–∞—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏
      documents,
      created_by: session.user.email,
      created_at: new Date().toISOString(),
      preliminary_registrations: [],
      individual_registrations: []
    };

    // –í —Ä–µ–∞–ª—å–Ω—ñ–π —Å–∏—Å—Ç–µ–º—ñ —Ç—É—Ç –±–∏ –±—É–ª–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –ë–î
    console.log('üèÜ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∑–º–∞–≥–∞–Ω–Ω—è:', {
      id: competitionId,
      title: newCompetition.title,
      date: newCompetition.date,
      organizer: session.user.email,
      categories: newCompetition.categories,
      documentsCount: {
        regulation: !!documents.regulation,
        invitation: !!documents.invitation,
        additional: documents.additional_docs?.length || 0
      }
    });

    // –ü—ñ–¥–≥–æ—Ç—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏
    const documentsInfo = [];
    if (documents.regulation) documentsInfo.push('üìÑ –†–µ–≥–ª–∞–º–µ–Ω—Ç');
    if (documents.invitation) documentsInfo.push('üìã –ó–∞–ø—Ä–æ—à–µ–Ω–Ω—è');
    if (documents.additional_docs?.length) {
      documentsInfo.push(`üìÅ –î–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤: ${documents.additional_docs.length}`);
    }

    const documentsMessage = documentsInfo.length > 0
      ? `\n\n–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏:\n${documentsInfo.join('\n')}`
      : '';

    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤–µ –∑–º–∞–≥–∞–Ω–Ω—è (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
    if (newCompetition.status === 'published' || newCompetition.status === 'registration_open') {
      try {
        // –í–∏–∫–ª–∏–∫–∞—î–º–æ API —Å–ø–æ–≤—ñ—â–µ–Ω—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        fetch(`${process.env.NEXTAUTH_URL}/api/notifications/send-competition-alert`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Cookie': request.headers.get('cookie') || '', // –ü–µ—Ä–µ–¥–∞—î–º–æ —Å–µ—Å—ñ—é
          },
          body: JSON.stringify({
            competition: newCompetition
          })
        }).then(response => {
          if (response.ok) {
            console.log('‚úÖ –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤–µ –∑–º–∞–≥–∞–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ');
          } else {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω—å');
          }
        }).catch(error => {
          console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Å–ø–æ–≤—ñ—â–µ–Ω—å:', error);
        });
      } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞—Ü—ñ—ó –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω—å:', error);
      }
    }

    // –°–∏–º—É–ª—é—î–º–æ —É—Å–ø—ñ—à–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
    return NextResponse.json({
      success: true,
      competition: newCompetition,
      message: `–ó–º–∞–≥–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ! –í–æ–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫ —á–µ—Ä–Ω–µ—Ç–∫–∞.${documentsMessage}`,
      documents: documents,
      notifications: newCompetition.status === 'published' || newCompetition.status === 'registration_open'
        ? '–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∞–º'
        : '–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –±—É–¥—É—Ç—å –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ –ø—ñ—Å–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó'
    });

  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–º–∞–≥–∞–Ω–Ω—è:', error);
    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    }, { status: 500 });
  }
}
