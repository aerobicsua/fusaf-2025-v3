import { type NextRequest, NextResponse } from 'next/server';
import { getApiSession } from '@/lib/auth';
// authOptions removed

interface RegistrationData {
  competitionId: string;
  program: string;
  category: string;
  participants: Array<{
    memberId: string;
    athleteName: string;
    gender: 'male' | 'female';
    age: number;
    categories: string[];
  }>;
  coach: {
    name: string;
    phone: string;
  };
  club: string;
  notes: string;
  registrationFee: number;
  entryFee: number;
  totalFee: number;
}

// –°–∏–º—É–ª—è—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ–π
const individualRegistrations = new Map<string, {
  id: string;
  competitionId: string;
  program: string;
  category: string;
  participants: Array<{
    memberId: string;
    athleteName: string;
    gender: 'male' | 'female';
    age: number;
    categories: string[];
  }>;
  coach: {
    name: string;
    phone: string;
  };
  club: string;
  notes: string;
  registrationFee: number;
  entryFee: number;
  totalFee: number;
  registeredBy: string;
  registrationDate: string;
  status: 'pending' | 'confirmed' | 'cancelled';
}>();

export async function POST(request: NextRequest) {
  try {
    const session = await getApiSession(request);

    if (!session?.user?.email) {
      return NextResponse.json({
        success: false,
        error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π'
      }, { status: 401 });
    }

    const registrationData: RegistrationData = await request.json();

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
    if (!registrationData.competitionId) {
      return NextResponse.json({
        success: false,
        error: '–ù–µ –≤–∫–∞–∑–∞–Ω–æ –∑–º–∞–≥–∞–Ω–Ω—è'
      }, { status: 400 });
    }

    if (!registrationData.program) {
      return NextResponse.json({
        success: false,
        error: '–ù–µ –≤–∫–∞–∑–∞–Ω–æ –ø—Ä–æ–≥—Ä–∞–º—É –∑–º–∞–≥–∞–Ω—å'
      }, { status: 400 });
    }

    if (!registrationData.category) {
      return NextResponse.json({
        success: false,
        error: '–ù–µ –≤–∫–∞–∑–∞–Ω–æ –≤—ñ–∫–æ–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é'
      }, { status: 400 });
    }

    if (!registrationData.participants || registrationData.participants.length === 0) {
      return NextResponse.json({
        success: false,
        error: '–ù–µ –≤–∫–∞–∑–∞–Ω–æ —É—á–∞—Å–Ω–∏–∫—ñ–≤'
      }, { status: 400 });
    }

    if (!registrationData.coach?.name || !registrationData.coach?.phone) {
      return NextResponse.json({
        success: false,
        error: '–ù–µ –≤–∫–∞–∑–∞–Ω–æ –¥–∞–Ω—ñ —Ç—Ä–µ–Ω–µ—Ä–∞'
      }, { status: 400 });
    }

    if (!registrationData.club) {
      return NextResponse.json({
        success: false,
        error: '–ù–µ –≤–∫–∞–∑–∞–Ω–æ –∫–ª—É–±'
      }, { status: 400 });
    }

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —É—á–∞—Å–Ω–∏–∫—ñ–≤ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–∏
    const CATEGORY_LIMITS = {
      IW: { count: 1, genders: ['female'], name: 'Individual Women' },
      IM: { count: 1, genders: ['male'], name: 'Individual Men' },
      MP: { count: 2, genders: ['male', 'female'], name: 'Mixed Pairs', genderRequirement: 'mixed' },
      TR: { count: 3, genders: ['male', 'female'], name: 'Trio' },
      GR: { count: 5, genders: ['male', 'female'], name: 'Group' },
      AD: { count: 8, genders: ['male', 'female'], name: 'Aerobic Dance' },
      AS: { count: 8, genders: ['male', 'female'], name: 'Aerobic Step' }
    };

    const limits = CATEGORY_LIMITS[registrationData.program as keyof typeof CATEGORY_LIMITS];
    if (!limits) {
      return NextResponse.json({
        success: false,
        error: '–ù–µ–≤—ñ–¥–æ–º–∞ –ø—Ä–æ–≥—Ä–∞–º–∞ –∑–º–∞–≥–∞–Ω—å'
      }, { status: 400 });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É—á–∞—Å–Ω–∏–∫—ñ–≤
    if (registrationData.participants.length !== limits.count) {
      return NextResponse.json({
        success: false,
        error: `–î–ª—è ${limits.name} –ø–æ—Ç—Ä—ñ–±–Ω–æ —Ä—ñ–≤–Ω–æ ${limits.count} —É—á–∞—Å–Ω–∏–∫—ñ–≤`
      }, { status: 400 });
    }

    // –î–ª—è Mixed Pairs –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä—ñ–∑–Ω—ñ —Å—Ç–∞—Ç—ñ
    if (registrationData.program === 'MP') {
      const genders = registrationData.participants.map(p => p.gender);
      if (!genders.includes('male') || !genders.includes('female')) {
        return NextResponse.json({
          success: false,
          error: 'Mixed Pairs –ø–æ–≤–∏–Ω–Ω—ñ —Å–∫–ª–∞–¥–∞—Ç–∏—Å—è –∑ 1 —Ö–ª–æ–ø—Ü—è —Ç–∞ 1 –¥—ñ–≤—á–∏–Ω–∏'
        }, { status: 400 });
      }
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ–º–∞—î –¥—É–±–ª—é—é—á–∏—Ö —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ–π
    const existingRegistration = Array.from(individualRegistrations.values()).find(reg =>
      reg.competitionId === registrationData.competitionId &&
      reg.program === registrationData.program &&
      reg.category === registrationData.category &&
      reg.registeredBy === session.user.email &&
      reg.status !== 'cancelled'
    );

    if (existingRegistration) {
      return NextResponse.json({
        success: false,
        error: '–í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –Ω–∞ —Ü—é –ø—Ä–æ–≥—Ä–∞–º—É –≤ –¥–∞–Ω—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó'
      }, { status: 400 });
    }

    // –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é
    const registrationId = `reg-${Date.now()}`;
    const newRegistration = {
      id: registrationId,
      ...registrationData,
      registeredBy: session.user.email,
      registrationDate: new Date().toISOString(),
      status: 'pending' as const
    };

    individualRegistrations.set(registrationId, newRegistration);

    console.log('üèÜ –ù–æ–≤–∞ —ñ–º–µ–Ω–Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è:', {
      registrationId,
      competition: registrationData.competitionId,
      program: registrationData.program,
      category: registrationData.category,
      participants: registrationData.participants.map(p => p.athleteName).join(', '),
      club: registrationData.club,
      registeredBy: session.user.email
    });

    // –í —Ä–µ–∞–ª—å–Ω—ñ–π —Å–∏—Å—Ç–µ–º—ñ —Ç—É—Ç –±–∏ –±—É–ª–æ:
    // 1. –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
    // 2. –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä–∞–º
    // 3. –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó –ø—Ä–æ –æ–ø–ª–∞—Ç—É
    // 4. –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥—ñ—ó

    return NextResponse.json({
      success: true,
      registration: newRegistration,
      message: '–Ü–º–µ–Ω–Ω—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é —É—Å–ø—ñ—à–Ω–æ –ø–æ–¥–∞–Ω–æ!',
      paymentInfo: {
        amount: registrationData.totalFee,
        currency: 'UAH',
        description: `–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–∞ –∑–º–∞–≥–∞–Ω–Ω—è - ${registrationData.program} (${registrationData.category})`
      }
    });

  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ —ñ–º–µ–Ω–Ω–æ—ó —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:', error);
    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    }, { status: 500 });
  }
}

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
export async function GET(request: NextRequest) {
  try {
    const session = await getApiSession(request);

    if (!session?.user?.email) {
      return NextResponse.json({
        success: false,
        error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π'
      }, { status: 401 });
    }

    const { searchParams } = new URL(request.url);
    const competitionId = searchParams.get('competitionId');

    // –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const userRegistrations = Array.from(individualRegistrations.values()).filter(reg => {
      const matchesUser = reg.registeredBy === session.user.email;
      const matchesCompetition = competitionId ? reg.competitionId === competitionId : true;
      return matchesUser && matchesCompetition;
    });

    return NextResponse.json({
      success: true,
      registrations: userRegistrations
    });

  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ–π:', error);
    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    }, { status: 500 });
  }
}
