import { NextResponse } from 'next/server';
import { getApiSession } from '@/lib/auth';
// authOptions removed
import { AthletesStorage, type CompetitionResult } from '@/lib/athletes-storage';

// GET - –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
export async function GET(
  request: Request,
  { params }: { params: Promise<{ id: string; resultId: string }> }
) {
  try {
    const { id: athleteId, resultId } = await params;

    const athlete = AthletesStorage.findById(athleteId);
    if (!athlete) {
      return NextResponse.json(
        { error: '–°–ø–æ—Ä—Ç—Å–º–µ–Ω–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' },
        { status: 404 }
      );
    }

    const result = athlete.results.find(r => r.id === resultId);
    if (!result) {
      return NextResponse.json(
        { error: '–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' },
        { status: 404 }
      );
    }

    return NextResponse.json({
      athleteId,
      result
    });

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ GET /api/athletes/[id]/results/[resultId]:', error);
    return NextResponse.json(
      { error: '–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É' },
      { status: 500 }
    );
  }
}

// PUT - –æ–Ω–æ–≤–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–º–∞–≥–∞–Ω–Ω—è
export async function PUT(
  request: Request,
  { params }: { params: Promise<{ id: string; resultId: string }> }
) {
  try {
    const session = await getApiSession(request);
    const { id: athleteId, resultId } = await params;

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
    if (!session) {
      return NextResponse.json(
        { error: '–ù–µ–æ–±—Ö—ñ–¥–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è' },
        { status: 401 }
      );
    }

    const athlete = AthletesStorage.findById(athleteId);
    if (!athlete) {
      return NextResponse.json(
        { error: '–°–ø–æ—Ä—Ç—Å–º–µ–Ω–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' },
        { status: 404 }
      );
    }

    const isAdmin = session.user?.roles?.includes('admin');
    const isOwnProfile = session.user?.email === athlete.email;
    const canEditResults = isAdmin || isOwnProfile || session.user?.roles?.includes('coach_judge');

    if (!canEditResults) {
      return NextResponse.json(
        { error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤' },
        { status: 403 }
      );
    }

    const existingResult = athlete.results.find(r => r.id === resultId);
    if (!existingResult) {
      return NextResponse.json(
        { error: '–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' },
        { status: 404 }
      );
    }

    const body = await request.json();
    const updates = { ...body };

    // –í–∏–¥–∞–ª—è—î–º–æ id –∑ –æ–Ω–æ–≤–ª–µ–Ω—å (–Ω–µ –º–æ–∂–Ω–∞ –∑–º—ñ–Ω—é–≤–∞—Ç–∏)
    delete updates.id;

    const success = AthletesStorage.updateResult(athleteId, resultId, updates);

    if (!success) {
      return NextResponse.json(
        { error: '–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É' },
        { status: 500 }
      );
    }

    // –û—Ç—Ä–∏–º—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const updatedAthlete = AthletesStorage.findById(athleteId);
    const updatedResult = updatedAthlete?.results.find(r => r.id === resultId);

    console.log('‚úèÔ∏è –û–Ω–æ–≤–ª–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–º–∞–≥–∞–Ω–Ω—è:', {
      athleteId,
      resultId,
      competition: updatedResult?.competitionName,
      changes: Object.keys(updates)
    });

    return NextResponse.json({
      message: '–†–µ–∑—É–ª—å—Ç–∞—Ç —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ',
      result: updatedResult
    });

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ PUT /api/athletes/[id]/results/[resultId]:', error);
    return NextResponse.json(
      { error: '–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É' },
      { status: 500 }
    );
  }
}

// DELETE - –≤–∏–¥–∞–ª–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–º–∞–≥–∞–Ω–Ω—è
export async function DELETE(
  request: Request,
  { params }: { params: Promise<{ id: string; resultId: string }> }
) {
  try {
    const session = await getApiSession(request);
    const { id: athleteId, resultId } = await params;

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
    if (!session) {
      return NextResponse.json(
        { error: '–ù–µ–æ–±—Ö—ñ–¥–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è' },
        { status: 401 }
      );
    }

    const athlete = AthletesStorage.findById(athleteId);
    if (!athlete) {
      return NextResponse.json(
        { error: '–°–ø–æ—Ä—Ç—Å–º–µ–Ω–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' },
        { status: 404 }
      );
    }

    const isAdmin = session.user?.roles?.includes('admin');
    const isOwnProfile = session.user?.email === athlete.email;
    const canEditResults = isAdmin || isOwnProfile || session.user?.roles?.includes('coach_judge');

    if (!canEditResults) {
      return NextResponse.json(
        { error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤' },
        { status: 403 }
      );
    }

    const existingResult = athlete.results.find(r => r.id === resultId);
    if (!existingResult) {
      return NextResponse.json(
        { error: '–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' },
        { status: 404 }
      );
    }

    const success = AthletesStorage.deleteResult(athleteId, resultId);

    if (!success) {
      return NextResponse.json(
        { error: '–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É' },
        { status: 500 }
      );
    }

    console.log('üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–º–∞–≥–∞–Ω–Ω—è:', {
      athleteId,
      resultId,
      competition: existingResult.competitionName
    });

    return NextResponse.json({
      message: '–†–µ–∑—É–ª—å—Ç–∞—Ç —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ',
      deletedResult: existingResult
    });

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ DELETE /api/athletes/[id]/results/[resultId]:', error);
    return NextResponse.json(
      { error: '–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É' },
      { status: 500 }
    );
  }
}
