import { NextResponse } from 'next/server';
import { getApiSession } from '@/lib/auth';
// authOptions removed
import { AthletesStorage, type CompetitionResult } from '@/lib/athletes-storage';

// POST - –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–º–∞–≥–∞–Ω–Ω—è
export async function POST(
  request: Request,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const session = await getApiSession(request);
    const { id: athleteId } = await params;

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
    if (!session) {
      return NextResponse.json(
        { error: '–ù–µ–æ–±—Ö—ñ–¥–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è' },
        { status: 401 }
      );
    }

    const athlete = AthletesStorage.findById(athleteId);
    if (!athlete) {
      return NextResponse.json(
        { error: '–°–ø–æ—Ä—Ç—Å–º–µ–Ω–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' },
        { status: 404 }
      );
    }

    const isAdmin = session.user?.roles?.includes('admin');
    const isOwnProfile = session.user?.email === athlete.email;
    const canEditResults = isAdmin || isOwnProfile || session.user?.roles?.includes('coach_judge');

    if (!canEditResults) {
      return NextResponse.json(
        { error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤' },
        { status: 403 }
      );
    }

    const body = await request.json();
    const {
      competitionName,
      competitionType,
      date,
      location,
      venue,
      category,
      discipline,
      rank,
      totalScore,
      technicScore,
      artisticScore,
      executionScore,
      difficultyScore,
      participantsCount,
      notes,
      photos,
      videoUrl,
      judgesCount,
      deductions
    } = body;

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
    if (!competitionName || !date || !location || !category || !discipline) {
      return NextResponse.json(
        { error: '–û–±–æ–≤\'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è: competitionName, date, location, category, discipline' },
        { status: 400 }
      );
    }

    // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const result: CompetitionResult = {
      id: `result-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
      competitionName,
      competitionType: competitionType || 'Other',
      date,
      location,
      venue: venue || '',
      category,
      discipline,
      rank: rank || undefined,
      totalScore: totalScore || undefined,
      technicScore: technicScore || undefined,
      artisticScore: artisticScore || undefined,
      executionScore: executionScore || undefined,
      difficultyScore: difficultyScore || undefined,
      participantsCount: participantsCount || undefined,
      isPersonalBest: false, // –ë—É–¥–µ –æ–±—á–∏—Å–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ
      notes: notes || '',
      photos: photos || [],
      videoUrl: videoUrl || '',
      judgesCount: judgesCount || undefined,
      deductions: deductions || undefined
    };

    const success = AthletesStorage.addResult(athleteId, result);

    if (!success) {
      return NextResponse.json(
        { error: '–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É' },
        { status: 500 }
      );
    }

    console.log('üèÖ –î–æ–¥–∞–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–º–∞–≥–∞–Ω–Ω—è:', {
      athleteId,
      resultId: result.id,
      competition: result.competitionName,
      rank: result.rank,
      score: result.totalScore
    });

    return NextResponse.json({
      message: '–†–µ–∑—É–ª—å—Ç–∞—Ç —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ',
      result
    }, { status: 201 });

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ POST /api/athletes/[id]/results:', error);
    return NextResponse.json(
      { error: '–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É' },
      { status: 500 }
    );
  }
}

// GET - –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞ –∑ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—î—é
export async function GET(
  request: Request,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const { id: athleteId } = await params;
    const url = new URL(request.url);
    const year = url.searchParams.get('year');
    const discipline = url.searchParams.get('discipline');
    const competitionType = url.searchParams.get('competitionType');
    const limit = Number.parseInt(url.searchParams.get('limit') || '50');
    const includeStats = url.searchParams.get('includeStats') === 'true';

    const athlete = AthletesStorage.findById(athleteId);
    if (!athlete) {
      return NextResponse.json(
        { error: '–°–ø–æ—Ä—Ç—Å–º–µ–Ω–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' },
        { status: 404 }
      );
    }

    let results = athlete.results || [];

    // –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –ø–æ —Ä–æ–∫—É
    if (year) {
      results = results.filter(result =>
        new Date(result.date).getFullYear().toString() === year
      );
    }

    // –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –ø–æ –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω—ñ
    if (discipline) {
      results = results.filter(result => result.discipline === discipline);
    }

    // –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –ø–æ —Ç–∏–ø—É –∑–º–∞–≥–∞–Ω–Ω—è
    if (competitionType) {
      results = results.filter(result => result.competitionType === competitionType);
    }

    // –°–æ—Ä—Ç—É—î–º–æ –ø–æ –¥–∞—Ç—ñ (–Ω–æ–≤—ñ —Å–ø–æ—á–∞—Ç–∫—É)
    results.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());

    // –û–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å
    results = results.slice(0, limit);

    const response: any = {
      athleteId,
      results,
      total: results.length,
      filters: { year, discipline, competitionType, limit }
    };

    // –î–æ–¥–∞—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
    if (includeStats) {
      response.stats = athlete.stats;
      response.personalBests = athlete.personalBests;

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
      response.resultStats = {
        totalCompetitions: results.length,
        wins: results.filter(r => r.rank === 1).length,
        podiums: results.filter(r => r.rank && r.rank <= 3).length,
        averageRank: results.filter(r => r.rank).length > 0
          ? results.filter(r => r.rank).reduce((sum, r) => sum + (r.rank || 0), 0) / results.filter(r => r.rank).length
          : 0,
        bestRank: results.filter(r => r.rank).length > 0
          ? Math.min(...results.filter(r => r.rank).map(r => r.rank!))
          : 0,
        averageScore: results.filter(r => r.totalScore).length > 0
          ? results.filter(r => r.totalScore).reduce((sum, r) => sum + (r.totalScore || 0), 0) / results.filter(r => r.totalScore).length
          : 0,
        bestScore: results.filter(r => r.totalScore).length > 0
          ? Math.max(...results.filter(r => r.totalScore).map(r => r.totalScore!))
          : 0,
        competitionsByYear: results.reduce((acc, r) => {
          const year = new Date(r.date).getFullYear().toString();
          acc[year] = (acc[year] || 0) + 1;
          return acc;
        }, {} as Record<string, number>),
        medalsByType: {
          gold: results.filter(r => r.rank === 1).length,
          silver: results.filter(r => r.rank === 2).length,
          bronze: results.filter(r => r.rank === 3).length
        }
      };
    }

    return NextResponse.json(response);

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ GET /api/athletes/[id]/results:', error);
    return NextResponse.json(
      { error: '–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤' },
      { status: 500 }
    );
  }
}
