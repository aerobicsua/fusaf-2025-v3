import { NextResponse } from 'next/server';
import { AthletesStorage } from '@/lib/athletes-storage';

// GET - –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞
export async function GET(
  request: Request,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const { id: athleteId } = await params;
    const url = new URL(request.url);
    const period = url.searchParams.get('period'); // year, all, last5years
    const discipline = url.searchParams.get('discipline');

    const athlete = AthletesStorage.findById(athleteId);
    if (!athlete) {
      return NextResponse.json(
        { error: '–°–ø–æ—Ä—Ç—Å–º–µ–Ω–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' },
        { status: 404 }
      );
    }

    let results = athlete.results || [];

    // –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –ø–æ –ø–µ—Ä—ñ–æ–¥—É
    if (period) {
      const currentYear = new Date().getFullYear();
      if (period === 'year') {
        results = results.filter(r =>
          new Date(r.date).getFullYear() === currentYear
        );
      } else if (period === 'last5years') {
        results = results.filter(r =>
          new Date(r.date).getFullYear() >= currentYear - 4
        );
      }
    }

    // –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –ø–æ –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω—ñ
    if (discipline) {
      results = results.filter(r => r.discipline === discipline);
    }

    // –ë–∞–∑–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const totalCompetitions = results.length;
    const wins = results.filter(r => r.rank === 1).length;
    const podiums = results.filter(r => r.rank && r.rank <= 3).length;
    const medalsByType = {
      gold: results.filter(r => r.rank === 1).length,
      silver: results.filter(r => r.rank === 2).length,
      bronze: results.filter(r => r.rank === 3).length
    };

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–ª—ñ–≤
    const scoresWithValues = results.filter(r => r.totalScore);
    const averageScore = scoresWithValues.length > 0
      ? scoresWithValues.reduce((sum, r) => sum + (r.totalScore || 0), 0) / scoresWithValues.length
      : 0;
    const bestScore = scoresWithValues.length > 0
      ? Math.max(...scoresWithValues.map(r => r.totalScore!))
      : 0;

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–æ–∫–∞–º
    const competitionsByYear = results.reduce((acc, r) => {
      const year = new Date(r.date).getFullYear().toString();
      if (!acc[year]) acc[year] = { competitions: 0, wins: 0, podiums: 0, bestScore: 0 };
      acc[year].competitions++;
      if (r.rank === 1) acc[year].wins++;
      if (r.rank && r.rank <= 3) acc[year].podiums++;
      if (r.totalScore && r.totalScore > acc[year].bestScore) {
        acc[year].bestScore = r.totalScore;
      }
      return acc;
    }, {} as Record<string, any>);

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∞—Ö
    const disciplineStats = results.reduce((acc, r) => {
      if (!acc[r.discipline]) {
        acc[r.discipline] = {
          competitions: 0,
          wins: 0,
          podiums: 0,
          bestRank: Number.POSITIVE_INFINITY,
          averageScore: 0,
          bestScore: 0,
          scores: []
        };
      }

      acc[r.discipline].competitions++;
      if (r.rank === 1) acc[r.discipline].wins++;
      if (r.rank && r.rank <= 3) acc[r.discipline].podiums++;
      if (r.rank && r.rank < acc[r.discipline].bestRank) {
        acc[r.discipline].bestRank = r.rank;
      }
      if (r.totalScore) {
        acc[r.discipline].scores.push(r.totalScore);
        if (r.totalScore > acc[r.discipline].bestScore) {
          acc[r.discipline].bestScore = r.totalScore;
        }
      }
      return acc;
    }, {} as Record<string, any>);

    // –û–±—á–∏—Å–ª—é—î–º–æ —Å–µ—Ä–µ–¥–Ω—ñ –±–∞–ª–∏ –ø–æ –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∞—Ö
    Object.keys(disciplineStats).forEach(disc => {
      const scores = disciplineStats[disc].scores;
      disciplineStats[disc].averageScore = scores.length > 0
        ? scores.reduce((sum: number, score: number) => sum + score, 0) / scores.length
        : 0;
      delete disciplineStats[disc].scores; // –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π –º–∞—Å–∏–≤
    });

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞—Ö –∑–º–∞–≥–∞–Ω—å
    const competitionTypeStats = results.reduce((acc, r) => {
      if (!acc[r.competitionType]) {
        acc[r.competitionType] = { competitions: 0, wins: 0, podiums: 0, bestScore: 0 };
      }
      acc[r.competitionType].competitions++;
      if (r.rank === 1) acc[r.competitionType].wins++;
      if (r.rank && r.rank <= 3) acc[r.competitionType].podiums++;
      if (r.totalScore && r.totalScore > acc[r.competitionType].bestScore) {
        acc[r.competitionType].bestScore = r.totalScore;
      }
      return acc;
    }, {} as Record<string, any>);

    // –ù–∞–π–∫—Ä–∞—â—ñ —Ç–∞ –Ω–∞–π–≥—ñ—Ä—à—ñ –≤–∏—Å—Ç—É–ø–∏
    const rankedResults = results.filter(r => r.rank).sort((a, b) => (a.rank || 0) - (b.rank || 0));
    const scoredResults = results.filter(r => r.totalScore).sort((a, b) => (b.totalScore || 0) - (a.totalScore || 0));

    const bestPerformances = {
      byRank: rankedResults.slice(0, 5),
      byScore: scoredResults.slice(0, 5)
    };

    // –ü—Ä–æ–≥—Ä–µ—Å –ø–æ —á–∞—Å—É (–æ—Å—Ç–∞–Ω–Ω—ñ 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤)
    const recentResults = results
      .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())
      .slice(0, 5)
      .reverse(); // –í—ñ–¥ —Å—Ç–∞—Ä—à–∏—Ö –¥–æ –Ω–æ–≤—ñ—à–∏—Ö

    const progressTrend = recentResults.map(r => ({
      date: r.date,
      competition: r.competitionName,
      rank: r.rank,
      score: r.totalScore,
      discipline: r.discipline
    }));

    // –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ —Ä–µ–∫–æ—Ä–¥–∏
    const personalBests = athlete.personalBests || {};

    // –¶—ñ–∫–∞–≤—ñ —Ñ–∞–∫—Ç–∏
    const interestingFacts = [];

    if (wins > 0) {
      interestingFacts.push(`ü•á ${wins} –ø–µ—Ä–µ–º–æ–≥ —É –∑–º–∞–≥–∞–Ω–Ω—è—Ö`);
    }

    if (podiums > 0) {
      const podiumRate = Math.round((podiums / totalCompetitions) * 100);
      interestingFacts.push(`üèÜ ${podiumRate}% –∑–º–∞–≥–∞–Ω—å –∑–∞–≤–µ—Ä—à–µ–Ω–æ –≤ —Ç–æ–ø-3`);
    }

    if (scoresWithValues.length > 0) {
      interestingFacts.push(`üìä –°–µ—Ä–µ–¥–Ω—ñ–π –±–∞–ª: ${averageScore.toFixed(1)}`);
    }

    const yearSpan = results.length > 0 ?
      new Date().getFullYear() - Math.min(...results.map(r => new Date(r.date).getFullYear())) + 1 : 0;

    if (yearSpan > 1) {
      interestingFacts.push(`‚è≥ ${yearSpan} —Ä–æ–∫—ñ–≤ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ—ó –∫–∞—Ä'—î—Ä–∏`);
    }

    const response = {
      athleteId,
      athlete: {
        name: `${athlete.firstName} ${athlete.lastName}`,
        country: athlete.country,
        disciplines: athlete.disciplines,
        club: athlete.club
      },
      period: period || 'all',
      discipline: discipline || 'all',

      // –û—Å–Ω–æ–≤–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      overview: {
        totalCompetitions,
        wins,
        podiums,
        winRate: totalCompetitions > 0 ? Math.round((wins / totalCompetitions) * 100) : 0,
        podiumRate: totalCompetitions > 0 ? Math.round((podiums / totalCompetitions) * 100) : 0,
        averageScore: Math.round(averageScore * 10) / 10,
        bestScore,
        medalsByType
      },

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–æ–∫–∞–º, –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∞—Ö, —Ç–∏–ø–∞—Ö –∑–º–∞–≥–∞–Ω—å
      breakdown: {
        byYear: competitionsByYear,
        byDiscipline: disciplineStats,
        byCompetitionType: competitionTypeStats
      },

      // –ù–∞–π–∫—Ä–∞—â—ñ –≤–∏—Å—Ç—É–ø–∏
      bestPerformances,

      // –ü—Ä–æ–≥—Ä–µ—Å
      progressTrend,

      // –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ —Ä–µ–∫–æ—Ä–¥–∏
      personalBests,

      // –¶—ñ–∫–∞–≤—ñ —Ñ–∞–∫—Ç–∏
      interestingFacts,

      // –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞
      athleteStats: athlete.stats,

      // –ú–µ—Ç–∞–¥–∞–Ω—ñ
      metadata: {
        totalResultsInDatabase: athlete.results.length,
        filteredResults: results.length,
        lastUpdated: athlete.lastUpdated,
        calculatedAt: new Date().toISOString()
      }
    };

    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞:', {
      athleteId,
      name: `${athlete.firstName} ${athlete.lastName}`,
      period,
      discipline,
      totalCompetitions,
      wins,
      podiums
    });

    return NextResponse.json(response);

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ GET /api/athletes/[id]/stats:', error);
    return NextResponse.json(
      { error: '–ü–æ–º–∏–ª–∫–∞ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏' },
      { status: 500 }
    );
  }
}
