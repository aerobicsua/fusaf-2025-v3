import { NextResponse } from 'next/server';

// –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞ –¥–ª—è API
interface AthleteResponse {
  id: string;
  name: string;
  email: string;
  phone: string;
  city: string;
  club: string;
  registeredAt: string;
  status: string;
}

// GET - –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω—ñ–≤ –∑ localStorage
export async function GET(request: Request) {
  try {
    const url = new URL(request.url);

    // –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
    const region = url.searchParams.get('region');
    const club = url.searchParams.get('club');
    const license = url.searchParams.get('license');
    const surname = url.searchParams.get('surname');
    const status = url.searchParams.get('status');

    console.log('üèÜ GET /api/athletes –∑ localStorage —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏:', {
      region, club, license, surname, status
    });

    // –¢–ò–ú–ß–ê–°–û–í–ï –†–Ü–®–ï–ù–ù–Ø: –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –¥–∞–Ω—ñ —è–∫—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å —Ç–µ—Å—Ç–æ–≤–∏–º –¥–∞–Ω–∏–º –∑ –≥–æ–ª–æ–≤–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    // –í —Ä–µ–∞–ª—å–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—ñ —Ç—É—Ç –±—É–¥–µ –±–∞–∑–∞ –¥–∞–Ω–∏—Ö –∞–±–æ localStorage —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–¥–∞—á—É –¥–∞–Ω–∏—Ö –∑ –∫–ª—ñ—î–Ω—Ç–∞
    const now = Date.now();
    const testAthleteId = `athlete-test-${now}`;

    const athletes: AthleteResponse[] = [
      {
        id: testAthleteId,
        name: '–ú–∞—Ä—ñ—è –°–ø–æ—Ä—Ç—Å–º–µ–Ω–∫–æ',
        email: 'maria@example.com', // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —É –ø—É–±–ª—ñ—á–Ω–æ–º—É —Å–ø–∏—Å–∫—É
        phone: '+380501234569', // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —É –ø—É–±–ª—ñ—á–Ω–æ–º—É —Å–ø–∏—Å–∫—É
        city: '–ö–∏—ó–≤',
        club: '–ö–∏—ó–≤—Å—å–∫–∏–π –¶–µ–Ω—Ç—Ä –ê–µ—Ä–æ–±—ñ–∫–∏',
        registeredAt: new Date().toISOString(),
        status: 'active'
      }
    ];

    // –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è (–±–∞–∑–æ–≤–∞)
    let filteredAthletes = athletes;

    if (surname) {
      filteredAthletes = filteredAthletes.filter(athlete =>
        athlete.name.toLowerCase().includes(surname.toLowerCase())
      );
    }

    if (region) {
      filteredAthletes = filteredAthletes.filter(athlete =>
        athlete.city.includes(region)
      );
    }

    if (club && club !== 'all') {
      filteredAthletes = filteredAthletes.filter(athlete =>
        athlete.club === club
      );
    }

    if (status && status !== 'all') {
      filteredAthletes = filteredAthletes.filter(athlete =>
        athlete.status === status
      );
    }

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const stats = {
      total: filteredAthletes.length,
      active: filteredAthletes.filter(a => a.status === 'active').length,
      aerobics: filteredAthletes.length, // –í—Å—ñ –¥–ª—è –¥–µ–º–æ
      fromUkraine: filteredAthletes.length
    };

    return NextResponse.json({
      athletes: filteredAthletes,
      total: filteredAthletes.length,
      stats
    });

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø–æ—Ä—Ç—Å–º–µ–Ω—ñ–≤:', error);

    return NextResponse.json({
      athletes: [],
      total: 0,
      stats: {
        total: 0,
        active: 0,
        aerobics: 0,
        fromUkraine: 0
      }
    }, { status: 500 });
  }
}
