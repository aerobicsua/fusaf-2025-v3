import { NextRequest, NextResponse } from 'next/server';
import { executeQuery } from '@/lib/mysql';

export async function GET() {
  try {
    console.log('üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —Ç–∞–±–ª–∏—Ü—ñ users...');

    // –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ñ users
    const schema = await executeQuery(`
      DESCRIBE users
    `);

    console.log('üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ñ users:', schema);

    // –û—Ç—Ä–∏–º—É—î–º–æ –ø—Ä–∏–∫–ª–∞–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–∞–Ω–∏—Ö
    const sampleUser = await executeQuery(`
      SELECT
        email, first_name, last_name, middle_name,
        date_of_birth, gender, club, coach
      FROM users
      WHERE email = 'andfedos@gmail.com'
      LIMIT 1
    `);

    console.log('üë§ –ü—Ä–∏–∫–ª–∞–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', sampleUser);

    return NextResponse.json({
      success: true,
      schema: schema,
      sampleUser: sampleUser[0] || null,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ö–µ–º–∏:', error);
    return NextResponse.json({
      success: false,
      error: '–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö',
      details: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'
    }, { status: 500 });
  }
}
