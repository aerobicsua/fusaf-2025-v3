import { NextResponse } from 'next/server';
import mysql from 'mysql2/promise';

export async function GET() {
  try {
    console.log('üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É MySQL –ë–î...');

    // –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∑ .env.local
    const connection = await mysql.createConnection({
      host: process.env.DB_HOST,
      port: parseInt(process.env.DB_PORT || '3306'),
      user: process.env.DB_USER,
      password: process.env.DB_PASSWORD,
      database: process.env.DB_NAME,
      ssl: {
        rejectUnauthorized: false
      }
    });

    console.log('‚úÖ –ó\'—î–¥–Ω–∞–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î —Ç–∞–±–ª–∏—Ü—è users
    const [tables] = await connection.execute("SHOW TABLES LIKE 'users'");

    if ((tables as any[]).length === 0) {
      await connection.end();
      return NextResponse.json({
        success: true,
        message: '–¢–∞–±–ª–∏—Ü—è users –Ω–µ —ñ—Å–Ω—É—î –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö',
        usersTable: false,
        users: []
      });
    }

    // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    const [users] = await connection.execute('SELECT id, email, name, roles, status, created_at FROM users');

    console.log('üìä –ó–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:', (users as any[]).length);

    await connection.end();

    return NextResponse.json({
      success: true,
      message: `–ó–Ω–∞–π–¥–µ–Ω–æ ${(users as any[]).length} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö`,
      usersTable: true,
      users: users,
      timestamp: new Date().toISOString()
    });

  } catch (error: unknown) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:', error);
    return NextResponse.json({
      success: false,
      error: '–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤',
      details: { message: error instanceof Error ? error.message : 'Unknown error' }
    }, { status: 500 });
  }
}

export async function DELETE() {
  try {
    console.log('üóëÔ∏è –û—á–∏—â–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ MySQL –ë–î (–∫—Ä—ñ–º –∞–¥–º—ñ–Ω–∞)...');

    const connection = await mysql.createConnection({
      host: process.env.DB_HOST,
      port: parseInt(process.env.DB_PORT || '3306'),
      user: process.env.DB_USER,
      password: process.env.DB_PASSWORD,
      database: process.env.DB_NAME,
      ssl: {
        rejectUnauthorized: false
      }
    });

    console.log('‚úÖ –ó\'—î–¥–Ω–∞–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î —Ç–∞–±–ª–∏—Ü—è users
    const [tables] = await connection.execute("SHOW TABLES LIKE 'users'");

    if ((tables as any[]).length === 0) {
      await connection.end();
      return NextResponse.json({
        success: true,
        message: '–¢–∞–±–ª–∏—Ü—è users –Ω–µ —ñ—Å–Ω—É—î - –Ω—ñ—á–æ–≥–æ –æ—á–∏—â–∞—Ç–∏',
        deletedCount: 0
      });
    }

    // –†–∞—Ö—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
    const [usersBefore] = await connection.execute('SELECT COUNT(*) as count FROM users');
    const countBefore = (usersBefore as any)[0].count;

    // –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∫—Ä—ñ–º –≥–æ–ª–æ–≤–Ω–æ–≥–æ –∞–¥–º—ñ–Ω–∞ –§–£–°–ê–§
    const [result] = await connection.execute(`
      DELETE FROM users
      WHERE email != 'aerobicsua@gmail.com'
    `);

    // –†–∞—Ö—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
    const [usersAfter] = await connection.execute('SELECT COUNT(*) as count FROM users');
    const countAfter = (usersAfter as any)[0].count;

    const deletedCount = countBefore - countAfter;

    console.log(`‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ ${deletedCount} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, –∑–∞–ª–∏—à–∏–ª–æ—Å—å ${countAfter}`);

    await connection.end();

    return NextResponse.json({
      success: true,
      message: `–û—á–∏—â–µ–Ω–æ ${deletedCount} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö`,
      deletedCount: deletedCount,
      remainingCount: countAfter,
      timestamp: new Date().toISOString()
    });

  } catch (error: unknown) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:', error);
    return NextResponse.json({
      success: false,
      error: '–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤',
      details: { message: error instanceof Error ? error.message : 'Unknown error' }
    }, { status: 500 });
  }
}
