import { NextRequest, NextResponse } from 'next/server';
import { testConnection, getDatabaseInfo } from '@/lib/mysql';

export async function GET(request: NextRequest) {
  try {
    console.log('üîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MySQL...');

    // –¢–µ—Å—Ç—É—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è
    const isConnected = await testConnection();

    if (!isConnected) {
      return NextResponse.json({
        success: false,
        error: '–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ MySQL'
      }, { status: 500 });
    }

    // –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ë–î
    const dbInfo = await getDatabaseInfo();

    return NextResponse.json({
      success: true,
      message: '‚úÖ –ó\'—î–¥–Ω–∞–Ω–Ω—è –∑ MySQL —É—Å–ø—ñ—à–Ω–µ!',
      database: {
        name: dbInfo.database,
        host: dbInfo.host,
        tablesCount: dbInfo.tables.length,
        tables: dbInfo.tables
      },
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è MySQL:', error);

    return NextResponse.json({
      success: false,
      error: '–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MySQL',
      details: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞',
      timestamp: new Date().toISOString()
    }, { status: 500 });
  }
}
