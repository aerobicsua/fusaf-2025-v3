import { NextRequest, NextResponse } from 'next/server';
import { getApiSession } from '@/lib/auth';
// authOptions removed

// –ü–æ–∫—Ä–∞—â–µ–Ω–µ —Ñ–∞–π–ª–æ–≤–µ —Å—Ö–æ–≤–∏—â–µ –∑ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ñ—Å—Ç—é
// –í —Ä–µ–∞–ª—å–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—ñ —Ü–µ –±—É–¥–µ Supabase Storage –∞–±–æ AWS S3
class FileStorage {
  private files = new Map<string, { name: string, size: number, type: string, data: string, uploadDate: string }>();

  constructor() {
    // –°–∏–º—É–ª—è—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–∏—Ö —Ñ–∞–π–ª—ñ–≤ –∑ "–ë–î"
    this.loadExistingFiles();
  }

  private loadExistingFiles() {
    // –°–∏–º—É–ª—è—Ü—ñ—è —Ç–µ—Å—Ç–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤
    this.files.set('photo-1705234567890', {
      name: 'athlete_photo.jpg',
      size: 1024000,
      type: 'image/jpeg',
      data: this.generateSampleImageData(),
      uploadDate: '2024-01-15T10:30:00Z'
    });

    this.files.set('medical-1705234567890', {
      name: 'medical_certificate.pdf',
      size: 2048000,
      type: 'application/pdf',
      data: this.generateSamplePdfData(),
      uploadDate: '2024-01-15T10:30:00Z'
    });
  }

  private generateSampleImageData(): string {
    // –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –≤–∞–ª—ñ–¥–Ω–∏–π JPEG —Ñ–∞–π–ª —É base64 –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó
    return '/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAABAAEDASIAAhEBAxEB/8QAFQABAQAAAAAAAAAAAAAAAAAAAAv/xAAUEAEAAAAAAAAAAAAAAAAAAAAA/8QAFQEBAQAAAAAAAAAAAAAAAAAAAAX/xAAUEQEAAAAAAAAAAAAAAAAAAAAA/9oADAMBAAIRAxEAPwCdABmX/9k=';
  }

  private generateSamplePdfData(): string {
    // –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –≤–∞–ª—ñ–¥–Ω–∏–π PDF —Ñ–∞–π–ª —É base64
    return 'JVBERi0xLjQKJcOkw7zDtsO4DQoKMSAwIG9iago8PAovVHlwZSAvQ2F0YWxvZwovT3V0bGluZXMgMiAwIFIKL1BhZ2VzIDMgMCBSCj4+CmVuZG9iagoKMiAwIG9iago8PAovVHlwZSAvT3V0bGluZXMKL0NvdW50IDAKPj4KZW5kb2JqCgozIDAgb2JqCjw8Ci9UeXBlIC9QYWdlcwovQ291bnQgMQovS2lkcyBbNCAwIFJdCj4+CmVuZG9iagoKNCAwIG9iago8PAovVHlwZSAvUGFnZQovUGFyZW50IDMgMCBSCi9SZXNvdXJjZXMgPDwKL0ZvbnQgPDwKL0YxIDkgMCBSCj4+Cj4+Ci9NZWRpYUJveCBbMCAwIDYxMiA3OTJdCi9Db250ZW50cyA1IDAgUgo+PgplbmRvYmoKCjUgMCBvYmoKPDwKL0xlbmd0aCA0NQo+PgpzdHJlYW0KQBQKCAB0MQovRjEgMTIgVGYKMTAwIDcwMCBUZAooTWVkaWNhbCBDZXJ0aWZpY2F0ZSkgVGoKRVQKZW5kc3RyZWFtCmVuZG9iagoKeHJlZgowIDYKMDAwMDAwMDAwMCA2NTUzNSBmIAowMDAwMDAwMDA5IDAwMDAwIG4gCjAwMDAwMDAwNzQgMDAwMDAgbiAKMDAwMDAwMDEyMCAwMDAwMCBuIAowMDAwMDAwMTc3IDAwMDAwIG4gCjAwMDAwMDAzNjQgMDAwMDAgbiAKdHJhaWxlcgo8PAovU2l6ZSA2Ci9Sb290IDEgMCBSCj4+CnN0YXJ0eHJlZgo0NTkKJSVFT0Y=';
  }

  save(fileId: string, file: { name: string, size: number, type: string, data: string }): void {
    this.files.set(fileId, {
      ...file,
      uploadDate: new Date().toISOString()
    });
    console.log(`üíæ –§–∞–π–ª –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ FileStorage: ${fileId} -> ${file.name}`);
  }

  get(fileId: string): { name: string, size: number, type: string, data: string, uploadDate: string } | undefined {
    return this.files.get(fileId);
  }

  delete(fileId: string): boolean {
    const deleted = this.files.delete(fileId);
    if (deleted) {
      console.log(`üóëÔ∏è –§–∞–π–ª –≤–∏–¥–∞–ª–µ–Ω–æ –∑ FileStorage: ${fileId}`);
    }
    return deleted;
  }

  getFileUrl(fileId: string): string {
    return `/api/files/${fileId}`;
  }
}

const fileStorage = new FileStorage();

// –ü–æ–∫—Ä–∞—â–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ email –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async function sendFileUpdateNotification(profile: any, fileType: string, fileName: string) {
  const fileTypeNames = {
    photo: '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é –ø—Ä–æ—Ñ—ñ–ª—é',
    medicalCertificate: '–º–µ–¥–∏—á–Ω—É –¥–æ–≤—ñ–¥–∫—É',
    parentalConsent: '–¥–æ–∑–≤—ñ–ª –±–∞—Ç—å–∫—ñ–≤'
  };

  const emailData = {
    to: profile.email,
    subject: `–û–Ω–æ–≤–ª–µ–Ω–æ ${fileTypeNames[fileType as keyof typeof fileTypeNames]} –≤ –ø—Ä–æ—Ñ—ñ–ª—ñ –§–£–°–ê–§`,
    html: `
      <h2>–í—ñ—Ç–∞—î–º–æ, ${profile.fullName}!</h2>

      <p>–í–∞—à –¥–æ–∫—É–º–µ–Ω—Ç —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ –≤ –ø—Ä–æ—Ñ—ñ–ª—ñ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞ –§–£–°–ê–§.</p>

      <div style="background: #f8f9fa; padding: 15px; border-radius: 8px; margin: 20px 0;">
        <h3>üìÑ –î–µ—Ç–∞–ª—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:</h3>
        <ul>
          <li><strong>–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç—É:</strong> ${fileTypeNames[fileType as keyof typeof fileTypeNames]}</li>
          <li><strong>–ù–∞–∑–≤–∞ —Ñ–∞–π–ª—É:</strong> ${fileName}</li>
          <li><strong>–î–∞—Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:</strong> ${new Date().toLocaleString('uk-UA')}</li>
          <li><strong>–°—Ç–∞—Ç—É—Å:</strong> ‚úÖ –£—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ</li>
        </ul>
      </div>

      <p>üîí <strong>–ë–µ–∑–ø–µ–∫–∞:</strong> –Ø–∫—â–æ —Ü–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑—Ä–æ–±–∏–ª–∏ –Ω–µ –≤–∏, –Ω–µ–≥–∞–π–Ω–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ —Å–ª—É–∂–±–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.</p>

      <p>–ó –ø–æ–≤–∞–≥–æ—é,<br>–ö–æ–º–∞–Ω–¥–∞ –§–£–°–ê–§</p>

      <hr>
      <p style="color: #666; font-size: 12px;">
        –§–µ–¥–µ—Ä–∞—Ü—ñ—è –£–∫—Ä–∞—ó–Ω–∏ –∑—ñ –°–ø–æ—Ä—Ç–∏–≤–Ω–æ—ó –ê–µ—Ä–æ–±—ñ–∫–∏ —ñ –§—ñ—Ç–Ω–µ—Å—É<br>
        Email: info@fusaf.org.ua | –¢–µ–ª–µ—Ñ–æ–Ω: +38 (050) 123-45-67
      </p>
    `
  };

  // –í —Ä–µ–∞–ª—å–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—ñ —Ç—É—Ç –±—É–¥–µ Resend –∞–±–æ SendGrid
  console.log(`üìß EMAIL –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø:`);
  console.log(`‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ`);
  console.log(`–î–æ: ${emailData.to}`);
  console.log(`–¢–µ–º–∞: ${emailData.subject}`);
  console.log(`HTML: ${emailData.html.replace(/<[^>]*>/g, '').substring(0, 200)}...`);
  console.log(`–ß–∞—Å –≤—ñ–¥–ø—Ä–∞–≤–∫–∏: ${new Date().toISOString()}`);
  console.log(`‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ`);

  // TODO: –ü—ñ–¥–∫–ª—é—á–∏—Ç–∏ —Ä–µ–∞–ª—å–Ω–∏–π email —Å–µ—Ä–≤—ñ—Å
  // await emailService.send(emailData);
}

// –°–∏–º—É–ª—è—Ü—ñ—è –±–∞–∑–∏ –ø—Ä–æ—Ñ—ñ–ª—ñ–≤ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω—ñ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—ñ - –±–∞–∑–∞ –¥–∞–Ω–∏—Ö)
const athleteProfiles = new Map<string, any>();

// –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑ –æ—Å–Ω–æ–≤–Ω–∏–º API –ø—Ä–æ—Ñ—ñ–ª—é
// –í —Ä–µ–∞–ª—å–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—ñ —Ü–µ –±—É–¥–µ —î–¥–∏–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–∏—Ö

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–µ—Å—Ç–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤ —á–µ—Ä–µ–∑ FileStorage –∫–ª–∞—Å
// (—Ñ–∞–π–ª–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—é—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ñ FileStorage)

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
if (athleteProfiles.size === 0) {
  athleteProfiles.set('athlete-1705234567890', {
    id: "athlete-1705234567890",
    userId: "1",
    firstName: "–Ü–≤–∞–Ω",
    lastName: "–Ü–≤–∞–Ω–æ–≤",
    middleName: "–Ü–≤–∞–Ω–æ–≤–∏—á",
    fullName: "–Ü–≤–∞–Ω–æ–≤ –Ü–≤–∞–Ω –Ü–≤–∞–Ω–æ–≤–∏—á",
    dateOfBirth: "2000-03-15",
    age: 24,
    gender: "male",
    firstNameEn: "Ivan",
    lastNameEn: "Ivanov",
    passport: "AA123456",
    email: "ivan.ivanov@example.com",
    phone: "+380671234567",
    region: "–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
    city: "–ö–∏—ó–≤",
    address: "–≤—É–ª. –•—Ä–µ—â–∞—Ç–∏–∫, 1, –∫–≤. 1",
    club: "–°–ö –ö–∏—ó–≤ –ê–µ—Ä–æ–±—ñ–∫",
    coach: "–Ü–≤–∞–Ω–æ–≤–∞ –û–ª–µ–Ω–∞ –ü–µ—Ç—Ä—ñ–≤–Ω–∞",
    sportCategory: "1 —Å–ø–æ—Ä—Ç–∏–≤–Ω–∏–π —Ä–æ–∑—Ä—è–¥",
    experience: "5 —Ä–æ–∫—ñ–≤",
    achievements: "–ü–µ—Ä–µ–º–æ–∂–µ—Ü—å —á–µ–º–ø—ñ–æ–Ω–∞—Ç—É –º—ñ—Å—Ç–∞ –ö–∏—ó–≤ 2023, —É—á–∞—Å–Ω–∏–∫ —á–µ–º–ø—ñ–æ–Ω–∞—Ç—É –£–∫—Ä–∞—ó–Ω–∏ 2024",
    files: {
      photo: "photo-1705234567890",
      medicalCertificate: "medical-1705234567890",
      parentalConsent: null
    },
    photoUrl: "/api/files/photo-1705234567890",
    membershipPaid: true,
    membershipExpiryDate: "2025-12-31",
    status: "active",
    registrationDate: "2024-01-15T10:30:00Z",
    lastUpdated: new Date().toISOString()
  });

  // –î–æ–¥–∞—î–º–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ä–æ–ª—å—é athlete
  athleteProfiles.set('athlete-2', {
    id: "athlete-2",
    userId: "2",
    firstName: "–¢–µ—Å—Ç–æ–≤–∏–π",
    lastName: "–°–ø–æ—Ä—Ç—Å–º–µ–Ω",
    middleName: "",
    fullName: "–°–ø–æ—Ä—Ç—Å–º–µ–Ω –¢–µ—Å—Ç–æ–≤–∏–π",
    dateOfBirth: "1995-05-20",
    age: 29,
    gender: "male",
    firstNameEn: "Test",
    lastNameEn: "Athlete",
    passport: "",
    email: "athlete@fusaf.org.ua",
    phone: "+380501234567",
    region: "–º. –ö–∏—ó–≤",
    city: "–ö–∏—ó–≤",
    address: "–≤—É–ª. –¢–µ—Å—Ç–æ–≤–∞, 5, –∫–≤. 10",
    club: "–°–ö –õ—å–≤—ñ–≤ –§—ñ—Ç–Ω–µ—Å",
    coach: "–ö–æ–≤–∞–ª–µ–Ω–∫–æ –ú–∞—Ä–∏–Ω–∞ –°–µ—Ä–≥—ñ—ó–≤–Ω–∞",
    sportCategory: "–ö–∞–Ω–¥–∏–¥–∞—Ç —É –º–∞–π—Å—Ç—Ä–∏ —Å–ø–æ—Ä—Ç—É",
    experience: "8 —Ä–æ–∫—ñ–≤",
    achievements: "–£—á–∞—Å–Ω–∏–∫ —á–µ–º–ø—ñ–æ–Ω–∞—Ç—É –£–∫—Ä–∞—ó–Ω–∏, –ø—Ä–∏–∑–µ—Ä —Ä–µ–≥—ñ–æ–Ω–∞–ª—å–Ω–∏—Ö –∑–º–∞–≥–∞–Ω—å",
    files: {},
    photoUrl: null,
    membershipPaid: true,
    membershipExpiryDate: "2025-12-31",
    status: "active",
    registrationDate: "2024-02-01T12:00:00Z",
    lastUpdated: new Date().toISOString()
  });
}

// POST - –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤
export async function POST(request: NextRequest) {
  try {
    const session = await getApiSession(request);

    if (!session || !session.user) {
      return NextResponse.json(
        { error: '–ù–µ–æ–±—Ö—ñ–¥–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è' },
        { status: 401 }
      );
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–º
    if (!session.user.roles?.includes('athlete')) {
      return NextResponse.json(
        { error: '–î–æ—Å—Ç—É–ø —Ç—ñ–ª—å–∫–∏ –¥–ª—è —Å–ø–æ—Ä—Ç—Å–º–µ–Ω—ñ–≤' },
        { status: 403 }
      );
    }

    const formData = await request.formData();
    const athleteId = formData.get('athleteId') as string;
    const fileType = formData.get('fileType') as string; // 'photo', 'medicalCertificate', 'parentalConsent'
    const file = formData.get('file') as File;

    if (!athleteId || !fileType || !file) {
      return NextResponse.json(
        { error: '–ù–µ –≤–∏—Å—Ç–∞—á–∞—î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤' },
        { status: 400 }
      );
    }

    const profile = athleteProfiles.get(athleteId);

    if (!profile) {
      return NextResponse.json(
        { error: '–ü—Ä–æ—Ñ—ñ–ª—å —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' },
        { status: 404 }
      );
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø—É
    const isOwner = profile.userId === session.user.id;
    const isAdmin = session.user.roles?.includes('admin');

    if (!isOwner && !isAdmin) {
      return NextResponse.json(
        { error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤' },
        { status: 403 }
      );
    }

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–∏–ø—É —Ñ–∞–π–ª—É
    const allowedTypes = ['photo', 'medicalCertificate', 'parentalConsent'];
    if (!allowedTypes.includes(fileType)) {
      return NextResponse.json(
        { error: '–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø —Ñ–∞–π–ª—É' },
        { status: 400 }
      );
    }

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ä–æ–∑–º—ñ—Ä—É —Ñ–∞–π–ª—É
    const maxSizes = {
      photo: 5 * 1024 * 1024, // 5MB
      medicalCertificate: 10 * 1024 * 1024, // 10MB
      parentalConsent: 10 * 1024 * 1024 // 10MB
    };

    if (file.size > maxSizes[fileType as keyof typeof maxSizes]) {
      return NextResponse.json(
        { error: `–†–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É –ø–µ—Ä–µ–≤–∏—â—É—î –¥–æ–ø—É—Å—Ç–∏–º–∏–π –ª—ñ–º—ñ—Ç (${maxSizes[fileType as keyof typeof maxSizes] / 1024 / 1024}MB)` },
        { status: 400 }
      );
    }

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–∏–ø—É MIME
    const allowedMimeTypes = {
      photo: ['image/jpeg', 'image/jpg', 'image/png'],
      medicalCertificate: ['image/jpeg', 'image/jpg', 'image/png', 'application/pdf'],
      parentalConsent: ['image/jpeg', 'image/jpg', 'image/png', 'application/pdf']
    };

    if (!allowedMimeTypes[fileType as keyof typeof allowedMimeTypes].includes(file.type)) {
      return NextResponse.json(
        { error: '–ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π —Ç–∏–ø —Ñ–∞–π–ª—É' },
        { status: 400 }
      );
    }

    // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É
    const fileId = `${fileType}-${athleteId}-${Date.now()}`;
    const buffer = Buffer.from(await file.arrayBuffer());
    const base64Data = buffer.toString('base64');

    fileStorage.save(fileId, {
      name: file.name,
      size: file.size,
      type: file.type,
      data: base64Data
    });

    // –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–∏–π —Ñ–∞–π–ª —è–∫—â–æ –≤—ñ–Ω —ñ—Å–Ω—É—î
    const oldFileId = profile.files?.[fileType];
    if (oldFileId) {
      fileStorage.delete(oldFileId);
    }

    // –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å
    const updatedProfile = {
      ...profile,
      files: {
        ...profile.files,
        [fileType]: fileId
      },
      lastUpdated: new Date().toISOString()
    };

    // –û–Ω–æ–≤–ª—é—î–º–æ photoUrl –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó
    if (fileType === 'photo') {
      updatedProfile.photoUrl = `/api/files/${fileId}`;
    }

    athleteProfiles.set(athleteId, updatedProfile);

    console.log(`‚úÖ –§–∞–π–ª –æ–Ω–æ–≤–ª–µ–Ω–æ: ${fileType} -> ${file.name} –¥–ª—è ${profile.fullName}`);

    // –ü–æ–∫—Ä–∞—â–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ email –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    await sendFileUpdateNotification(profile, fileType, file.name);

    return NextResponse.json({
      success: true,
      message: '–§–∞–π–ª —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ',
      fileId: fileId,
      fileType: fileType,
      fileName: file.name,
      fileUrl: fileType === 'photo' ? `/api/files/${fileId}` : null,
      profile: updatedProfile
    });

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É:', error);
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}

// DELETE - –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—É
export async function DELETE(request: NextRequest) {
  try {
    const session = await getApiSession(request);

    if (!session || !session.user) {
      return NextResponse.json(
        { error: '–ù–µ–æ–±—Ö—ñ–¥–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è' },
        { status: 401 }
      );
    }

    const { athleteId, fileType } = await request.json();

    if (!athleteId || !fileType) {
      return NextResponse.json(
        { error: '–ù–µ –≤–∏—Å—Ç–∞—á–∞—î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤' },
        { status: 400 }
      );
    }

    const profile = athleteProfiles.get(athleteId);

    if (!profile) {
      return NextResponse.json(
        { error: '–ü—Ä–æ—Ñ—ñ–ª—å —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' },
        { status: 404 }
      );
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø—É
    const isOwner = profile.userId === session.user.id;
    const isAdmin = session.user.roles?.includes('admin');

    if (!isOwner && !isAdmin) {
      return NextResponse.json(
        { error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤' },
        { status: 403 }
      );
    }

    const fileId = profile.files?.[fileType];
    if (!fileId) {
      return NextResponse.json(
        { error: '–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' },
        { status: 404 }
      );
    }

    // –í–∏–¥–∞–ª—è—î–º–æ —Ñ–∞–π–ª
    fileStorage.delete(fileId);

    // –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å
    const updatedFiles = { ...profile.files };
    delete updatedFiles[fileType];

    const updatedProfile = {
      ...profile,
      files: updatedFiles,
      photoUrl: fileType === 'photo' ? null : profile.photoUrl,
      lastUpdated: new Date().toISOString()
    };

    athleteProfiles.set(athleteId, updatedProfile);

    console.log(`üóëÔ∏è –§–∞–π–ª –≤–∏–¥–∞–ª–µ–Ω–æ: ${fileType} –¥–ª—è ${profile.fullName}`);

    return NextResponse.json({
      success: true,
      message: '–§–∞–π–ª —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ',
      fileType: fileType,
      profile: updatedProfile
    });

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—É:', error);
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}
