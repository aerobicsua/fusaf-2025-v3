import { NextResponse } from 'next/server';
import { createPool } from '@/lib/mysql';

export async function POST() {
  try {
    console.log('üîß –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ club_requests...');

    const pool = createPool();
    const connection = await pool.getConnection();

    // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é club_requests
    const createTableSQL = `
      CREATE TABLE IF NOT EXISTS club_requests (
        id VARCHAR(36) PRIMARY KEY,

        -- –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_id VARCHAR(36) NOT NULL,
        user_name VARCHAR(255) NOT NULL,
        user_email VARCHAR(255) NOT NULL,
        user_phone VARCHAR(20) NOT NULL,

        -- –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –∫–ª—É–±—É
        club_name VARCHAR(255) NOT NULL,
        club_type ENUM('club', 'subdivision') DEFAULT 'club',
        club_address VARCHAR(500) NOT NULL,
        club_city VARCHAR(255) NOT NULL,
        club_region VARCHAR(255) NOT NULL,
        club_zip_code VARCHAR(10) NOT NULL,
        club_description TEXT,
        club_experience TEXT,
        club_legal_status VARCHAR(100) NOT NULL,
        club_website VARCHAR(500),

        -- –î–æ–∫—É–º–µ–Ω—Ç–∏
        documents JSON,

        -- –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
        status ENUM('pending', 'approved', 'rejected') DEFAULT 'pending',
        submitted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        reviewed_at TIMESTAMP NULL,
        reviewed_by VARCHAR(36) NULL,
        review_notes TEXT,

        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

        INDEX idx_status (status),
        INDEX idx_user (user_id),
        INDEX idx_submitted (submitted_at)
      ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
    `;

    await connection.execute(createTableSQL);
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü—è club_requests —Å—Ç–≤–æ—Ä–µ–Ω–∞');

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω—É —Ç–∞–±–ª–∏—Ü—é
    const [tables] = await connection.execute('SHOW TABLES LIKE "club_requests"');
    console.log('üìã –¢–∞–±–ª–∏—Ü—è club_requests —ñ—Å–Ω—É—î:', tables);

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ñ
    const [columns] = await connection.execute('DESCRIBE club_requests');
    console.log('üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ñ club_requests:', columns);

    connection.release();

    return NextResponse.json({
      success: true,
      message: '–¢–∞–±–ª–∏—Ü—è club_requests —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∞',
      table: 'club_requests',
      columns: columns
    });

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ club_requests:', error);
    return NextResponse.json({
      success: false,
      error: '–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ club_requests',
      details: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'
    }, { status: 500 });
  }
}
