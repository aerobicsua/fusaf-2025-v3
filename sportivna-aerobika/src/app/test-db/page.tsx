"use client";

import { useState } from 'react';
import { Header } from '@/components/Header';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import {
  Database,
  CheckCircle,
  XCircle,
  Loader,
  Server,
  Table,
  Trash2,
  RefreshCw,
  User
} from 'lucide-react';

export default function TestDatabasePage() {
  const [testing, setTesting] = useState(false);
  const [result, setResult] = useState<any>(null);
  const [clearing, setClearing] = useState(false);
  const [creatingAdmin, setCreatingAdmin] = useState(false);
  const [adminResult, setAdminResult] = useState<any>(null);
  const [checkingUsers, setCheckingUsers] = useState(false);
  const [usersResult, setUsersResult] = useState<any>(null);
  const [clearingUsers, setClearingUsers] = useState(false);

  const testDatabase = async () => {
    setTesting(true);
    setResult(null);

    try {
      const response = await fetch('/api/test-db');
      const data = await response.json();

      setResult(data);
      console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ë–î:', data);
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:', error);
      setResult({
        success: false,
        error: '–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ API',
        details: { message: error instanceof Error ? error.message : 'Unknown error' }
      });
    } finally {
      setTesting(false);
    }
  };

  const clearLocalStorage = () => {
    setClearing(true);

    // –û—á–∏—â–∞—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ localStorage
    const keys = [
      'approvedClubs',
      'clubTrainers',
      'approvedAthletes',
      'coachJudgeApplications',
      'approvedCompetitions',
      'approvedNews',
      'user',
      'authToken'
    ];

    keys.forEach(key => localStorage.removeItem(key));

    setTimeout(() => {
      setClearing(false);
      window.location.reload(); // –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É
    }, 1000);
  };

  const createAdmin = async () => {
    setCreatingAdmin(true);
    setAdminResult(null);

    try {
      // –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—é—î–º–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ API
      const response = await fetch('/api/create-admin', {
        method: 'POST'
      });
      const data = await response.json();

      if (data.success) {
        // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–≤–Ω–∏–π –æ–±'—î–∫—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è localStorage
        const adminUser = {
          id: "admin-fusaf-2024",
          email: "aerobicsua@gmail.com",
          name: "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –§–£–°–ê–§",
          roles: ["admin", "user", "coach_judge", "club_owner"],
          createdAt: new Date().toISOString(),
          lastLogin: new Date().toISOString(),
          emailVerified: true,
          profile: {
            firstName: "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä",
            lastName: "–§–£–°–ê–§",
            middleName: "",
            dateOfBirth: "1980-01-01",
            gender: "male",
            phone: "+380441234567",

            country: "–£–∫—Ä–∞—ó–Ω–∞",
            region: "–º. –ö–∏—ó–≤",
            city: "–ö–∏—ó–≤",
            address: "–≤—É–ª. –°–ø–æ—Ä—Ç–∏–≤–Ω–∞, 1",
            zipCode: "01001",

            club: "–§–µ–¥–µ—Ä–∞—Ü—ñ—è –£–∫—Ä–∞—ó–Ω–∏ –∑—ñ –°–ø–æ—Ä—Ç–∏–≤–Ω–æ—ó –ê–µ—Ä–æ–±—ñ–∫–∏ —ñ –§—ñ—Ç–Ω–µ—Å—É",
            coach: "",
            sportCategory: "–ú–∞–π—Å—Ç–µ—Ä —Å–ø–æ—Ä—Ç—É –º—ñ–∂–Ω–∞—Ä–æ–¥–Ω–æ–≥–æ –∫–ª–∞—Å—É",
            experience: "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º–∏ –§–£–°–ê–§",
            specialization: "–°–ø–æ—Ä—Ç–∏–≤–Ω–∞ –∞–µ—Ä–æ–±—ñ–∫–∞",

            bio: "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º–∏ –§–µ–¥–µ—Ä–∞—Ü—ñ—ó –£–∫—Ä–∞—ó–Ω–∏ –∑—ñ –°–ø–æ—Ä—Ç–∏–≤–Ω–æ—ó –ê–µ—Ä–æ–±—ñ–∫–∏ —ñ –§—ñ—Ç–Ω–µ—Å—É",
            website: "https://fusaf.org.ua",
            socialMedia: {
              instagram: "@fusaf_ukraine",
              facebook: "fusaf.ukraine",
              telegram: "@fusaf_ukraine"
            },

            achievements: "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –§–£–°–ê–§",
            competitions: [],

            isPublicProfile: false,
            showEmail: false,
            showPhone: false,
            emailNotifications: true,

            avatar: ""
          }
        };

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ localStorage –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
        const adminUserData = {
          user: adminUser,
          password: "fusaf2025",
          lastLogin: new Date().toISOString()
        };

        // –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        const existingUsers = JSON.parse(localStorage.getItem('simple-auth-users') || '[]');
        const filteredUsers = existingUsers.filter((u: any) => u.user.email !== "aerobicsua@gmail.com");
        const updatedUsers = [...filteredUsers, adminUserData];

        localStorage.setItem('simple-auth-users', JSON.stringify(updatedUsers));

        // –¢–∞–∫–æ–∂ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –ø–æ—Å—Ç—ñ–π–Ω–µ —Å—Ö–æ–≤–∏—â–µ –æ–Ω–æ–≤–ª–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        const updatedUsersKey = 'fusaf-updated-users';
        let updatedUsersStorage: { [email: string]: any } = {};

        try {
          const existing = localStorage.getItem(updatedUsersKey);
          if (existing) {
            updatedUsersStorage = JSON.parse(existing);
          }
        } catch (error) {
          console.warn('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:', error);
        }

        updatedUsersStorage[adminUser.email] = adminUser;
        localStorage.setItem(updatedUsersKey, JSON.stringify(updatedUsersStorage));

        console.log('‚úÖ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å—Ç–≤–æ—Ä–µ–Ω–æ –≤ localStorage');
        console.log('‚úÖ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –ø–æ—Å—Ç—ñ–π–Ω–µ —Å—Ö–æ–≤–∏—â–µ');
      }

      setAdminResult(data);
    } catch (error: unknown) {
      console.error('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error);
      setAdminResult({
        success: false,
        error: '–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ API',
        details: { message: error instanceof Error ? error.message : 'Unknown error' }
      });
    } finally {
      setCreatingAdmin(false);
    }
  };

  const checkUsers = async () => {
    setCheckingUsers(true);
    setUsersResult(null);

    try {
      const response = await fetch('/api/manage-users');
      const data = await response.json();

      setUsersResult(data);
      console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:', data);
    } catch (error: unknown) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:', error);
      setUsersResult({
        success: false,
        error: '–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ API',
        details: { message: error instanceof Error ? error.message : 'Unknown error' }
      });
    } finally {
      setCheckingUsers(false);
    }
  };

  const clearUsers = async () => {
    setClearingUsers(true);

    try {
      const response = await fetch('/api/manage-users', {
        method: 'DELETE'
      });
      const data = await response.json();

      setUsersResult(data);
      console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—á–∏—â–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:', data);
    } catch (error: unknown) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:', error);
      setUsersResult({
        success: false,
        error: '–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ API',
        details: { message: error instanceof Error ? error.message : 'Unknown error' }
      });
    } finally {
      setClearingUsers(false);
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      <Header />

      <div className="container mx-auto px-4 py-8">
        <div className="max-w-4xl mx-auto">
          <div className="text-center mb-8">
            <h1 className="text-3xl font-bold mb-4">üóÑÔ∏è –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö</h1>
            <p className="text-gray-600">
              –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MySQL –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —Ç–∞ –æ—á–∏—â–µ–Ω–Ω—è –¥–µ–º–æ –¥–∞–Ω–∏—Ö
            </p>
          </div>

          {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è */}
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-5 gap-4 mb-8 max-w-6xl mx-auto">
            <Button
              onClick={testDatabase}
              disabled={testing}
              className="bg-blue-500 hover:bg-blue-600"
            >
              {testing ? <Loader className="h-4 w-4 mr-2 animate-spin" /> : <Database className="h-4 w-4 mr-2" />}
              {testing ? '–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è...' : '–¢–µ—Å—Ç—É–≤–∞—Ç–∏ –ë–î'}
            </Button>

            <Button
              onClick={createAdmin}
              disabled={creatingAdmin}
              className="bg-green-500 hover:bg-green-600"
            >
              {creatingAdmin ? <Loader className="h-4 w-4 mr-2 animate-spin" /> : <CheckCircle className="h-4 w-4 mr-2" />}
              {creatingAdmin ? '–°—Ç–≤–æ—Ä–µ–Ω–Ω—è...' : '–°—Ç–≤–æ—Ä–∏—Ç–∏ –ê–¥–º—ñ–Ω–∞'}
            </Button>

            <Button
              onClick={checkUsers}
              disabled={checkingUsers}
              className="bg-purple-500 hover:bg-purple-600"
            >
              {checkingUsers ? <Loader className="h-4 w-4 mr-2 animate-spin" /> : <User className="h-4 w-4 mr-2" />}
              {checkingUsers ? '–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞...' : '–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ë–î'}
            </Button>

            <Button
              onClick={clearUsers}
              disabled={clearingUsers}
              className="bg-orange-500 hover:bg-orange-600"
            >
              {clearingUsers ? <Loader className="h-4 w-4 mr-2 animate-spin" /> : <RefreshCw className="h-4 w-4 mr-2" />}
              {clearingUsers ? '–û—á–∏—â–µ–Ω–Ω—è...' : '–û—á–∏—Å—Ç–∏—Ç–∏ –ë–î'}
            </Button>

            <Button
              onClick={clearLocalStorage}
              disabled={clearing}
              variant="destructive"
            >
              {clearing ? <Loader className="h-4 w-4 mr-2 animate-spin" /> : <Trash2 className="h-4 w-4 mr-2" />}
              {clearing ? '–û—á–∏—â–µ–Ω–Ω—è...' : '–û—á–∏—Å—Ç–∏—Ç–∏ localStorage'}
            </Button>
          </div>

          {/* –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ */}
          {adminResult && (
            <Card className="mb-8">
              <CardHeader>
                <CardTitle className="flex items-center">
                  {adminResult.success ? (
                    <CheckCircle className="h-5 w-5 mr-2 text-green-500" />
                  ) : (
                    <XCircle className="h-5 w-5 mr-2 text-red-500" />
                  )}
                  {adminResult.success ? '–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å—Ç–≤–æ—Ä–µ–Ω–æ!' : '–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞'}
                </CardTitle>
              </CardHeader>
              <CardContent>
                {adminResult.success ? (
                  <div className="space-y-4">
                    <div className="bg-green-50 p-4 rounded-md">
                      <h3 className="font-medium text-green-800 mb-2">–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä —Å—Ç–≤–æ—Ä–µ–Ω–∏–π —É—Å–ø—ñ—à–Ω–æ!</h3>
                      <div className="space-y-2 text-sm">
                        <div><strong>Email:</strong> {adminResult.credentials?.email}</div>
                        <div><strong>–ü–∞—Ä–æ–ª—å:</strong> {adminResult.credentials?.password}</div>
                        <div><strong>–†–æ–ª—ñ:</strong> {adminResult.admin?.roles?.join(', ')}</div>
                      </div>
                    </div>
                    <div className="bg-blue-50 p-3 rounded-md">
                      <p className="text-blue-800 text-sm">
                        üí° <strong>–¢–µ–ø–µ—Ä –º–æ–∂–µ—Ç–µ —É–≤—ñ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –∑ —Ü–∏–º–∏ credentials —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É –≤—Ö–æ–¥—É!</strong>
                      </p>
                    </div>
                  </div>
                ) : (
                  <div className="bg-red-50 p-4 rounded-md">
                    <h3 className="font-medium text-red-800 mb-2">–ü–æ–º–∏–ª–∫–∞:</h3>
                    <p className="text-red-700">{adminResult.error}</p>
                    {adminResult.details && (
                      <pre className="text-xs text-red-600 mt-2">
                        {JSON.stringify(adminResult.details, null, 2)}
                      </pre>
                    )}
                  </div>
                )}
              </CardContent>
            </Card>
          )}

          {/* –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏/–æ—á–∏—â–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ */}
          {usersResult && (
            <Card className="mb-8">
              <CardHeader>
                <CardTitle className="flex items-center">
                  {usersResult.success ? (
                    <CheckCircle className="h-5 w-5 mr-2 text-green-500" />
                  ) : (
                    <XCircle className="h-5 w-5 mr-2 text-red-500" />
                  )}
                  {usersResult.success ? '–û–ø–µ—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞!' : '–ü–æ–º–∏–ª–∫–∞ –æ–ø–µ—Ä–∞—Ü—ñ—ó'}
                </CardTitle>
              </CardHeader>
              <CardContent>
                {usersResult.success ? (
                  <div className="space-y-4">
                    <div className="bg-blue-50 p-4 rounded-md">
                      <h3 className="font-medium text-blue-800 mb-2">{usersResult.message}</h3>
                      {usersResult.users && (
                        <div className="space-y-2 text-sm">
                          <div><strong>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É –ë–î:</strong> {usersResult.users.length}</div>
                          {usersResult.users.length > 0 && (
                            <div className="bg-white p-3 rounded border max-h-40 overflow-y-auto">
                              {usersResult.users.map((user: any, index: number) => (
                                <div key={index} className="text-xs border-b border-gray-200 pb-1 mb-1">
                                  <strong>{user.email}</strong> - {user.name} ({user.roles})
                                </div>
                              ))}
                            </div>
                          )}
                          {usersResult.deletedCount !== undefined && (
                            <div><strong>–í–∏–¥–∞–ª–µ–Ω–æ:</strong> {usersResult.deletedCount} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤</div>
                          )}
                          {usersResult.remainingCount !== undefined && (
                            <div><strong>–ó–∞–ª–∏—à–∏–ª–æ—Å—å:</strong> {usersResult.remainingCount} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤</div>
                          )}
                        </div>
                      )}
                    </div>
                  </div>
                ) : (
                  <div className="bg-red-50 p-4 rounded-md">
                    <h3 className="font-medium text-red-800 mb-2">–ü–æ–º–∏–ª–∫–∞:</h3>
                    <p className="text-red-700">{usersResult.error}</p>
                    {usersResult.details && (
                      <pre className="text-xs text-red-600 mt-2">
                        {JSON.stringify(usersResult.details, null, 2)}
                      </pre>
                    )}
                  </div>
                )}
              </CardContent>
            </Card>
          )}

          {/* –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ë–î */}
          {result && (
            <Card className="mb-8">
              <CardHeader>
                <CardTitle className="flex items-center">
                  {result.success ? (
                    <CheckCircle className="h-5 w-5 mr-2 text-green-500" />
                  ) : (
                    <XCircle className="h-5 w-5 mr-2 text-red-500" />
                  )}
                  {result.success ? '–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ!' : '–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è'}
                </CardTitle>
              </CardHeader>
              <CardContent>
                {result.success ? (
                  <div className="space-y-4">
                    {/* –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö */}
                    <div>
                      <h3 className="font-medium mb-2 flex items-center">
                        <Server className="h-4 w-4 mr-2" />
                        –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è:
                      </h3>
                      <div className="bg-gray-50 p-3 rounded-md">
                        <div className="grid grid-cols-2 gap-2 text-sm">
                          <div><strong>–•–æ—Å—Ç:</strong> {result.database?.host}</div>
                          <div><strong>–ü–æ—Ä—Ç:</strong> {result.database?.port}</div>
                          <div><strong>–ë–∞–∑–∞:</strong> {result.database?.database}</div>
                          <div><strong>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:</strong> {result.database?.user}</div>
                        </div>
                      </div>
                    </div>

                    {/* –¢–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø–∏—Ç */}
                    {result.testResult && (
                      <div>
                        <h3 className="font-medium mb-2">–¢–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø–∏—Ç:</h3>
                        <div className="bg-green-50 p-3 rounded-md">
                          <pre className="text-sm text-green-800">
                            {JSON.stringify(result.testResult[0], null, 2)}
                          </pre>
                        </div>
                      </div>
                    )}

                    {/* –¢–∞–±–ª–∏—Ü—ñ –≤ –ë–î */}
                    {result.tables && (
                      <div>
                        <h3 className="font-medium mb-2 flex items-center">
                          <Table className="h-4 w-4 mr-2" />
                          –¢–∞–±–ª–∏—Ü—ñ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö ({result.tables.length}):
                        </h3>
                        <div className="flex flex-wrap gap-2">
                          {result.tables.map((table: any, index: number) => (
                            <Badge key={index} variant="outline">
                              {String(Object.values(table)[0])}
                            </Badge>
                          ))}
                        </div>
                      </div>
                    )}

                    <div className="text-xs text-gray-500">
                      –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ: {new Date(result.timestamp).toLocaleString('uk-UA')}
                    </div>
                  </div>
                ) : (
                  <div className="space-y-4">
                    <div className="bg-red-50 p-4 rounded-md">
                      <h3 className="font-medium text-red-800 mb-2">–ü–æ–º–∏–ª–∫–∞:</h3>
                      <p className="text-red-700">{result.error}</p>
                    </div>

                    {result.details && (
                      <div>
                        <h3 className="font-medium mb-2">–î–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏:</h3>
                        <div className="bg-gray-50 p-3 rounded-md">
                          <pre className="text-sm text-gray-700">
                            {JSON.stringify(result.details, null, 2)}
                          </pre>
                        </div>
                      </div>
                    )}

                    {result.config && (
                      <div>
                        <h3 className="font-medium mb-2">–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è:</h3>
                        <div className="bg-gray-50 p-3 rounded-md">
                          <pre className="text-sm text-gray-700">
                            {JSON.stringify(result.config, null, 2)}
                          </pre>
                        </div>
                      </div>
                    )}
                  </div>
                )}
              </CardContent>
            </Card>
          )}

          {/* –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó */}
          <Card>
            <CardHeader>
              <CardTitle>üìã –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-3 text-sm">
                <div className="flex items-start space-x-2">
                  <span className="text-blue-500 font-medium">1.</span>
                  <span>–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å <strong>"–¢–µ—Å—Ç—É–≤–∞—Ç–∏ –ë–î"</strong> –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MySQL</span>
                </div>
                <div className="flex items-start space-x-2">
                  <span className="text-blue-500 font-medium">2.</span>
                  <span>–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å <strong>"–û—á–∏—Å—Ç–∏—Ç–∏ –¥–∞–Ω—ñ"</strong> –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö –¥–µ–º–æ –¥–∞–Ω–∏—Ö –∑ localStorage</span>
                </div>
                <div className="flex items-start space-x-2">
                  <span className="text-blue-500 font-medium">3.</span>
                  <span>–ü—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –º–æ–∂–Ω–∞ –Ω–∞–ª–∞—à—Ç–æ–≤—É–≤–∞—Ç–∏ –º—ñ–≥—Ä–∞—Ü—ñ—ó —Ç–∞ —Ç–∞–±–ª–∏—Ü—ñ –ë–î</span>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}
