"use client";

import { useState } from 'react';

export default function AdminExportPage() {
  const [loading, setLoading] = useState(false);
  const [selectedDataType, setSelectedDataType] = useState('athletes');
  const [exportFormat, setExportFormat] = useState('xlsx');
  const [dateRange, setDateRange] = useState({
    from: '',
    to: ''
  });
  const [filters, setFilters] = useState({
    status: 'all',
    region: 'all',
    category: 'all'
  });

  const dataTypes = [
    {
      id: 'athletes',
      name: '–°–ø–æ—Ä—Ç—Å–º–µ–Ω–∏',
      description: '–ü–æ–≤–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–∏—Ö –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö —Å–ø–æ—Ä—Ç—Å–º–µ–Ω—ñ–≤',
      icon: 'üèÉ‚Äç‚ôÇÔ∏è',
      fields: ['–ü–Ü–ë', 'Email', '–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è', '–°—Ç–∞—Ç—å', '–ö–ª—É–±', '–¢—Ä–µ–Ω–µ—Ä', '–û–±–ª–∞—Å—Ç—å', '–ú—ñ—Å—Ç–æ', '–°—Ç–∞—Ç—É—Å', '–î–∞—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó']
    },
    {
      id: 'coaches',
      name: '–¢—Ä–µ–Ω–µ—Ä–∏ —Ç–∞ —Å—É–¥–¥—ñ',
      description: '–ë–∞–∑–∞ —Ç—Ä–µ–Ω–µ—Ä—ñ–≤ —Ç–∞ —Å—É–¥–¥—ñ–≤ –∑ —ó—Ö –∫–≤–∞–ª—ñ—Ñ—ñ–∫–∞—Ü—ñ—è–º–∏',
      icon: 'üë®‚Äçüè´',
      fields: ['–ü–Ü–ë', 'Email', '–†–æ–ª—ñ', '–õ—ñ—Ü–µ–Ω–∑—ñ—è', '–°–ø–µ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è', '–î–æ—Å–≤—ñ–¥', '–ö–ª—É–±', '–û–±–ª–∞—Å—Ç—å', '–°—Ç–∞—Ç—É—Å']
    },
    {
      id: 'clubs',
      name: '–ö–ª—É–±–∏ —Ç–∞ –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª–∏',
      description: '–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ñ –∫–ª—É–±–∏ —Ç–∞ –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª–∏',
      icon: 'üè¢',
      fields: ['–ù–∞–∑–≤–∞', '–¢–∏–ø', '–ö–µ—Ä—ñ–≤–Ω–∏–∫', 'Email', '–¢–µ–ª–µ—Ñ–æ–Ω', '–ê–¥—Ä–µ—Å–∞', '–û–±–ª–∞—Å—Ç—å', '–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø–æ—Ä—Ç—Å–º–µ–Ω—ñ–≤']
    },
    {
      id: 'competitions',
      name: '–ó–º–∞–≥–∞–Ω–Ω—è',
      description: '–î–∞–Ω—ñ –ø—Ä–æ –ø—Ä–æ–≤–µ–¥–µ–Ω—ñ —Ç–∞ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω—ñ –∑–º–∞–≥–∞–Ω–Ω—è',
      icon: 'üèÜ',
      fields: ['–ù–∞–∑–≤–∞', '–†—ñ–≤–µ–Ω—å', '–î–∞—Ç–∞', '–ú—ñ—Å—Ü–µ', '–û—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä', '–£—á–∞—Å–Ω–∏–∫–∏', '–°—Ç–∞—Ç—É—Å', '–í–Ω–µ—Å–æ–∫']
    },
    {
      id: 'courses',
      name: '–ö—É—Ä—Å–∏ –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è –∫–≤–∞–ª—ñ—Ñ—ñ–∫–∞—Ü—ñ—ó',
      description: '–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫—É—Ä—Å–∏ –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä—ñ–≤ —Ç–∞ —Å—É–¥–¥—ñ–≤',
      icon: 'üéì',
      fields: ['–ù–∞–∑–≤–∞', '–¢–∏–ø', '–†—ñ–≤–µ–Ω—å', '–î–∞—Ç–∞', '–í–∏–∫–ª–∞–¥–∞—á', '–°–ª—É—Ö–∞—á—ñ', '–í–∞—Ä—Ç—ñ—Å—Ç—å', '–°—Ç–∞—Ç—É—Å']
    },
    {
      id: 'registrations',
      name: '–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –Ω–∞ –∑–º–∞–≥–∞–Ω–Ω—è',
      description: '–ó–∞—è–≤–∫–∏ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω—ñ–≤ –Ω–∞ —É—á–∞—Å—Ç—å —É –∑–º–∞–≥–∞–Ω–Ω—è—Ö',
      icon: 'üìã',
      fields: ['–°–ø–æ—Ä—Ç—Å–º–µ–Ω', '–ó–º–∞–≥–∞–Ω–Ω—è', '–î–∏—Å—Ü–∏–ø–ª—ñ–Ω–∞', '–í—ñ–∫–æ–≤–∞ –≥—Ä—É–ø–∞', '–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏', '–î–∞—Ç–∞ –ø–æ–¥–∞—á—ñ']
    },
    {
      id: 'news',
      name: '–ù–æ–≤–∏–Ω–∏',
      description: '–ê—Ä—Ö—ñ–≤ –Ω–æ–≤–∏–Ω —Ç–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ–π',
      icon: 'üì∞',
      fields: ['–ó–∞–≥–æ–ª–æ–≤–æ–∫', '–ê–≤—Ç–æ—Ä', '–ö–∞—Ç–µ–≥–æ—Ä—ñ—è', '–î–∞—Ç–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó', '–°—Ç–∞—Ç—É—Å', '–ü–µ—Ä–µ–≥–ª—è–¥–∏']
    }
  ];

  const regions = [
    '–ö–∏—ó–≤—Å—å–∫–∞', '–õ—å–≤—ñ–≤—Å—å–∫–∞', '–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞', '–û–¥–µ—Å—å–∫–∞', '–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞',
    '–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞', '–ü–æ–ª—Ç–∞–≤—Å—å–∫–∞', '–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫–∞', '–¢–µ—Ä–Ω–æ–ø—ñ–ª—å—Å—å–∫–∞', '–ß–µ—Ä–Ω—ñ–≤–µ—Ü—å–∫–∞'
  ];

  const handleExport = async () => {
    if (!selectedDataType) {
      alert('–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –¥–∞–Ω–∏—Ö –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É');
      return;
    }

    setLoading(true);

    try {
      // –°–∏–º—É–ª—è—Ü—ñ—è –µ–∫—Å–ø–æ—Ä—Ç—É –¥–∞–Ω–∏—Ö
      await new Promise(resolve => setTimeout(resolve, 2000));

      const selectedData = dataTypes.find(type => type.id === selectedDataType);
      const filename = `${selectedData?.name}_${new Date().toISOString().split('T')[0]}.${exportFormat}`;

      // –¢—É—Ç –±–∏ –±—É–≤ —Ä–µ–∞–ª—å–Ω–∏–π API –∑–∞–ø–∏—Ç
      console.log('–ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö:', {
        dataType: selectedDataType,
        format: exportFormat,
        dateRange,
        filters,
        filename
      });

      // –°–∏–º—É–ª—è—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É
      const mockData = generateMockData(selectedDataType);
      downloadFile(mockData, filename, exportFormat);

      alert(`–§–∞–π–ª ${filename} —É—Å–ø—ñ—à–Ω–æ –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ!`);
    } catch (error) {
      alert('–ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É: ' + (error instanceof Error ? error.message : String(error)));
    } finally {
      setLoading(false);
    }
  };

  const generateMockData = (dataType: string) => {
    // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –¥–µ–º–æ-–¥–∞–Ω–∏—Ö –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É
    const data = [];
    const selectedType = dataTypes.find(type => type.id === dataType);

    for (let i = 1; i <= 10; i++) {
      const row: Record<string, any> = {};
      selectedType?.fields.forEach(field => {
        switch (field) {
          case '–ü–Ü–ë':
            row[field] = `–¢–µ—Å—Ç–æ–≤–∏–π –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${i}`;
            break;
          case 'Email':
            row[field] = `user${i}@example.com`;
            break;
          case '–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è':
          case '–î–∞—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó':
          case '–î–∞—Ç–∞':
            row[field] = new Date(2000 + Math.random() * 24, Math.floor(Math.random() * 12), Math.floor(Math.random() * 28) + 1).toLocaleDateString('uk-UA');
            break;
          case '–°—Ç–∞—Ç—É—Å':
            row[field] = Math.random() > 0.5 ? '–ê–∫—Ç–∏–≤–Ω–∏–π' : '–ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π';
            break;
          default:
            row[field] = `–ó–Ω–∞—á–µ–Ω–Ω—è ${i}`;
        }
      });
      data.push(row);
    }

    return data;
  };

  const downloadFile = (data: any[], filename: string, format: string) => {
    let content = '';
    let mimeType = '';

    if (format === 'csv') {
      // CSV —Ñ–æ—Ä–º–∞—Ç
      const headers = Object.keys(data[0]).join(',');
      const rows = data.map(row => Object.values(row).join(',')).join('\n');
      content = headers + '\n' + rows;
      mimeType = 'text/csv';
    } else {
      // –î–ª—è XLS –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ CSV –∑ —Ç–∞–±—É–ª—è—Ü—ñ—î—é
      const headers = Object.keys(data[0]).join('\t');
      const rows = data.map(row => Object.values(row).join('\t')).join('\n');
      content = headers + '\n' + rows;
      mimeType = 'application/vnd.ms-excel';
    }

    const blob = new Blob([content], { type: mimeType });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    a.click();
    URL.revokeObjectURL(url);
  };

  const selectedType = dataTypes.find(type => type.id === selectedDataType);

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-4">
            <div>
              <h1 className="text-2xl font-bold text-gray-900">üìä –ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö</h1>
              <p className="text-gray-600 text-sm">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —É —Ñ–æ—Ä–º–∞—Ç–∞—Ö XLS —Ç–∞ CSV</p>
            </div>
            <div className="flex items-center space-x-4">
              <a href="/admin-panel" className="text-gray-500 hover:text-gray-700">
                ‚Üê –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ø–∞–Ω–µ–ª—ñ
              </a>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">

        {/* Quick Export Cards */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
          {dataTypes.map(type => (
            <div
              key={type.id}
              onClick={() => setSelectedDataType(type.id)}
              className={`bg-white rounded-lg shadow p-6 cursor-pointer transition-all ${
                selectedDataType === type.id
                  ? 'ring-2 ring-blue-500 bg-blue-50'
                  : 'hover:shadow-lg'
              }`}
            >
              <div className="flex items-center mb-3">
                <span className="text-2xl mr-3">{type.icon}</span>
                <h3 className="text-lg font-semibold text-gray-900">{type.name}</h3>
              </div>
              <p className="text-gray-600 text-sm mb-4">{type.description}</p>
              <div className="text-xs text-gray-500">
                –ü–æ–ª—è: {type.fields.slice(0, 3).join(', ')}
                {type.fields.length > 3 && ` +${type.fields.length - 3} —â–µ`}
              </div>
            </div>
          ))}
        </div>

        {/* Export Configuration */}
        <div className="bg-white rounded-lg shadow p-6 mb-6">
          <h2 className="text-lg font-semibold text-gray-900 mb-4">‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –µ–∫—Å–ø–æ—Ä—Ç—É</h2>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">

            {/* Selected Data Type */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                –¢–∏–ø –¥–∞–Ω–∏—Ö
              </label>
              <select
                value={selectedDataType}
                onChange={(e) => setSelectedDataType(e.target.value)}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
              >
                {dataTypes.map(type => (
                  <option key={type.id} value={type.id}>
                    {type.icon} {type.name}
                  </option>
                ))}
              </select>
            </div>

            {/* Export Format */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª—É
              </label>
              <select
                value={exportFormat}
                onChange={(e) => setExportFormat(e.target.value)}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
              >
                <option value="xlsx">üìä Excel (XLSX)</option>
                <option value="csv">üìÑ CSV</option>
              </select>
            </div>

            {/* Date Range */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                –ü–µ—Ä—ñ–æ–¥ –≤—ñ–¥
              </label>
              <input
                type="date"
                value={dateRange.from}
                onChange={(e) => setDateRange(prev => ({ ...prev, from: e.target.value }))}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                –ü–µ—Ä—ñ–æ–¥ –¥–æ
              </label>
              <input
                type="date"
                value={dateRange.to}
                onChange={(e) => setDateRange(prev => ({ ...prev, to: e.target.value }))}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
              />
            </div>

            {/* Additional Filters */}
            {selectedDataType === 'athletes' && (
              <>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    –°—Ç–∞—Ç—É—Å
                  </label>
                  <select
                    value={filters.status}
                    onChange={(e) => setFilters(prev => ({ ...prev, status: e.target.value }))}
                    className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="all">–í—Å—ñ —Å—Ç–∞—Ç—É—Å–∏</option>
                    <option value="active">–ê–∫—Ç–∏–≤–Ω—ñ</option>
                    <option value="blocked">–ó–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ</option>
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    –û–±–ª–∞—Å—Ç—å
                  </label>
                  <select
                    value={filters.region}
                    onChange={(e) => setFilters(prev => ({ ...prev, region: e.target.value }))}
                    className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="all">–í—Å—ñ –æ–±–ª–∞—Å—Ç—ñ</option>
                    {regions.map(region => (
                      <option key={region} value={region}>{region}</option>
                    ))}
                  </select>
                </div>
              </>
            )}
          </div>
        </div>

        {/* Selected Data Preview */}
        {selectedType && (
          <div className="bg-white rounded-lg shadow p-6 mb-6">
            <h2 className="text-lg font-semibold text-gray-900 mb-4">
              üìã –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥: {selectedType.name}
            </h2>

            <div className="mb-4">
              <p className="text-gray-600">{selectedType.description}</p>
            </div>

            <div className="mb-4">
              <h3 className="text-sm font-medium text-gray-700 mb-2">–ü–æ–ª—è –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É:</h3>
              <div className="flex flex-wrap gap-2">
                {selectedType.fields.map((field, index) => (
                  <span
                    key={index}
                    className="px-3 py-1 text-sm bg-blue-100 text-blue-800 rounded-full"
                  >
                    {field}
                  </span>
                ))}
              </div>
            </div>

            <div className="text-sm text-gray-500">
              üí° –§–∞–π–ª –±—É–¥–µ –º—ñ—Å—Ç–∏—Ç–∏ –≤—Å—ñ –∑–∞–ø–∏—Å–∏, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –∑–∞–¥–∞–Ω–∏–º —Ñ—ñ–ª—å—Ç—Ä–∞–º
            </div>
          </div>
        )}

        {/* Export Actions */}
        <div className="bg-white rounded-lg shadow p-6">
          <div className="flex items-center justify-between">
            <div>
              <h3 className="text-lg font-semibold text-gray-900">–ì–æ—Ç–æ–≤—ñ –¥–æ –µ–∫—Å–ø–æ—Ä—Ç—É?</h3>
              <p className="text-gray-600 text-sm">
                –§–∞–π–ª –±—É–¥–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —É —Ñ–æ—Ä–º–∞—Ç—ñ {exportFormat.toUpperCase()}
              </p>
            </div>

            <button
              onClick={handleExport}
              disabled={loading || !selectedDataType}
              className={`px-8 py-3 rounded-lg font-medium flex items-center ${
                loading || !selectedDataType
                  ? 'bg-gray-300 text-gray-500 cursor-not-allowed'
                  : 'bg-blue-600 text-white hover:bg-blue-700'
              }`}
            >
              {loading ? (
                <>
                  <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2"></div>
                  –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ...
                </>
              ) : (
                <>
                  üì• –ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ
                </>
              )}
            </button>
          </div>
        </div>

        {/* Help Section */}
        <div className="mt-8 bg-blue-50 border border-blue-200 rounded-lg p-6">
          <h3 className="text-lg font-semibold text-blue-900 mb-3">‚ÑπÔ∏è –î–æ–≤—ñ–¥–∫–∞</h3>
          <div className="space-y-2 text-sm text-blue-800">
            <p>‚Ä¢ <strong>XLS —Ñ–æ—Ä–º–∞—Ç:</strong> –ü—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –≤ Excel –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è</p>
            <p>‚Ä¢ <strong>CSV —Ñ–æ—Ä–º–∞—Ç:</strong> –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É –≤ —Ä—ñ–∑–Ω—ñ —Å–∏—Å—Ç–µ–º–∏</p>
            <p>‚Ä¢ <strong>–§—ñ–ª—å—Ç—Ä–∏:</strong> –î–æ–∑–≤–æ–ª—è—é—Ç—å –µ–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –¥–∞–Ω—ñ</p>
            <p>‚Ä¢ <strong>–î—ñ–∞–ø–∞–∑–æ–Ω –¥–∞—Ç:</strong> –û–±–º–µ–∂—É—î –µ–∫—Å–ø–æ—Ä—Ç –∑–∞–ø–∏—Å–∞–º–∏ –≤ –∑–∞–¥–∞–Ω–æ–º—É –ø–µ—Ä—ñ–æ–¥—ñ</p>
          </div>
        </div>
      </div>
    </div>
  );
}
